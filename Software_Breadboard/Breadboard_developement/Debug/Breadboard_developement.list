
Breadboard_developement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005674  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800580c  0800580c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005814  08005814  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800581c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  08005828  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005828  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013446  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bef  00000000  00000000  000334bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  000360b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d34  00000000  00000000  00037198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187f1  00000000  00000000  00037ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c68  00000000  00000000  000506bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cd3d  00000000  00000000  00066325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c94  00000000  00000000  00103064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00106cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005718 	.word	0x08005718

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005718 	.word	0x08005718

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	0018      	movs	r0, r3
 8000626:	230c      	movs	r3, #12
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f005 f848 	bl	80056c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000630:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000632:	4a5d      	ldr	r2, [pc, #372]	; (80007a8 <MX_ADC1_Init+0x18c>)
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000636:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	05d2      	lsls	r2, r2, #23
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b57      	ldr	r3, [pc, #348]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064a:	4b56      	ldr	r3, [pc, #344]	; (80007a4 <MX_ADC1_Init+0x188>)
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0392      	lsls	r2, r2, #14
 8000650:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b54      	ldr	r3, [pc, #336]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000654:	2204      	movs	r2, #4
 8000656:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000658:	4b52      	ldr	r3, [pc, #328]	; (80007a4 <MX_ADC1_Init+0x188>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800065e:	4b51      	ldr	r3, [pc, #324]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000660:	2200      	movs	r2, #0
 8000662:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000664:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000666:	2201      	movs	r2, #1
 8000668:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 7;
 800066a:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <MX_ADC1_Init+0x188>)
 800066c:	2207      	movs	r2, #7
 800066e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800067c:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <MX_ADC1_Init+0x188>)
 800067e:	222c      	movs	r2, #44	; 0x2c
 8000680:	2101      	movs	r1, #1
 8000682:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000686:	2200      	movs	r2, #0
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800068a:	4b46      	ldr	r3, [pc, #280]	; (80007a4 <MX_ADC1_Init+0x188>)
 800068c:	2207      	movs	r2, #7
 800068e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000690:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000692:	2207      	movs	r2, #7
 8000694:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000696:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000698:	223c      	movs	r2, #60	; 0x3c
 800069a:	2100      	movs	r1, #0
 800069c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800069e:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <MX_ADC1_Init+0x188>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a4:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <MX_ADC1_Init+0x188>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 ff36 	bl	8001518 <HAL_ADC_Init>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006b0:	f000 fa4e 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4a3d      	ldr	r2, [pc, #244]	; (80007ac <MX_ADC1_Init+0x190>)
 80006b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3a      	adds	r2, r7, #4
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <MX_ADC1_Init+0x188>)
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f971 	bl	80019b4 <HAL_ADC_ConfigChannel>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80006d6:	f000 fa3b 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4a34      	ldr	r2, [pc, #208]	; (80007b0 <MX_ADC1_Init+0x194>)
 80006de:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2204      	movs	r2, #4
 80006e4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3a      	adds	r2, r7, #4
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_ADC1_Init+0x188>)
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 f961 	bl	80019b4 <HAL_ADC_ConfigChannel>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006f6:	f000 fa2b 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2208      	movs	r2, #8
 8000704:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_ADC1_Init+0x188>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 f951 	bl	80019b4 <HAL_ADC_ConfigChannel>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000716:	f000 fa1b 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4a25      	ldr	r2, [pc, #148]	; (80007b4 <MX_ADC1_Init+0x198>)
 800071e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	220c      	movs	r2, #12
 8000724:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_ADC1_Init+0x188>)
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f001 f941 	bl	80019b4 <HAL_ADC_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000736:	f000 fa0b 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MX_ADC1_Init+0x19c>)
 800073e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2210      	movs	r2, #16
 8000744:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	1d3a      	adds	r2, r7, #4
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_ADC1_Init+0x188>)
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f001 f931 	bl	80019b4 <HAL_ADC_ConfigChannel>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000756:	f000 f9fb 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_ADC1_Init+0x1a0>)
 800075e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2214      	movs	r2, #20
 8000764:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_ADC1_Init+0x188>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 f921 	bl	80019b4 <HAL_ADC_ConfigChannel>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000776:	f000 f9eb 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <MX_ADC1_Init+0x1a4>)
 800077e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2218      	movs	r2, #24
 8000784:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	1d3a      	adds	r2, r7, #4
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_ADC1_Init+0x188>)
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 f911 	bl	80019b4 <HAL_ADC_ConfigChannel>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8000796:	f000 f9db 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b004      	add	sp, #16
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000028 	.word	0x20000028
 80007a8:	40012400 	.word	0x40012400
 80007ac:	14000020 	.word	0x14000020
 80007b0:	1c000080 	.word	0x1c000080
 80007b4:	04000002 	.word	0x04000002
 80007b8:	20000100 	.word	0x20000100
 80007bc:	24000200 	.word	0x24000200
 80007c0:	b0001000 	.word	0xb0001000

080007c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	2414      	movs	r4, #20
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0018      	movs	r0, r3
 80007d2:	2314      	movs	r3, #20
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f004 ff72 	bl	80056c0 <memset>
  if(adcHandle->Instance==ADC1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <HAL_ADC_MspInit+0x10c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d16f      	bne.n	80008c6 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 80007e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	0349      	lsls	r1, r1, #13
 80007f0:	430a      	orrs	r2, r1
 80007f2:	641a      	str	r2, [r3, #64]	; 0x40
 80007f4:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 80007f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	035b      	lsls	r3, r3, #13
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
 800080e:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000820:	2102      	movs	r1, #2
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	2202      	movs	r2, #2
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_IN0_GAIN_CO_Pin|ADC1_IN1_OFFSET_CO_Pin|ADC1_IN5_CO_Pin|ADC_IN7_NO_Pin;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	22a3      	movs	r2, #163	; 0xa3
 8000836:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2203      	movs	r2, #3
 800083c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	193a      	adds	r2, r7, r4
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f001 fecd 	bl	80025ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_GAIN_NO_Pin|ADC1_IN9_OFFSET_NO_Pin;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2203      	movs	r2, #3
 8000856:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2203      	movs	r2, #3
 800085c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	193b      	adds	r3, r7, r4
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <HAL_ADC_MspInit+0x114>)
 8000868:	0019      	movs	r1, r3
 800086a:	0010      	movs	r0, r2
 800086c:	f001 febe 	bl	80025ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <HAL_ADC_MspInit+0x11c>)
 8000874:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000878:	2205      	movs	r2, #5
 800087a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_ADC_MspInit+0x118>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_ADC_MspInit+0x118>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fc4b 	bl	8002148 <HAL_DMA_Init>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80008b6:	f000 f94b 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008be:	651a      	str	r2, [r3, #80]	; 0x50
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b00b      	add	sp, #44	; 0x2c
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40012400 	.word	0x40012400
 80008d4:	40021000 	.word	0x40021000
 80008d8:	50000400 	.word	0x50000400
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	40020008 	.word	0x40020008

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_DMA_Init+0x48>)
 80008ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_DMA_Init+0x48>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	639a      	str	r2, [r3, #56]	; 0x38
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_DMA_Init+0x48>)
 80008f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fa:	2201      	movs	r2, #1
 80008fc:	4013      	ands	r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2009      	movs	r0, #9
 8000908:	f001 fbec 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090c:	2009      	movs	r0, #9
 800090e:	f001 fbfe 	bl	800210e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	200a      	movs	r0, #10
 8000918:	f001 fbe4 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800091c:	200a      	movs	r0, #10
 800091e:	f001 fbf6 	bl	800210e <HAL_NVIC_EnableIRQ>

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000

08000930 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b08b      	sub	sp, #44	; 0x2c
 8000934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	2414      	movs	r4, #20
 8000938:	193b      	adds	r3, r7, r4
 800093a:	0018      	movs	r0, r3
 800093c:	2314      	movs	r3, #20
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f004 febd 	bl	80056c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094a:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800094c:	2104      	movs	r1, #4
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2204      	movs	r2, #4
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000964:	2120      	movs	r1, #32
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	2220      	movs	r2, #32
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000994:	2102      	movs	r1, #2
 8000996:	430a      	orrs	r2, r1
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800099c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099e:	2202      	movs	r2, #2
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_GPIO_Init+0xf4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 ff81 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2204      	movs	r2, #4
 80009b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2288      	movs	r2, #136	; 0x88
 80009bc:	0352      	lsls	r2, r2, #13
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <MX_GPIO_Init+0xf8>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	0010      	movs	r0, r2
 80009ce:	f001 fe0d 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2240      	movs	r2, #64	; 0x40
 80009d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <MX_GPIO_Init+0xf4>)
 80009ee:	0019      	movs	r1, r3
 80009f0:	0010      	movs	r0, r2
 80009f2:	f001 fdfb 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_IN_DIP5_Pin|GPIO_IN_DIP4_Pin|GPIO_IN_DIP3_Pin|GPIO_IN_DIP2_Pin
 80009f6:	0021      	movs	r1, r4
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	22fc      	movs	r2, #252	; 0xfc
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
                          |GPIO_IN_DIP1_Pin|GPIO_IN_DIP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <MX_GPIO_Init+0xfc>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f001 fdea 	bl	80025ec <HAL_GPIO_Init>

}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b00b      	add	sp, #44	; 0x2c
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	50000800 	.word	0x50000800
 8000a28:	50001400 	.word	0x50001400
 8000a2c:	50000400 	.word	0x50000400

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f000 fba1 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f841 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f7ff ff77 	bl	8000930 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a42:	f7ff ff4f 	bl	80008e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a46:	f000 faa1 	bl	8000f8c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a4a:	f7ff fde7 	bl	800061c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a4e:	f000 f8df 	bl	8000c10 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a52:	f000 fa4b 	bl	8000eec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	uint32_t value_adc_DMA[7]={0,0,0,0,0,0,0}; // [NO, CO, NO offset, NO gain, CO offset, CO gain, int_Temperature] // #TODO restructure as struct instrad array
 8000a56:	003b      	movs	r3, r7
 8000a58:	0018      	movs	r0, r3
 8000a5a:	231c      	movs	r3, #28
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f004 fe2e 	bl	80056c0 <memset>

	uint8_t DutyCycle = 50; // Duty cycle in Percent
 8000a64:	211f      	movs	r1, #31
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2232      	movs	r2, #50	; 0x32
 8000a6a:	701a      	strb	r2, [r3, #0]

	TIM1->CCR1 = 160/(DutyCycle/100); //1600 reload register / 2 = 50% DUty cicle // set to 256 (8 bit later?) #TODO
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2164      	movs	r1, #100	; 0x64
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff fb46 	bl	8000104 <__udivsi3>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	20a0      	movs	r0, #160	; 0xa0
 8000a80:	f7ff fbca 	bl	8000218 <__divsi3>
 8000a84:	0003      	movs	r3, r0
 8000a86:	001a      	movs	r2, r3
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <main+0x80>)
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <main+0x84>)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 fe6f 	bl	8003774 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, value_adc_DMA, 7);
 8000a96:	0039      	movs	r1, r7
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <main+0x88>)
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fee3 	bl	8001868 <HAL_ADC_Start_DMA>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_UART_Transmit_DMA(&huart2, value_adc_DMA, sizeof(value_adc_DMA) );
 8000aa2:	0039      	movs	r1, r7
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <main+0x8c>)
 8000aa6:	221c      	movs	r2, #28
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f003 fe4d 	bl	8004748 <HAL_UART_Transmit_DMA>
 8000aae:	e7f8      	b.n	8000aa2 <main+0x72>
 8000ab0:	40012c00 	.word	0x40012c00
 8000ab4:	200000e8 	.word	0x200000e8
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	20000224 	.word	0x20000224

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b093      	sub	sp, #76	; 0x4c
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	2410      	movs	r4, #16
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	0018      	movs	r0, r3
 8000acc:	2338      	movs	r3, #56	; 0x38
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f004 fdf5 	bl	80056c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2310      	movs	r3, #16
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f004 fdee 	bl	80056c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 ff01 	bl	80028f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2202      	movs	r2, #2
 8000af2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2240      	movs	r2, #64	; 0x40
 8000b06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 ff39 	bl	8002988 <HAL_RCC_OscConfig>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b1a:	f000 f819 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	003b      	movs	r3, r7
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b24:	003b      	movs	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b30:	003b      	movs	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b36:	003b      	movs	r3, r7
 8000b38:	2100      	movs	r1, #0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f002 fa3e 	bl	8002fbc <HAL_RCC_ClockConfig>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b44:	f000 f804 	bl	8000b50 <Error_Handler>
  }
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b013      	add	sp, #76	; 0x4c
 8000b4e:	bd90      	pop	{r4, r7, pc}

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	2101      	movs	r1, #1
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	2201      	movs	r2, #1
 8000b74:	4013      	ands	r3, r2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	0549      	lsls	r1, r1, #21
 8000b84:	430a      	orrs	r2, r1
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	4013      	ands	r3, r2
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 fb42 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <DMA1_Channel1_IRQHandler+0x14>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 fbc4 	bl	8002368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	2000008c 	.word	0x2000008c

08000bec <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 fbb8 	bl	8002368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000134 	.word	0x20000134

08000c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b09c      	sub	sp, #112	; 0x70
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	2360      	movs	r3, #96	; 0x60
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f004 fd4d 	bl	80056c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c26:	2354      	movs	r3, #84	; 0x54
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f004 fd45 	bl	80056c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c36:	2338      	movs	r3, #56	; 0x38
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	231c      	movs	r3, #28
 8000c3e:	001a      	movs	r2, r3
 8000c40:	2100      	movs	r1, #0
 8000c42:	f004 fd3d 	bl	80056c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2334      	movs	r3, #52	; 0x34
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f004 fd36 	bl	80056c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c54:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c56:	4a52      	ldr	r2, [pc, #328]	; (8000da0 <MX_TIM1_Init+0x190>)
 8000c58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c5a:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 160-1;
 8000c66:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c68:	229f      	movs	r2, #159	; 0x9f
 8000c6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c72:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 fcbf 	bl	8003604 <HAL_TIM_Base_Init>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000c8a:	f7ff ff61 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	2160      	movs	r1, #96	; 0x60
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	0152      	lsls	r2, r2, #5
 8000c96:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c98:	187a      	adds	r2, r7, r1
 8000c9a:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f002 ff46 	bl	8003b30 <HAL_TIM_ConfigClockSource>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000ca8:	f7ff ff52 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cac:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 fd00 	bl	80036b4 <HAL_TIM_PWM_Init>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000cb8:	f7ff ff4a 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbc:	2154      	movs	r1, #84	; 0x54
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd0:	187a      	adds	r2, r7, r1
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f003 fbd2 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ce0:	f7ff ff36 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce4:	2138      	movs	r1, #56	; 0x38
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2260      	movs	r2, #96	; 0x60
 8000cea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	0018      	movs	r0, r3
 8000d18:	f002 fe0a 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000d20:	f7ff ff16 	bl	8000b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	0192      	lsls	r2, r2, #6
 8000d48:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	0492      	lsls	r2, r2, #18
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d76:	1d3a      	adds	r2, r7, #4
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f003 fbe7 	bl	8004550 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000d86:	f7ff fee3 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <MX_TIM1_Init+0x18c>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 f86f 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b01c      	add	sp, #112	; 0x70
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	200000e8 	.word	0x200000e8
 8000da0:	40012c00 	.word	0x40012c00

08000da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b08f      	sub	sp, #60	; 0x3c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	2410      	movs	r4, #16
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	0018      	movs	r0, r3
 8000db2:	2328      	movs	r3, #40	; 0x28
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f004 fc82 	bl	80056c0 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <HAL_TIM_Base_MspInit+0xbc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d147      	bne.n	8000e56 <HAL_TIM_Base_MspInit+0xb2>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	0392      	lsls	r2, r2, #14
 8000dcc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f002 fa9a 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000de0:	f7ff feb6 	bl	8000b50 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_TIM_Base_MspInit+0xc0>)
 8000de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_TIM_Base_MspInit+0xc0>)
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	0109      	lsls	r1, r1, #4
 8000dee:	430a      	orrs	r2, r1
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_TIM_Base_MspInit+0xc0>)
 8000df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e02:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <HAL_TIM_Base_MspInit+0xc8>)
 8000e04:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e08:	2214      	movs	r2, #20
 8000e0a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e0e:	2210      	movs	r2, #16
 8000e10:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	0052      	lsls	r2, r2, #1
 8000e24:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	00d2      	lsls	r2, r2, #3
 8000e2c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 f983 	bl	8002148 <HAL_DMA_Init>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_TIM_Base_MspInit+0xa6>
    {
      Error_Handler();
 8000e46:	f7ff fe83 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_TIM_Base_MspInit+0xc4>)
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b00f      	add	sp, #60	; 0x3c
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	20000134 	.word	0x20000134
 8000e6c:	4002001c 	.word	0x4002001c

08000e70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	240c      	movs	r4, #12
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	2314      	movs	r3, #20
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f004 fc1c 	bl	80056c0 <memset>
  if(timHandle->Instance==TIM1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <HAL_TIM_MspPostInit+0x74>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d123      	bne.n	8000eda <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_TIM_MspPostInit+0x78>)
 8000e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_TIM_MspPostInit+0x78>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_TIM_MspPostInit+0x78>)
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_PWM_CO_Pin;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0052      	lsls	r2, r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2202      	movs	r2, #2
 8000eca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_CH1_PWM_CO_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	187a      	adds	r2, r7, r1
 8000ece:	23a0      	movs	r3, #160	; 0xa0
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 fb89 	bl	80025ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b009      	add	sp, #36	; 0x24
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	40012c00 	.word	0x40012c00
 8000ee8:	40021000 	.word	0x40021000

08000eec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <MX_USART1_UART_Init+0x9c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000ef8:	22e1      	movs	r2, #225	; 0xe1
 8000efa:	0252      	lsls	r2, r2, #9
 8000efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000f34:	4813      	ldr	r0, [pc, #76]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f36:	2300      	movs	r3, #0
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f004 fa34 	bl	80053a8 <HAL_RS485Ex_Init>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000f44:	f7ff fe04 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f004 fad7 	bl	8005500 <HAL_UARTEx_SetTxFifoThreshold>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f7ff fdfb 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f004 fb0e 	bl	8005580 <HAL_UARTEx_SetRxFifoThreshold>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000f68:	f7ff fdf2 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <MX_USART1_UART_Init+0x98>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f004 fa8c 	bl	800548c <HAL_UARTEx_DisableFifoMode>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000f78:	f7ff fdea 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	20000190 	.word	0x20000190
 8000f88:	40013800 	.word	0x40013800

08000f8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_USART2_UART_Init+0x64>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000f98:	22e1      	movs	r2, #225	; 0xe1
 8000f9a:	0252      	lsls	r2, r2, #9
 8000f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x60>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f003 fb60 	bl	800469c <HAL_UART_Init>
 8000fdc:	1e03      	subs	r3, r0, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fe0:	f7ff fdb6 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	20000224 	.word	0x20000224
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b097      	sub	sp, #92	; 0x5c
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	2344      	movs	r3, #68	; 0x44
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	0018      	movs	r0, r3
 8001002:	2314      	movs	r3, #20
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f004 fb5a 	bl	80056c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	241c      	movs	r4, #28
 800100e:	193b      	adds	r3, r7, r4
 8001010:	0018      	movs	r0, r3
 8001012:	2328      	movs	r3, #40	; 0x28
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f004 fb52 	bl	80056c0 <memset>
  if(uartHandle->Instance==USART1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a3e      	ldr	r2, [pc, #248]	; (800111c <HAL_UART_MspInit+0x128>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d140      	bne.n	80010a8 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001026:	193b      	adds	r3, r7, r4
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800102c:	193b      	adds	r3, r7, r4
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	f002 f96b 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800103e:	f7ff fd87 	bl	8000b50 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_UART_MspInit+0x12c>)
 8001044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <HAL_UART_MspInit+0x12c>)
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	01c9      	lsls	r1, r1, #7
 800104c:	430a      	orrs	r2, r1
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <HAL_UART_MspInit+0x12c>)
 8001052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	01db      	lsls	r3, r3, #7
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_UART_MspInit+0x12c>)
 8001060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_UART_MspInit+0x12c>)
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_UART_MspInit+0x12c>)
 800106c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001076:	2144      	movs	r1, #68	; 0x44
 8001078:	187b      	adds	r3, r7, r1
 800107a:	22b0      	movs	r2, #176	; 0xb0
 800107c:	0152      	lsls	r2, r2, #5
 800107e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2202      	movs	r2, #2
 8001084:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2201      	movs	r2, #1
 8001096:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	187a      	adds	r2, r7, r1
 800109a:	23a0      	movs	r3, #160	; 0xa0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 faa3 	bl	80025ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010a6:	e035      	b.n	8001114 <HAL_UART_MspInit+0x120>
  else if(uartHandle->Instance==USART2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <HAL_UART_MspInit+0x130>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d130      	bne.n	8001114 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_UART_MspInit+0x12c>)
 80010b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_UART_MspInit+0x12c>)
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	0289      	lsls	r1, r1, #10
 80010bc:	430a      	orrs	r2, r1
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_UART_MspInit+0x12c>)
 80010c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	029b      	lsls	r3, r3, #10
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_UART_MspInit+0x12c>)
 80010d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_UART_MspInit+0x12c>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_UART_MspInit+0x12c>)
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	2201      	movs	r2, #1
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80010e6:	2144      	movs	r1, #68	; 0x44
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2202      	movs	r2, #2
 80010f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2201      	movs	r2, #1
 80010f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2201      	movs	r2, #1
 8001104:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	187a      	adds	r2, r7, r1
 8001108:	23a0      	movs	r3, #160	; 0xa0
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	0011      	movs	r1, r2
 800110e:	0018      	movs	r0, r3
 8001110:	f001 fa6c 	bl	80025ec <HAL_GPIO_Init>
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b017      	add	sp, #92	; 0x5c
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	40013800 	.word	0x40013800
 8001120:	40021000 	.word	0x40021000
 8001124:	40004400 	.word	0x40004400

08001128 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800112a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800112c:	f7ff fd6a 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <LoopForever+0x6>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <LoopForever+0xe>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	; (8001174 <LoopForever+0x16>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001156:	f004 fabb 	bl	80056d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800115a:	f7ff fc69 	bl	8000a30 <main>

0800115e <LoopForever>:

LoopForever:
  b LoopForever
 800115e:	e7fe      	b.n	800115e <LoopForever>
  ldr   r0, =_estack
 8001160:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800116c:	0800581c 	.word	0x0800581c
  ldr r2, =_sbss
 8001170:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001174:	200002bc 	.word	0x200002bc

08001178 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC1_IRQHandler>
	...

0800117c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_Init+0x3c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_Init+0x3c>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0049      	lsls	r1, r1, #1
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f810 	bl	80011bc <HAL_InitTick>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d003      	beq.n	80011a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e001      	b.n	80011ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fcd8 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	781b      	ldrb	r3, [r3, #0]
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_InitTick+0x88>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d02b      	beq.n	800122c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_InitTick+0x8c>)
 80011d6:	681c      	ldr	r4, [r3, #0]
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_InitTick+0x88>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	0019      	movs	r1, r3
 80011de:	23fa      	movs	r3, #250	; 0xfa
 80011e0:	0098      	lsls	r0, r3, #2
 80011e2:	f7fe ff8f 	bl	8000104 <__udivsi3>
 80011e6:	0003      	movs	r3, r0
 80011e8:	0019      	movs	r1, r3
 80011ea:	0020      	movs	r0, r4
 80011ec:	f7fe ff8a 	bl	8000104 <__udivsi3>
 80011f0:	0003      	movs	r3, r0
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 ff9b 	bl	800212e <HAL_SYSTICK_Config>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d112      	bne.n	8001222 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d80a      	bhi.n	8001218 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2301      	movs	r3, #1
 8001206:	425b      	negs	r3, r3
 8001208:	2200      	movs	r2, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f000 ff6a 	bl	80020e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_InitTick+0x90>)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e00d      	b.n	8001234 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001218:	230f      	movs	r3, #15
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	e008      	b.n	8001234 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001222:	230f      	movs	r3, #15
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	e003      	b.n	8001234 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122c:	230f      	movs	r3, #15
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001234:	230f      	movs	r3, #15
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	781b      	ldrb	r3, [r3, #0]
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b005      	add	sp, #20
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000008 	.word	0x20000008
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	001a      	movs	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	18d2      	adds	r2, r2, r3
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_IncTick+0x20>)
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000008 	.word	0x20000008
 8001270:	200002b8 	.word	0x200002b8

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	200002b8 	.word	0x200002b8

08001288 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001298:	401a      	ands	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	fe3fffff 	.word	0xfe3fffff

080012b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	23e0      	movs	r3, #224	; 0xe0
 80012be:	045b      	lsls	r3, r3, #17
 80012c0:	4013      	ands	r3, r2
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}

080012ca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	2104      	movs	r1, #4
 80012de:	400a      	ands	r2, r1
 80012e0:	2107      	movs	r1, #7
 80012e2:	4091      	lsls	r1, r2
 80012e4:	000a      	movs	r2, r1
 80012e6:	43d2      	mvns	r2, r2
 80012e8:	401a      	ands	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2104      	movs	r1, #4
 80012ee:	400b      	ands	r3, r1
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4099      	lsls	r1, r3
 80012f4:	000b      	movs	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b004      	add	sp, #16
 8001302:	bd80      	pop	{r7, pc}

08001304 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	2104      	movs	r1, #4
 8001316:	400a      	ands	r2, r1
 8001318:	2107      	movs	r1, #7
 800131a:	4091      	lsls	r1, r2
 800131c:	000a      	movs	r2, r1
 800131e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2104      	movs	r1, #4
 8001324:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001326:	40da      	lsrs	r2, r3
 8001328:	0013      	movs	r3, r2
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}

08001332 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	23c0      	movs	r3, #192	; 0xc0
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4013      	ands	r3, r2
 8001344:	d101      	bne.n	800134a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800134a:	2300      	movs	r3, #0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b002      	add	sp, #8
 8001352:	bd80      	pop	{r7, pc}

08001354 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	211f      	movs	r1, #31
 8001368:	400a      	ands	r2, r1
 800136a:	210f      	movs	r1, #15
 800136c:	4091      	lsls	r1, r2
 800136e:	000a      	movs	r2, r1
 8001370:	43d2      	mvns	r2, r2
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	0e9b      	lsrs	r3, r3, #26
 8001378:	210f      	movs	r1, #15
 800137a:	4019      	ands	r1, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	201f      	movs	r0, #31
 8001380:	4003      	ands	r3, r0
 8001382:	4099      	lsls	r1, r3
 8001384:	000b      	movs	r3, r1
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b004      	add	sp, #16
 8001392:	bd80      	pop	{r7, pc}

08001394 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	035b      	lsls	r3, r3, #13
 80013a6:	0b5b      	lsrs	r3, r3, #13
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	0352      	lsls	r2, r2, #13
 80013c8:	0b52      	lsrs	r2, r2, #13
 80013ca:	43d2      	mvns	r2, r2
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	0212      	lsls	r2, r2, #8
 80013f0:	43d2      	mvns	r2, r2
 80013f2:	401a      	ands	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	400b      	ands	r3, r1
 80013fc:	4904      	ldr	r1, [pc, #16]	; (8001410 <LL_ADC_SetChannelSamplingTime+0x34>)
 80013fe:	400b      	ands	r3, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b004      	add	sp, #16
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	07ffff00 	.word	0x07ffff00

08001414 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <LL_ADC_EnableInternalRegulator+0x24>)
 8001422:	4013      	ands	r3, r2
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	0552      	lsls	r2, r2, #21
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	6fffffe8 	.word	0x6fffffe8

0800143c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	055b      	lsls	r3, r3, #21
 800144c:	401a      	ands	r2, r3
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	055b      	lsls	r3, r3, #21
 8001452:	429a      	cmp	r2, r3
 8001454:	d101      	bne.n	800145a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800145a:	2300      	movs	r3, #0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}

08001464 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <LL_ADC_Enable+0x20>)
 8001472:	4013      	ands	r3, r2
 8001474:	2201      	movs	r2, #1
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}
 8001484:	7fffffe8 	.word	0x7fffffe8

08001488 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <LL_ADC_Disable+0x20>)
 8001496:	4013      	ands	r3, r2
 8001498:	2202      	movs	r2, #2
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	7fffffe8 	.word	0x7fffffe8

080014ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2201      	movs	r2, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <LL_ADC_IsEnabled+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_ADC_IsEnabled+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <LL_ADC_REG_StartConversion+0x20>)
 80014de:	4013      	ands	r3, r2
 80014e0:	2204      	movs	r2, #4
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	7fffffe8 	.word	0x7fffffe8

080014f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2204      	movs	r2, #4
 8001502:	4013      	ands	r3, r2
 8001504:	2b04      	cmp	r3, #4
 8001506:	d101      	bne.n	800150c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001520:	231f      	movs	r3, #31
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e17f      	b.n	800183e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10a      	bne.n	800155c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff f93b 	bl	80007c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2254      	movs	r2, #84	; 0x54
 8001558:	2100      	movs	r1, #0
 800155a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff ff6b 	bl	800143c <LL_ADC_IsInternalRegulatorEnabled>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d115      	bne.n	8001596 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff ff50 	bl	8001414 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001574:	4bb4      	ldr	r3, [pc, #720]	; (8001848 <HAL_ADC_Init+0x330>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	49b4      	ldr	r1, [pc, #720]	; (800184c <HAL_ADC_Init+0x334>)
 800157a:	0018      	movs	r0, r3
 800157c:	f7fe fdc2 	bl	8000104 <__udivsi3>
 8001580:	0003      	movs	r3, r0
 8001582:	3301      	adds	r3, #1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001588:	e002      	b.n	8001590 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3b01      	subs	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f9      	bne.n	800158a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff ff4e 	bl	800143c <LL_ADC_IsInternalRegulatorEnabled>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d10f      	bne.n	80015c4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	2210      	movs	r2, #16
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2201      	movs	r2, #1
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015bc:	231f      	movs	r3, #31
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff ff93 	bl	80014f4 <LL_ADC_REG_IsConversionOngoing>
 80015ce:	0003      	movs	r3, r0
 80015d0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	2210      	movs	r2, #16
 80015d8:	4013      	ands	r3, r2
 80015da:	d000      	beq.n	80015de <HAL_ADC_Init+0xc6>
 80015dc:	e122      	b.n	8001824 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d000      	beq.n	80015e6 <HAL_ADC_Init+0xce>
 80015e4:	e11e      	b.n	8001824 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	4a99      	ldr	r2, [pc, #612]	; (8001850 <HAL_ADC_Init+0x338>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	2202      	movs	r2, #2
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7ff ff56 	bl	80014ac <LL_ADC_IsEnabled>
 8001600:	1e03      	subs	r3, r0, #0
 8001602:	d000      	beq.n	8001606 <HAL_ADC_Init+0xee>
 8001604:	e0ad      	b.n	8001762 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7e1b      	ldrb	r3, [r3, #24]
 800160e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001610:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7e5b      	ldrb	r3, [r3, #25]
 8001616:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001618:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7e9b      	ldrb	r3, [r3, #26]
 800161e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001620:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <HAL_ADC_Init+0x118>
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	015b      	lsls	r3, r3, #5
 800162e:	e000      	b.n	8001632 <HAL_ADC_Init+0x11a>
 8001630:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001632:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001638:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	da04      	bge.n	800164c <HAL_ADC_Init+0x134>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	e001      	b.n	8001650 <HAL_ADC_Init+0x138>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001650:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	212c      	movs	r1, #44	; 0x2c
 8001656:	5c5b      	ldrb	r3, [r3, r1]
 8001658:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800165a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d115      	bne.n	8001698 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7e9b      	ldrb	r3, [r3, #26]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	0252      	lsls	r2, r2, #9
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	e00b      	b.n	8001698 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	2220      	movs	r2, #32
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001690:	2201      	movs	r2, #1
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00a      	beq.n	80016b6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a4:	23e0      	movs	r3, #224	; 0xe0
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016ae:	4313      	orrs	r3, r2
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4a65      	ldr	r2, [pc, #404]	; (8001854 <HAL_ADC_Init+0x33c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	0f9b      	lsrs	r3, r3, #30
 80016d2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016d8:	4313      	orrs	r3, r2
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4313      	orrs	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	223c      	movs	r2, #60	; 0x3c
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d111      	bne.n	800170e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	0f9b      	lsrs	r3, r3, #30
 80016f0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016f6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80016fc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001702:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4313      	orrs	r3, r2
 8001708:	2201      	movs	r2, #1
 800170a:	4313      	orrs	r3, r2
 800170c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4a50      	ldr	r2, [pc, #320]	; (8001858 <HAL_ADC_Init+0x340>)
 8001716:	4013      	ands	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	430a      	orrs	r2, r1
 8001722:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	23c0      	movs	r3, #192	; 0xc0
 800172a:	061b      	lsls	r3, r3, #24
 800172c:	429a      	cmp	r2, r3
 800172e:	d018      	beq.n	8001762 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	05db      	lsls	r3, r3, #23
 8001738:	429a      	cmp	r2, r3
 800173a:	d012      	beq.n	8001762 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	429a      	cmp	r2, r3
 8001746:	d00c      	beq.n	8001762 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001748:	4b44      	ldr	r3, [pc, #272]	; (800185c <HAL_ADC_Init+0x344>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a44      	ldr	r2, [pc, #272]	; (8001860 <HAL_ADC_Init+0x348>)
 800174e:	4013      	ands	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	23f0      	movs	r3, #240	; 0xf0
 8001758:	039b      	lsls	r3, r3, #14
 800175a:	401a      	ands	r2, r3
 800175c:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_ADC_Init+0x344>)
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	001a      	movs	r2, r3
 800176c:	2100      	movs	r1, #0
 800176e:	f7ff fdac 	bl	80012ca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177a:	493a      	ldr	r1, [pc, #232]	; (8001864 <HAL_ADC_Init+0x34c>)
 800177c:	001a      	movs	r2, r3
 800177e:	f7ff fda4 	bl	80012ca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2110      	movs	r1, #16
 8001796:	4249      	negs	r1, r1
 8001798:	430a      	orrs	r2, r1
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
 800179c:	e018      	b.n	80017d0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	039b      	lsls	r3, r3, #14
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d112      	bne.n	80017d0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	221c      	movs	r2, #28
 80017ba:	4013      	ands	r3, r2
 80017bc:	2210      	movs	r2, #16
 80017be:	4252      	negs	r2, r2
 80017c0:	409a      	lsls	r2, r3
 80017c2:	0011      	movs	r1, r2
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2100      	movs	r1, #0
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7ff fd94 	bl	8001304 <LL_ADC_GetSamplingTimeCommonChannels>
 80017dc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d10b      	bne.n	80017fe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	2203      	movs	r2, #3
 80017f2:	4393      	bics	r3, r2
 80017f4:	2201      	movs	r2, #1
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017fc:	e01c      	b.n	8001838 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	2212      	movs	r2, #18
 8001804:	4393      	bics	r3, r2
 8001806:	2210      	movs	r2, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	2201      	movs	r2, #1
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800181a:	231f      	movs	r3, #31
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001822:	e009      	b.n	8001838 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	2210      	movs	r2, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001830:	231f      	movs	r3, #31
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001838:	231f      	movs	r3, #31
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	781b      	ldrb	r3, [r3, #0]
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b008      	add	sp, #32
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	20000000 	.word	0x20000000
 800184c:	00030d40 	.word	0x00030d40
 8001850:	fffffefd 	.word	0xfffffefd
 8001854:	fffe0201 	.word	0xfffe0201
 8001858:	1ffffc02 	.word	0x1ffffc02
 800185c:	40012708 	.word	0x40012708
 8001860:	ffc3ffff 	.word	0xffc3ffff
 8001864:	07ffff04 	.word	0x07ffff04

08001868 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff fe3b 	bl	80014f4 <LL_ADC_REG_IsConversionOngoing>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d16c      	bne.n	800195c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2254      	movs	r2, #84	; 0x54
 8001886:	5c9b      	ldrb	r3, [r3, r2]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_Start_DMA+0x28>
 800188c:	2302      	movs	r3, #2
 800188e:	e06c      	b.n	800196a <HAL_ADC_Start_DMA+0x102>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2254      	movs	r2, #84	; 0x54
 8001894:	2101      	movs	r1, #1
 8001896:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	d113      	bne.n	80018cc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff fdff 	bl	80014ac <LL_ADC_IsEnabled>
 80018ae:	1e03      	subs	r3, r0, #0
 80018b0:	d004      	beq.n	80018bc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff fde6 	bl	8001488 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018cc:	2517      	movs	r5, #23
 80018ce:	197c      	adds	r4, r7, r5
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fa46 	bl	8001d64 <ADC_Enable>
 80018d8:	0003      	movs	r3, r0
 80018da:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018dc:	002c      	movs	r4, r5
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d13e      	bne.n	8001964 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4a22      	ldr	r2, [pc, #136]	; (8001974 <HAL_ADC_Start_DMA+0x10c>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	0052      	lsls	r2, r2, #1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_ADC_Start_DMA+0x110>)
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190a:	4a1c      	ldr	r2, [pc, #112]	; (800197c <HAL_ADC_Start_DMA+0x114>)
 800190c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_ADC_Start_DMA+0x118>)
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	221c      	movs	r2, #28
 800191c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2254      	movs	r2, #84	; 0x54
 8001922:	2100      	movs	r1, #0
 8001924:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2110      	movs	r1, #16
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3340      	adds	r3, #64	; 0x40
 8001940:	0019      	movs	r1, r3
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	193c      	adds	r4, r7, r4
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f000 fc88 	bl	800225c <HAL_DMA_Start_IT>
 800194c:	0003      	movs	r3, r0
 800194e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff fdbb 	bl	80014d0 <LL_ADC_REG_StartConversion>
 800195a:	e003      	b.n	8001964 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800195c:	2317      	movs	r3, #23
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2202      	movs	r2, #2
 8001962:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001964:	2317      	movs	r3, #23
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b006      	add	sp, #24
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	fffff0fe 	.word	0xfffff0fe
 8001978:	08001e71 	.word	0x08001e71
 800197c:	08001f39 	.word	0x08001f39
 8001980:	08001f57 	.word	0x08001f57

08001984 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b002      	add	sp, #8
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019be:	2317      	movs	r3, #23
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2254      	movs	r2, #84	; 0x54
 80019ce:	5c9b      	ldrb	r3, [r3, r2]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x24>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e1c0      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x3a6>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2254      	movs	r2, #84	; 0x54
 80019dc:	2101      	movs	r1, #1
 80019de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff fd85 	bl	80014f4 <LL_ADC_REG_IsConversionOngoing>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d000      	beq.n	80019f0 <HAL_ADC_ConfigChannel+0x3c>
 80019ee:	e1a3      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d100      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x46>
 80019f8:	e143      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d004      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a0a:	4ac1      	ldr	r2, [pc, #772]	; (8001d10 <HAL_ADC_ConfigChannel+0x35c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d108      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0019      	movs	r1, r3
 8001a1a:	0010      	movs	r0, r2
 8001a1c:	f7ff fcba 	bl	8001394 <LL_ADC_REG_SetSequencerChAdd>
 8001a20:	e0c9      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	211f      	movs	r1, #31
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	210f      	movs	r1, #15
 8001a30:	4099      	lsls	r1, r3
 8001a32:	000b      	movs	r3, r1
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4013      	ands	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	035b      	lsls	r3, r3, #13
 8001a40:	0b5b      	lsrs	r3, r3, #13
 8001a42:	d105      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x9c>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0e9b      	lsrs	r3, r3, #26
 8001a4a:	221f      	movs	r2, #31
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	e098      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	d000      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0xa8>
 8001a5a:	e091      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x1cc>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d000      	beq.n	8001a68 <HAL_ADC_ConfigChannel+0xb4>
 8001a66:	e089      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x1c8>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d000      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0xc0>
 8001a72:	e081      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x1c4>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2208      	movs	r2, #8
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d000      	beq.n	8001a80 <HAL_ADC_ConfigChannel+0xcc>
 8001a7e:	e079      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x1c0>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2210      	movs	r2, #16
 8001a86:	4013      	ands	r3, r2
 8001a88:	d000      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0xd8>
 8001a8a:	e071      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x1bc>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2220      	movs	r2, #32
 8001a92:	4013      	ands	r3, r2
 8001a94:	d000      	beq.n	8001a98 <HAL_ADC_ConfigChannel+0xe4>
 8001a96:	e069      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x1b8>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d000      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0xf0>
 8001aa2:	e061      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x1b4>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d000      	beq.n	8001ab0 <HAL_ADC_ConfigChannel+0xfc>
 8001aae:	e059      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x1b0>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d151      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x1ac>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d149      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1a8>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d141      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1a4>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	d139      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x1a0>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	015b      	lsls	r3, r3, #5
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d131      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x19c>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	019b      	lsls	r3, r3, #6
 8001af4:	4013      	ands	r3, r2
 8001af6:	d129      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x198>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	01db      	lsls	r3, r3, #7
 8001b00:	4013      	ands	r3, r2
 8001b02:	d121      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x194>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d119      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x190>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	025b      	lsls	r3, r3, #9
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x18c>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	4013      	ands	r3, r2
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x188>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	02db      	lsls	r3, r3, #11
 8001b30:	4013      	ands	r3, r2
 8001b32:	d001      	beq.n	8001b38 <HAL_ADC_ConfigChannel+0x184>
 8001b34:	2312      	movs	r3, #18
 8001b36:	e024      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e022      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b3c:	2311      	movs	r3, #17
 8001b3e:	e020      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b40:	2310      	movs	r3, #16
 8001b42:	e01e      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b44:	230f      	movs	r3, #15
 8001b46:	e01c      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b48:	230e      	movs	r3, #14
 8001b4a:	e01a      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b4c:	230d      	movs	r3, #13
 8001b4e:	e018      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b50:	230c      	movs	r3, #12
 8001b52:	e016      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b54:	230b      	movs	r3, #11
 8001b56:	e014      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b58:	230a      	movs	r3, #10
 8001b5a:	e012      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b5c:	2309      	movs	r3, #9
 8001b5e:	e010      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b60:	2308      	movs	r3, #8
 8001b62:	e00e      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b64:	2307      	movs	r3, #7
 8001b66:	e00c      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b68:	2306      	movs	r3, #6
 8001b6a:	e00a      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	e008      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b70:	2304      	movs	r3, #4
 8001b72:	e006      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b74:	2303      	movs	r3, #3
 8001b76:	e004      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1ce>
 8001b80:	2300      	movs	r3, #0
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	6852      	ldr	r2, [r2, #4]
 8001b86:	201f      	movs	r0, #31
 8001b88:	4002      	ands	r2, r0
 8001b8a:	4093      	lsls	r3, r2
 8001b8c:	000a      	movs	r2, r1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d808      	bhi.n	8001bb6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	f7ff fbcf 	bl	8001354 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	f7ff fc0a 	bl	80013dc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db00      	blt.n	8001bd2 <HAL_ADC_ConfigChannel+0x21e>
 8001bd0:	e0bc      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd2:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_ADC_ConfigChannel+0x360>)
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff fb6b 	bl	80012b0 <LL_ADC_GetCommonPathInternalCh>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a4d      	ldr	r2, [pc, #308]	; (8001d18 <HAL_ADC_ConfigChannel+0x364>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d122      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bf0:	d11d      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	0412      	lsls	r2, r2, #16
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_ADC_ConfigChannel+0x360>)
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	0010      	movs	r0, r2
 8001c00:	f7ff fb42 	bl	8001288 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c04:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <HAL_ADC_ConfigChannel+0x368>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4945      	ldr	r1, [pc, #276]	; (8001d20 <HAL_ADC_ConfigChannel+0x36c>)
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7fe fa7a 	bl	8000104 <__udivsi3>
 8001c10:	0003      	movs	r3, r0
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	0013      	movs	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	189b      	adds	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c1e:	e002      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f9      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c2c:	e08e      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_ADC_ConfigChannel+0x370>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d10e      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	045b      	lsls	r3, r3, #17
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d109      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	0452      	lsls	r2, r2, #17
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_ADC_ConfigChannel+0x360>)
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f7ff fb1a 	bl	8001288 <LL_ADC_SetCommonPathInternalCh>
 8001c54:	e07a      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a33      	ldr	r2, [pc, #204]	; (8001d28 <HAL_ADC_ConfigChannel+0x374>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d000      	beq.n	8001c62 <HAL_ADC_ConfigChannel+0x2ae>
 8001c60:	e074      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	03db      	lsls	r3, r3, #15
 8001c68:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c6a:	d000      	beq.n	8001c6e <HAL_ADC_ConfigChannel+0x2ba>
 8001c6c:	e06e      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	03d2      	lsls	r2, r2, #15
 8001c74:	4313      	orrs	r3, r2
 8001c76:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <HAL_ADC_ConfigChannel+0x360>)
 8001c78:	0019      	movs	r1, r3
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	f7ff fb04 	bl	8001288 <LL_ADC_SetCommonPathInternalCh>
 8001c80:	e064      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d004      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_ADC_ConfigChannel+0x35c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d107      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	0010      	movs	r0, r2
 8001ca4:	f7ff fb87 	bl	80013b6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	da4d      	bge.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_ADC_ConfigChannel+0x360>)
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7ff fafc 	bl	80012b0 <LL_ADC_GetCommonPathInternalCh>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <HAL_ADC_ConfigChannel+0x364>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_ADC_ConfigChannel+0x378>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_ADC_ConfigChannel+0x360>)
 8001cce:	0019      	movs	r1, r3
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	f7ff fad9 	bl	8001288 <LL_ADC_SetCommonPathInternalCh>
 8001cd6:	e039      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_ADC_ConfigChannel+0x370>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d108      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <HAL_ADC_ConfigChannel+0x37c>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_ADC_ConfigChannel+0x360>)
 8001cea:	0019      	movs	r1, r3
 8001cec:	0010      	movs	r0, r2
 8001cee:	f7ff facb 	bl	8001288 <LL_ADC_SetCommonPathInternalCh>
 8001cf2:	e02b      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_ADC_ConfigChannel+0x374>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d126      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_ADC_ConfigChannel+0x380>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <HAL_ADC_ConfigChannel+0x360>)
 8001d06:	0019      	movs	r1, r3
 8001d08:	0010      	movs	r0, r2
 8001d0a:	f7ff fabd 	bl	8001288 <LL_ADC_SetCommonPathInternalCh>
 8001d0e:	e01d      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x398>
 8001d10:	80000004 	.word	0x80000004
 8001d14:	40012708 	.word	0x40012708
 8001d18:	b0001000 	.word	0xb0001000
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	00030d40 	.word	0x00030d40
 8001d24:	b8004000 	.word	0xb8004000
 8001d28:	b4002000 	.word	0xb4002000
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	feffffff 	.word	0xfeffffff
 8001d34:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d44:	2317      	movs	r3, #23
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2254      	movs	r2, #84	; 0x54
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d54:	2317      	movs	r3, #23
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b006      	add	sp, #24
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)

08001d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff fb99 	bl	80014ac <LL_ADC_IsEnabled>
 8001d7a:	1e03      	subs	r3, r0, #0
 8001d7c:	d000      	beq.n	8001d80 <ADC_Enable+0x1c>
 8001d7e:	e069      	b.n	8001e54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <ADC_Enable+0xfc>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	2210      	movs	r2, #16
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e056      	b.n	8001e56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff fb59 	bl	8001464 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001db2:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <ADC_Enable+0x100>)
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fa7b 	bl	80012b0 <LL_ADC_GetCommonPathInternalCh>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d00f      	beq.n	8001de4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <ADC_Enable+0x104>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4928      	ldr	r1, [pc, #160]	; (8001e6c <ADC_Enable+0x108>)
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7fe f99a 	bl	8000104 <__udivsi3>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001dd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dd6:	e002      	b.n	8001dde <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7e5b      	ldrb	r3, [r3, #25]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d033      	beq.n	8001e54 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fa42 	bl	8001274 <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001df4:	e027      	b.n	8001e46 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f7ff fb56 	bl	80014ac <LL_ADC_IsEnabled>
 8001e00:	1e03      	subs	r3, r0, #0
 8001e02:	d104      	bne.n	8001e0e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7ff fb2b 	bl	8001464 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e0e:	f7ff fa31 	bl	8001274 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d914      	bls.n	8001e46 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d00d      	beq.n	8001e46 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	2210      	movs	r2, #16
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d1d0      	bne.n	8001df6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	80000017 	.word	0x80000017
 8001e64:	40012708 	.word	0x40012708
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	00030d40 	.word	0x00030d40

08001e70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	2250      	movs	r2, #80	; 0x50
 8001e84:	4013      	ands	r3, r2
 8001e86:	d141      	bne.n	8001f0c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff fa49 	bl	8001332 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d02e      	beq.n	8001f02 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	7e9b      	ldrb	r3, [r3, #26]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d12a      	bne.n	8001f02 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d123      	bne.n	8001f02 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff fb18 	bl	80014f4 <LL_ADC_REG_IsConversionOngoing>
 8001ec4:	1e03      	subs	r3, r0, #0
 8001ec6:	d110      	bne.n	8001eea <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	210c      	movs	r1, #12
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <ADC_DMAConvCplt+0xc4>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ee8:	e00b      	b.n	8001f02 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	2220      	movs	r2, #32
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2201      	movs	r2, #1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7ff fd3d 	bl	8001984 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f0a:	e00f      	b.n	8001f2c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d004      	beq.n	8001f20 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff fd43 	bl	80019a4 <HAL_ADC_ErrorCallback>
}
 8001f1e:	e005      	b.n	8001f2c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	0010      	movs	r0, r2
 8001f2a:	4798      	blx	r3
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b004      	add	sp, #16
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	fffffefe 	.word	0xfffffefe

08001f38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff fd23 	bl	8001994 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	2204      	movs	r2, #4
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff fd10 	bl	80019a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	0002      	movs	r2, r0
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f9e:	d809      	bhi.n	8001fb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	231f      	movs	r3, #31
 8001fa8:	401a      	ands	r2, r3
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_EnableIRQ+0x30>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8001fd4:	d828      	bhi.n	8002028 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <__NVIC_SetPriority+0xd4>)
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	33c0      	adds	r3, #192	; 0xc0
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	589b      	ldr	r3, [r3, r2]
 8001fe6:	1dfa      	adds	r2, r7, #7
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	0011      	movs	r1, r2
 8001fec:	2203      	movs	r2, #3
 8001fee:	400a      	ands	r2, r1
 8001ff0:	00d2      	lsls	r2, r2, #3
 8001ff2:	21ff      	movs	r1, #255	; 0xff
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	43d2      	mvns	r2, r2
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	401a      	ands	r2, r3
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	0018      	movs	r0, r3
 800200c:	2303      	movs	r3, #3
 800200e:	4003      	ands	r3, r0
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002014:	481f      	ldr	r0, [pc, #124]	; (8002094 <__NVIC_SetPriority+0xd4>)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b25b      	sxtb	r3, r3
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	430a      	orrs	r2, r1
 8002020:	33c0      	adds	r3, #192	; 0xc0
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002026:	e031      	b.n	800208c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <__NVIC_SetPriority+0xd8>)
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	0019      	movs	r1, r3
 8002030:	230f      	movs	r3, #15
 8002032:	400b      	ands	r3, r1
 8002034:	3b08      	subs	r3, #8
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3306      	adds	r3, #6
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	3304      	adds	r3, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1dfa      	adds	r2, r7, #7
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	0011      	movs	r1, r2
 8002048:	2203      	movs	r2, #3
 800204a:	400a      	ands	r2, r1
 800204c:	00d2      	lsls	r2, r2, #3
 800204e:	21ff      	movs	r1, #255	; 0xff
 8002050:	4091      	lsls	r1, r2
 8002052:	000a      	movs	r2, r1
 8002054:	43d2      	mvns	r2, r2
 8002056:	401a      	ands	r2, r3
 8002058:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	22ff      	movs	r2, #255	; 0xff
 8002060:	401a      	ands	r2, r3
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	0018      	movs	r0, r3
 8002068:	2303      	movs	r3, #3
 800206a:	4003      	ands	r3, r0
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <__NVIC_SetPriority+0xd8>)
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	001c      	movs	r4, r3
 8002078:	230f      	movs	r3, #15
 800207a:	4023      	ands	r3, r4
 800207c:	3b08      	subs	r3, #8
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	430a      	orrs	r2, r1
 8002082:	3306      	adds	r3, #6
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	18c3      	adds	r3, r0, r3
 8002088:	3304      	adds	r3, #4
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b003      	add	sp, #12
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	045b      	lsls	r3, r3, #17
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d301      	bcc.n	80020b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b0:	2301      	movs	r3, #1
 80020b2:	e010      	b.n	80020d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <SysTick_Config+0x44>)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	3a01      	subs	r2, #1
 80020ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020bc:	2301      	movs	r3, #1
 80020be:	425b      	negs	r3, r3
 80020c0:	2103      	movs	r1, #3
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff ff7c 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x44>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x44>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	210f      	movs	r1, #15
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	1c02      	adds	r2, r0, #0
 80020f4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	0011      	movs	r1, r2
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	0002      	movs	r2, r0
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b25b      	sxtb	r3, r3
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ff33 	bl	8001f8c <__NVIC_EnableIRQ>
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff ffaf 	bl	800209c <SysTick_Config>
 800213e:	0003      	movs	r3, r0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e077      	b.n	800224a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a3d      	ldr	r2, [pc, #244]	; (8002254 <HAL_DMA_Init+0x10c>)
 8002160:	4694      	mov	ip, r2
 8002162:	4463      	add	r3, ip
 8002164:	2114      	movs	r1, #20
 8002166:	0018      	movs	r0, r3
 8002168:	f7fd ffcc 	bl	8000104 <__udivsi3>
 800216c:	0003      	movs	r3, r0
 800216e:	009a      	lsls	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2225      	movs	r2, #37	; 0x25
 8002178:	2102      	movs	r1, #2
 800217a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4934      	ldr	r1, [pc, #208]	; (8002258 <HAL_DMA_Init+0x110>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 f9c1 	bl	800254c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	01db      	lsls	r3, r3, #7
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d102      	bne.n	80021dc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	213f      	movs	r1, #63	; 0x3f
 80021e6:	400a      	ands	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d011      	beq.n	8002220 <HAL_DMA_Init+0xd8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d80d      	bhi.n	8002220 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f9cc 	bl	80025a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	e008      	b.n	8002232 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2225      	movs	r2, #37	; 0x25
 800223c:	2101      	movs	r1, #1
 800223e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	bffdfff8 	.word	0xbffdfff8
 8002258:	ffff800f 	.word	0xffff800f

0800225c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2317      	movs	r3, #23
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2224      	movs	r2, #36	; 0x24
 8002276:	5c9b      	ldrb	r3, [r3, r2]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_DMA_Start_IT+0x24>
 800227c:	2302      	movs	r3, #2
 800227e:	e06f      	b.n	8002360 <HAL_DMA_Start_IT+0x104>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2224      	movs	r2, #36	; 0x24
 8002284:	2101      	movs	r1, #1
 8002286:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2225      	movs	r2, #37	; 0x25
 800228c:	5c9b      	ldrb	r3, [r3, r2]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d157      	bne.n	8002344 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2225      	movs	r2, #37	; 0x25
 8002298:	2102      	movs	r1, #2
 800229a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	438a      	bics	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f907 	bl	80024cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	210e      	movs	r1, #14
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e00f      	b.n	80022f8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2104      	movs	r1, #4
 80022e4:	438a      	bics	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	210a      	movs	r1, #10
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	025b      	lsls	r3, r3, #9
 8002302:	4013      	ands	r3, r2
 8002304:	d008      	beq.n	8002318 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	0049      	lsls	r1, r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	0049      	lsls	r1, r1, #1
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e00a      	b.n	800235a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2224      	movs	r2, #36	; 0x24
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002352:	2317      	movs	r3, #23
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800235a:	2317      	movs	r3, #23
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b006      	add	sp, #24
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002370:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	221c      	movs	r2, #28
 8002384:	4013      	ands	r3, r2
 8002386:	2204      	movs	r2, #4
 8002388:	409a      	lsls	r2, r3
 800238a:	0013      	movs	r3, r2
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	d027      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x7a>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2204      	movs	r2, #4
 8002396:	4013      	ands	r3, r2
 8002398:	d023      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2220      	movs	r2, #32
 80023a2:	4013      	ands	r3, r2
 80023a4:	d107      	bne.n	80023b6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2104      	movs	r1, #4
 80023b2:	438a      	bics	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <HAL_DMA_IRQHandler+0x160>)
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	221c      	movs	r2, #28
 80023c0:	4013      	ands	r3, r2
 80023c2:	2204      	movs	r2, #4
 80023c4:	409a      	lsls	r2, r3
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <HAL_DMA_IRQHandler+0x160>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d100      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x6e>
 80023d4:	e073      	b.n	80024be <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	0010      	movs	r0, r2
 80023de:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80023e0:	e06d      	b.n	80024be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	221c      	movs	r2, #28
 80023e8:	4013      	ands	r3, r2
 80023ea:	2202      	movs	r2, #2
 80023ec:	409a      	lsls	r2, r3
 80023ee:	0013      	movs	r3, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4013      	ands	r3, r2
 80023f4:	d02e      	beq.n	8002454 <HAL_DMA_IRQHandler+0xec>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d02a      	beq.n	8002454 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2220      	movs	r2, #32
 8002406:	4013      	ands	r3, r2
 8002408:	d10b      	bne.n	8002422 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	210a      	movs	r1, #10
 8002416:	438a      	bics	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2225      	movs	r2, #37	; 0x25
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	221c      	movs	r2, #28
 800242c:	4013      	ands	r3, r2
 800242e:	2202      	movs	r2, #2
 8002430:	409a      	lsls	r2, r3
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d03a      	beq.n	80024be <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	0010      	movs	r0, r2
 8002450:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002452:	e034      	b.n	80024be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	221c      	movs	r2, #28
 800245a:	4013      	ands	r3, r2
 800245c:	2208      	movs	r2, #8
 800245e:	409a      	lsls	r2, r3
 8002460:	0013      	movs	r3, r2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	d02b      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x158>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2208      	movs	r2, #8
 800246c:	4013      	ands	r3, r2
 800246e:	d027      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	210e      	movs	r1, #14
 800247c:	438a      	bics	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	221c      	movs	r2, #28
 800248a:	4013      	ands	r3, r2
 800248c:	2201      	movs	r2, #1
 800248e:	409a      	lsls	r2, r3
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2225      	movs	r2, #37	; 0x25
 80024a0:	2101      	movs	r1, #1
 80024a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	0010      	movs	r0, r2
 80024bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46c0      	nop			; (mov r8, r8)
}
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020000 	.word	0x40020000

080024cc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80024f4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <DMA_SetConfig+0x7c>)
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	221c      	movs	r2, #28
 8002500:	4013      	ands	r3, r2
 8002502:	2201      	movs	r2, #1
 8002504:	409a      	lsls	r2, r3
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <DMA_SetConfig+0x7c>)
 8002508:	430a      	orrs	r2, r1
 800250a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b10      	cmp	r3, #16
 800251a:	d108      	bne.n	800252e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800252c:	e007      	b.n	800253e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	60da      	str	r2, [r3, #12]
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	40020000 	.word	0x40020000

0800254c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800255c:	4694      	mov	ip, r2
 800255e:	4463      	add	r3, ip
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	001a      	movs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	001a      	movs	r2, r3
 800256e:	23ff      	movs	r3, #255	; 0xff
 8002570:	4013      	ands	r3, r2
 8002572:	3b08      	subs	r3, #8
 8002574:	2114      	movs	r1, #20
 8002576:	0018      	movs	r0, r3
 8002578:	f7fd fdc4 	bl	8000104 <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002584:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	221f      	movs	r2, #31
 800258a:	4013      	ands	r3, r2
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	10008200 	.word	0x10008200
 80025a0:	40020880 	.word	0x40020880

080025a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	223f      	movs	r2, #63	; 0x3f
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80025ba:	4694      	mov	ip, r2
 80025bc:	4463      	add	r3, ip
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	001a      	movs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	4013      	ands	r3, r2
 80025d4:	2201      	movs	r2, #1
 80025d6:	409a      	lsls	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	; 0x58
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	1000823f 	.word	0x1000823f
 80025e8:	40020940 	.word	0x40020940

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fa:	e147      	b.n	800288c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4091      	lsls	r1, r2
 8002606:	000a      	movs	r2, r1
 8002608:	4013      	ands	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d100      	bne.n	8002614 <HAL_GPIO_Init+0x28>
 8002612:	e138      	b.n	8002886 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	4013      	ands	r3, r2
 800261c:	2b01      	cmp	r3, #1
 800261e:	d005      	beq.n	800262c <HAL_GPIO_Init+0x40>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2203      	movs	r2, #3
 8002626:	4013      	ands	r3, r2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d130      	bne.n	800268e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	409a      	lsls	r2, r3
 800263a:	0013      	movs	r3, r2
 800263c:	43da      	mvns	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	409a      	lsls	r2, r3
 800264e:	0013      	movs	r3, r2
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002662:	2201      	movs	r2, #1
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
 8002668:	0013      	movs	r3, r2
 800266a:	43da      	mvns	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	2201      	movs	r2, #1
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	2b03      	cmp	r3, #3
 8002698:	d017      	beq.n	80026ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	0013      	movs	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2203      	movs	r2, #3
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d123      	bne.n	800271e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3208      	adds	r2, #8
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	58d3      	ldr	r3, [r2, r3]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2207      	movs	r2, #7
 80026e8:	4013      	ands	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	409a      	lsls	r2, r3
 80026f0:	0013      	movs	r3, r2
 80026f2:	43da      	mvns	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2107      	movs	r1, #7
 8002702:	400b      	ands	r3, r1
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	0092      	lsls	r2, r2, #2
 800271a:	6939      	ldr	r1, [r7, #16]
 800271c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	409a      	lsls	r2, r3
 800272c:	0013      	movs	r3, r2
 800272e:	43da      	mvns	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2203      	movs	r2, #3
 800273c:	401a      	ands	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	23c0      	movs	r3, #192	; 0xc0
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	4013      	ands	r3, r2
 800275c:	d100      	bne.n	8002760 <HAL_GPIO_Init+0x174>
 800275e:	e092      	b.n	8002886 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002760:	4a50      	ldr	r2, [pc, #320]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3318      	adds	r3, #24
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	589b      	ldr	r3, [r3, r2]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2203      	movs	r2, #3
 8002772:	4013      	ands	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	220f      	movs	r2, #15
 8002778:	409a      	lsls	r2, r3
 800277a:	0013      	movs	r3, r2
 800277c:	43da      	mvns	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	23a0      	movs	r3, #160	; 0xa0
 8002788:	05db      	lsls	r3, r3, #23
 800278a:	429a      	cmp	r2, r3
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x1ca>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_GPIO_Init+0x2bc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x1c6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a44      	ldr	r2, [pc, #272]	; (80028ac <HAL_GPIO_Init+0x2c0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x1c2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <HAL_GPIO_Init+0x2c4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x1be>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x1cc>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e004      	b.n	80027b8 <HAL_GPIO_Init+0x1cc>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e002      	b.n	80027b8 <HAL_GPIO_Init+0x1cc>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x1cc>
 80027b6:	2300      	movs	r3, #0
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	2103      	movs	r1, #3
 80027bc:	400a      	ands	r2, r1
 80027be:	00d2      	lsls	r2, r2, #3
 80027c0:	4093      	lsls	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027c8:	4936      	ldr	r1, [pc, #216]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3318      	adds	r3, #24
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	035b      	lsls	r3, r3, #13
 80027ee:	4013      	ands	r3, r2
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43da      	mvns	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	039b      	lsls	r3, r3, #14
 8002818:	4013      	ands	r3, r2
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 800282c:	2384      	movs	r3, #132	; 0x84
 800282e:	58d3      	ldr	r3, [r2, r3]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43da      	mvns	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	4013      	ands	r3, r2
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002850:	4914      	ldr	r1, [pc, #80]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002852:	2284      	movs	r2, #132	; 0x84
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002858:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	58d3      	ldr	r3, [r2, r3]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43da      	mvns	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	4013      	ands	r3, r2
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800287e:	4909      	ldr	r1, [pc, #36]	; (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	40da      	lsrs	r2, r3
 8002894:	1e13      	subs	r3, r2, #0
 8002896:	d000      	beq.n	800289a <HAL_GPIO_Init+0x2ae>
 8002898:	e6b0      	b.n	80025fc <HAL_GPIO_Init+0x10>
  }
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	b006      	add	sp, #24
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021800 	.word	0x40021800
 80028a8:	50000400 	.word	0x50000400
 80028ac:	50000800 	.word	0x50000800
 80028b0:	50000c00 	.word	0x50000c00

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	0008      	movs	r0, r1
 80028be:	0011      	movs	r1, r2
 80028c0:	1cbb      	adds	r3, r7, #2
 80028c2:	1c02      	adds	r2, r0, #0
 80028c4:	801a      	strh	r2, [r3, #0]
 80028c6:	1c7b      	adds	r3, r7, #1
 80028c8:	1c0a      	adds	r2, r1, #0
 80028ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028cc:	1c7b      	adds	r3, r7, #1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d4:	1cbb      	adds	r3, r7, #2
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028de:	1cbb      	adds	r3, r7, #2
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b002      	add	sp, #8
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d11f      	bne.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	0013      	movs	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	189b      	adds	r3, r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4912      	ldr	r1, [pc, #72]	; (800296c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002922:	0018      	movs	r0, r3
 8002924:	f7fd fbee 	bl	8000104 <__udivsi3>
 8002928:	0003      	movs	r3, r0
 800292a:	3301      	adds	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800292e:	e008      	b.n	8002942 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3b01      	subs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e001      	b.n	8002942 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e009      	b.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	401a      	ands	r2, r3
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	429a      	cmp	r2, r3
 8002952:	d0ed      	beq.n	8002930 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40007000 	.word	0x40007000
 8002964:	fffff9ff 	.word	0xfffff9ff
 8002968:	20000000 	.word	0x20000000
 800296c:	000f4240 	.word	0x000f4240

08002970 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	23e0      	movs	r3, #224	; 0xe0
 800297a:	01db      	lsls	r3, r3, #7
 800297c:	4013      	ands	r3, r2
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e2fe      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2201      	movs	r2, #1
 80029a0:	4013      	ands	r3, r2
 80029a2:	d100      	bne.n	80029a6 <HAL_RCC_OscConfig+0x1e>
 80029a4:	e07c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a6:	4bc3      	ldr	r3, [pc, #780]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2238      	movs	r2, #56	; 0x38
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b0:	4bc0      	ldr	r3, [pc, #768]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2203      	movs	r2, #3
 80029b6:	4013      	ands	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3e>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	4bb9      	ldr	r3, [pc, #740]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	029b      	lsls	r3, r3, #10
 80029d4:	4013      	ands	r3, r2
 80029d6:	d062      	beq.n	8002a9e <HAL_RCC_OscConfig+0x116>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d15e      	bne.n	8002a9e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e2d9      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	025b      	lsls	r3, r3, #9
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x78>
 80029f0:	4bb0      	ldr	r3, [pc, #704]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4baf      	ldr	r3, [pc, #700]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	0249      	lsls	r1, r1, #9
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e020      	b.n	8002a42 <HAL_RCC_OscConfig+0xba>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	23a0      	movs	r3, #160	; 0xa0
 8002a06:	02db      	lsls	r3, r3, #11
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d10e      	bne.n	8002a2a <HAL_RCC_OscConfig+0xa2>
 8002a0c:	4ba9      	ldr	r3, [pc, #676]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4ba8      	ldr	r3, [pc, #672]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	02c9      	lsls	r1, r1, #11
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	4ba6      	ldr	r3, [pc, #664]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4ba5      	ldr	r3, [pc, #660]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	0249      	lsls	r1, r1, #9
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e00b      	b.n	8002a42 <HAL_RCC_OscConfig+0xba>
 8002a2a:	4ba2      	ldr	r3, [pc, #648]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4ba1      	ldr	r3, [pc, #644]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a30:	49a1      	ldr	r1, [pc, #644]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	4b9f      	ldr	r3, [pc, #636]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b9e      	ldr	r3, [pc, #632]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a3c:	499f      	ldr	r1, [pc, #636]	; (8002cbc <HAL_RCC_OscConfig+0x334>)
 8002a3e:	400a      	ands	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d014      	beq.n	8002a74 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fc13 	bl	8001274 <HAL_GetTick>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fc0e 	bl	8001274 <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e298      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a66:	4b93      	ldr	r3, [pc, #588]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0xcc>
 8002a72:	e015      	b.n	8002aa0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fbfe 	bl	8001274 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fbf9 	bl	8001274 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	; 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e283      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a90:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	029b      	lsls	r3, r3, #10
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0xf6>
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d100      	bne.n	8002aac <HAL_RCC_OscConfig+0x124>
 8002aaa:	e099      	b.n	8002be0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aac:	4b81      	ldr	r3, [pc, #516]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2238      	movs	r2, #56	; 0x38
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab6:	4b7f      	ldr	r3, [pc, #508]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2203      	movs	r2, #3
 8002abc:	4013      	ands	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_OscConfig+0x144>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d002      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d135      	bne.n	8002b3e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad2:	4b78      	ldr	r3, [pc, #480]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4013      	ands	r3, r2
 8002adc:	d005      	beq.n	8002aea <HAL_RCC_OscConfig+0x162>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e256      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aea:	4b72      	ldr	r3, [pc, #456]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a74      	ldr	r2, [pc, #464]	; (8002cc0 <HAL_RCC_OscConfig+0x338>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	021a      	lsls	r2, r3, #8
 8002afa:	4b6e      	ldr	r3, [pc, #440]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d112      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b06:	4b6b      	ldr	r3, [pc, #428]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x33c>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	4b67      	ldr	r3, [pc, #412]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b1a:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	0adb      	lsrs	r3, r3, #11
 8002b20:	2207      	movs	r2, #7
 8002b22:	4013      	ands	r3, r2
 8002b24:	4a68      	ldr	r2, [pc, #416]	; (8002cc8 <HAL_RCC_OscConfig+0x340>)
 8002b26:	40da      	lsrs	r2, r3
 8002b28:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <HAL_RCC_OscConfig+0x344>)
 8002b2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x348>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7fe fb43 	bl	80011bc <HAL_InitTick>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d051      	beq.n	8002bde <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e22c      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d030      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b46:	4b5b      	ldr	r3, [pc, #364]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a5e      	ldr	r2, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x33c>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b56:	430a      	orrs	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002b5a:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b60:	2180      	movs	r1, #128	; 0x80
 8002b62:	0049      	lsls	r1, r1, #1
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fb84 	bl	8001274 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b72:	f7fe fb7f 	bl	8001274 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e209      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b84:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <HAL_RCC_OscConfig+0x338>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	021a      	lsls	r2, r3, #8
 8002ba0:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	e01b      	b.n	8002be0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002ba8:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002bae:	4949      	ldr	r1, [pc, #292]	; (8002cd4 <HAL_RCC_OscConfig+0x34c>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fb5e 	bl	8001274 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fb59 	bl	8001274 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e1e3      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x236>
 8002bdc:	e000      	b.n	8002be0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bde:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2208      	movs	r2, #8
 8002be6:	4013      	ands	r3, r2
 8002be8:	d047      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bea:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2238      	movs	r2, #56	; 0x38
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b18      	cmp	r3, #24
 8002bf4:	d10a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d03c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2f2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d138      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e1c5      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d019      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c14:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c18:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe fb28 	bl	8001274 <HAL_GetTick>
 8002c24:	0003      	movs	r3, r0
 8002c26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fb23 	bl	8001274 <HAL_GetTick>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1ad      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c40:	2202      	movs	r2, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d0f1      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2a2>
 8002c46:	e018      	b.n	8002c7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002c4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	438a      	bics	r2, r1
 8002c52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fb0e 	bl	8001274 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fb09 	bl	8001274 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e193      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d1f1      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4013      	ands	r3, r2
 8002c82:	d100      	bne.n	8002c86 <HAL_RCC_OscConfig+0x2fe>
 8002c84:	e0c6      	b.n	8002e14 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	231f      	movs	r3, #31
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2238      	movs	r2, #56	; 0x38
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d11e      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_RCC_OscConfig+0x32c>)
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x31e>
 8002ca4:	e0b6      	b.n	8002e14 <HAL_RCC_OscConfig+0x48c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d000      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x328>
 8002cae:	e0b1      	b.n	8002e14 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e171      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	fffeffff 	.word	0xfffeffff
 8002cbc:	fffbffff 	.word	0xfffbffff
 8002cc0:	ffff80ff 	.word	0xffff80ff
 8002cc4:	ffffc7ff 	.word	0xffffc7ff
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004
 8002cd4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cd8:	4bb1      	ldr	r3, [pc, #708]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	055b      	lsls	r3, r3, #21
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x360>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x362>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d011      	beq.n	8002d12 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	4bac      	ldr	r3, [pc, #688]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf2:	4bab      	ldr	r3, [pc, #684]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0549      	lsls	r1, r1, #21
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cfc:	4ba8      	ldr	r3, [pc, #672]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	055b      	lsls	r3, r3, #21
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d0a:	231f      	movs	r3, #31
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d12:	4ba4      	ldr	r3, [pc, #656]	; (8002fa4 <HAL_RCC_OscConfig+0x61c>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d11a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1e:	4ba1      	ldr	r3, [pc, #644]	; (8002fa4 <HAL_RCC_OscConfig+0x61c>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4ba0      	ldr	r3, [pc, #640]	; (8002fa4 <HAL_RCC_OscConfig+0x61c>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0049      	lsls	r1, r1, #1
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe faa2 	bl	8001274 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fe fa9d 	bl	8001274 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e127      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d48:	4b96      	ldr	r3, [pc, #600]	; (8002fa4 <HAL_RCC_OscConfig+0x61c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3e2>
 8002d5c:	4b90      	ldr	r3, [pc, #576]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d60:	4b8f      	ldr	r3, [pc, #572]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d62:	2101      	movs	r1, #1
 8002d64:	430a      	orrs	r2, r1
 8002d66:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d68:	e01c      	b.n	8002da4 <HAL_RCC_OscConfig+0x41c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x404>
 8002d72:	4b8b      	ldr	r3, [pc, #556]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d76:	4b8a      	ldr	r3, [pc, #552]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d78:	2104      	movs	r1, #4
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d7e:	4b88      	ldr	r3, [pc, #544]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d82:	4b87      	ldr	r3, [pc, #540]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d84:	2101      	movs	r1, #1
 8002d86:	430a      	orrs	r2, r1
 8002d88:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0x41c>
 8002d8c:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d90:	4b83      	ldr	r3, [pc, #524]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d98:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d9c:	4b80      	ldr	r3, [pc, #512]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002d9e:	2104      	movs	r1, #4
 8002da0:	438a      	bics	r2, r1
 8002da2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d014      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fa62 	bl	8001274 <HAL_GetTick>
 8002db0:	0003      	movs	r3, r0
 8002db2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db4:	e009      	b.n	8002dca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe fa5d 	bl	8001274 <HAL_GetTick>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <HAL_RCC_OscConfig+0x620>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0e6      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dca:	4b75      	ldr	r3, [pc, #468]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x42e>
 8002dd4:	e013      	b.n	8002dfe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fa4d 	bl	8001274 <HAL_GetTick>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dde:	e009      	b.n	8002df4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de0:	f7fe fa48 	bl	8001274 <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	4a6f      	ldr	r2, [pc, #444]	; (8002fa8 <HAL_RCC_OscConfig+0x620>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0d1      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002dfe:	231f      	movs	r3, #31
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e08:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e0c:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e0e:	4967      	ldr	r1, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x624>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d100      	bne.n	8002e1e <HAL_RCC_OscConfig+0x496>
 8002e1c:	e0bb      	b.n	8002f96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1e:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2238      	movs	r2, #56	; 0x38
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d100      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4a4>
 8002e2a:	e07b      	b.n	8002f24 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d156      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b5a      	ldr	r3, [pc, #360]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e3a:	495d      	ldr	r1, [pc, #372]	; (8002fb0 <HAL_RCC_OscConfig+0x628>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fa18 	bl	8001274 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe fa13 	bl	8001274 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e09d      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	049b      	lsls	r3, r3, #18
 8002e64:	4013      	ands	r3, r2
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a51      	ldr	r2, [pc, #324]	; (8002fb4 <HAL_RCC_OscConfig+0x62c>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1a      	ldr	r2, [r3, #32]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	431a      	orrs	r2, r3
 8002e96:	4b42      	ldr	r3, [pc, #264]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	0449      	lsls	r1, r1, #17
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	0549      	lsls	r1, r1, #21
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f9dc 	bl	8001274 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe f9d7 	bl	8001274 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e061      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed4:	4b32      	ldr	r3, [pc, #200]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	049b      	lsls	r3, r3, #18
 8002edc:	4013      	ands	r3, r2
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x53a>
 8002ee0:	e059      	b.n	8002f96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002ee8:	4931      	ldr	r1, [pc, #196]	; (8002fb0 <HAL_RCC_OscConfig+0x628>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe f9c1 	bl	8001274 <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe f9bc 	bl	8001274 <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e046      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	049b      	lsls	r3, r3, #18
 8002f12:	4013      	ands	r3, r2
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f16:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002f1c:	4926      	ldr	r1, [pc, #152]	; (8002fb8 <HAL_RCC_OscConfig+0x630>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	e038      	b.n	8002f96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e033      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <HAL_RCC_OscConfig+0x618>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d126      	bne.n	8002f92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2270      	movs	r2, #112	; 0x70
 8002f48:	401a      	ands	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d11f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	23fe      	movs	r3, #254	; 0xfe
 8002f56:	01db      	lsls	r3, r3, #7
 8002f58:	401a      	ands	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d116      	bne.n	8002f92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	23f8      	movs	r3, #248	; 0xf8
 8002f68:	039b      	lsls	r3, r3, #14
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d10e      	bne.n	8002f92 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	23e0      	movs	r3, #224	; 0xe0
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	0f5b      	lsrs	r3, r3, #29
 8002f88:	075a      	lsls	r2, r3, #29
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b008      	add	sp, #32
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	00001388 	.word	0x00001388
 8002fac:	efffffff 	.word	0xefffffff
 8002fb0:	feffffff 	.word	0xfeffffff
 8002fb4:	11c1808c 	.word	0x11c1808c
 8002fb8:	eefefffc 	.word	0xeefefffc

08002fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0e9      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b76      	ldr	r3, [pc, #472]	; (80031ac <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d91e      	bls.n	800301c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b73      	ldr	r3, [pc, #460]	; (80031ac <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	4393      	bics	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	4b70      	ldr	r3, [pc, #448]	; (80031ac <HAL_RCC_ClockConfig+0x1f0>)
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ff0:	f7fe f940 	bl	8001274 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ff8:	e009      	b.n	800300e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	f7fe f93b 	bl	8001274 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	4a6a      	ldr	r2, [pc, #424]	; (80031b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0ca      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2207      	movs	r2, #7
 8003014:	4013      	ands	r3, r2
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d1ee      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2202      	movs	r2, #2
 8003022:	4013      	ands	r3, r2
 8003024:	d015      	beq.n	8003052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2204      	movs	r2, #4
 800302c:	4013      	ands	r3, r2
 800302e:	d006      	beq.n	800303e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003030:	4b60      	ldr	r3, [pc, #384]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	4b5f      	ldr	r3, [pc, #380]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003036:	21e0      	movs	r1, #224	; 0xe0
 8003038:	01c9      	lsls	r1, r1, #7
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303e:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4a5d      	ldr	r2, [pc, #372]	; (80031b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003044:	4013      	ands	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b59      	ldr	r3, [pc, #356]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2201      	movs	r2, #1
 8003058:	4013      	ands	r3, r2
 800305a:	d057      	beq.n	800310c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003064:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	029b      	lsls	r3, r3, #10
 800306c:	4013      	ands	r3, r2
 800306e:	d12b      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e097      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d107      	bne.n	800308c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307c:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	049b      	lsls	r3, r3, #18
 8003084:	4013      	ands	r3, r2
 8003086:	d11f      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e08b      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003094:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4013      	ands	r3, r2
 800309e:	d113      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e07f      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	2202      	movs	r2, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	d108      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e074      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ba:	4b3e      	ldr	r3, [pc, #248]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e06d      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030c8:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2207      	movs	r2, #7
 80030ce:	4393      	bics	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030dc:	f7fe f8ca 	bl	8001274 <HAL_GetTick>
 80030e0:	0003      	movs	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e4:	e009      	b.n	80030fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e6:	f7fe f8c5 	bl	8001274 <HAL_GetTick>
 80030ea:	0002      	movs	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	4a2f      	ldr	r2, [pc, #188]	; (80031b0 <HAL_RCC_ClockConfig+0x1f4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e054      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2238      	movs	r2, #56	; 0x38
 8003100:	401a      	ands	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	429a      	cmp	r2, r3
 800310a:	d1ec      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2207      	movs	r2, #7
 8003112:	4013      	ands	r3, r2
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d21e      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2207      	movs	r2, #7
 8003120:	4393      	bics	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <HAL_RCC_ClockConfig+0x1f0>)
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800312c:	f7fe f8a2 	bl	8001274 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003134:	e009      	b.n	800314a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003136:	f7fe f89d 	bl	8001274 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e02c      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2207      	movs	r2, #7
 8003150:	4013      	ands	r3, r2
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d1ee      	bne.n	8003136 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2204      	movs	r2, #4
 800315e:	4013      	ands	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_RCC_ClockConfig+0x200>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003176:	f000 f829 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800317a:	0001      	movs	r1, r0
 800317c:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <HAL_RCC_ClockConfig+0x1f8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	220f      	movs	r2, #15
 8003184:	401a      	ands	r2, r3
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_RCC_ClockConfig+0x204>)
 8003188:	0092      	lsls	r2, r2, #2
 800318a:	58d3      	ldr	r3, [r2, r3]
 800318c:	221f      	movs	r2, #31
 800318e:	4013      	ands	r3, r2
 8003190:	000a      	movs	r2, r1
 8003192:	40da      	lsrs	r2, r3
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_ClockConfig+0x208>)
 8003196:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_ClockConfig+0x20c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0018      	movs	r0, r3
 800319e:	f7fe f80d 	bl	80011bc <HAL_InitTick>
 80031a2:	0003      	movs	r3, r0
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b004      	add	sp, #16
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40022000 	.word	0x40022000
 80031b0:	00001388 	.word	0x00001388
 80031b4:	40021000 	.word	0x40021000
 80031b8:	fffff0ff 	.word	0xfffff0ff
 80031bc:	ffff8fff 	.word	0xffff8fff
 80031c0:	08005730 	.word	0x08005730
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d2:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2238      	movs	r2, #56	; 0x38
 80031d8:	4013      	ands	r3, r2
 80031da:	d10f      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80031dc:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0adb      	lsrs	r3, r3, #11
 80031e2:	2207      	movs	r2, #7
 80031e4:	4013      	ands	r3, r2
 80031e6:	2201      	movs	r2, #1
 80031e8:	409a      	lsls	r2, r3
 80031ea:	0013      	movs	r3, r2
 80031ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	4835      	ldr	r0, [pc, #212]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031f2:	f7fc ff87 	bl	8000104 <__udivsi3>
 80031f6:	0003      	movs	r3, r0
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	e05d      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2238      	movs	r2, #56	; 0x38
 8003202:	4013      	ands	r3, r2
 8003204:	2b08      	cmp	r3, #8
 8003206:	d102      	bne.n	800320e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003208:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_GetSysClockFreq+0x100>)
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e054      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800320e:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2238      	movs	r2, #56	; 0x38
 8003214:	4013      	ands	r3, r2
 8003216:	2b10      	cmp	r3, #16
 8003218:	d138      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800321a:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2203      	movs	r2, #3
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	2207      	movs	r2, #7
 800322c:	4013      	ands	r3, r2
 800322e:	3301      	adds	r3, #1
 8003230:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d10d      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	4824      	ldr	r0, [pc, #144]	; (80032cc <HAL_RCC_GetSysClockFreq+0x100>)
 800323c:	f7fc ff62 	bl	8000104 <__udivsi3>
 8003240:	0003      	movs	r3, r0
 8003242:	0019      	movs	r1, r3
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	227f      	movs	r2, #127	; 0x7f
 800324c:	4013      	ands	r3, r2
 800324e:	434b      	muls	r3, r1
 8003250:	617b      	str	r3, [r7, #20]
        break;
 8003252:	e00d      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	481c      	ldr	r0, [pc, #112]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003258:	f7fc ff54 	bl	8000104 <__udivsi3>
 800325c:	0003      	movs	r3, r0
 800325e:	0019      	movs	r1, r3
 8003260:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	227f      	movs	r2, #127	; 0x7f
 8003268:	4013      	ands	r3, r2
 800326a:	434b      	muls	r3, r1
 800326c:	617b      	str	r3, [r7, #20]
        break;
 800326e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0f5b      	lsrs	r3, r3, #29
 8003276:	2207      	movs	r2, #7
 8003278:	4013      	ands	r3, r2
 800327a:	3301      	adds	r3, #1
 800327c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	6978      	ldr	r0, [r7, #20]
 8003282:	f7fc ff3f 	bl	8000104 <__udivsi3>
 8003286:	0003      	movs	r3, r0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	e015      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800328c:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2238      	movs	r2, #56	; 0x38
 8003292:	4013      	ands	r3, r2
 8003294:	2b20      	cmp	r3, #32
 8003296:	d103      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2238      	movs	r2, #56	; 0x38
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b18      	cmp	r3, #24
 80032aa:	d103      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80032ac:	23fa      	movs	r3, #250	; 0xfa
 80032ae:	01db      	lsls	r3, r3, #7
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	e001      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032b8:	693b      	ldr	r3, [r7, #16]
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	40021000 	.word	0x40021000
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	007a1200 	.word	0x007a1200

080032d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	20000000 	.word	0x20000000

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80032e8:	f7ff fff2 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032ec:	0004      	movs	r4, r0
 80032ee:	f7ff fb3f 	bl	8002970 <LL_RCC_GetAPB1Prescaler>
 80032f2:	0003      	movs	r3, r0
 80032f4:	0b1a      	lsrs	r2, r3, #12
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f8:	0092      	lsls	r2, r2, #2
 80032fa:	58d3      	ldr	r3, [r2, r3]
 80032fc:	221f      	movs	r2, #31
 80032fe:	4013      	ands	r3, r2
 8003300:	40dc      	lsrs	r4, r3
 8003302:	0023      	movs	r3, r4
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	bdb0      	pop	{r4, r5, r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	08005770 	.word	0x08005770

08003310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003318:	2313      	movs	r3, #19
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003320:	2312      	movs	r3, #18
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	029b      	lsls	r3, r3, #10
 8003330:	4013      	ands	r3, r2
 8003332:	d100      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003334:	e0a3      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2011      	movs	r0, #17
 8003338:	183b      	adds	r3, r7, r0
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4ba5      	ldr	r3, [pc, #660]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	055b      	lsls	r3, r3, #21
 8003346:	4013      	ands	r3, r2
 8003348:	d110      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4ba2      	ldr	r3, [pc, #648]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800334c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800334e:	4ba1      	ldr	r3, [pc, #644]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0549      	lsls	r1, r1, #21
 8003354:	430a      	orrs	r2, r1
 8003356:	63da      	str	r2, [r3, #60]	; 0x3c
 8003358:	4b9e      	ldr	r3, [pc, #632]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800335a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	055b      	lsls	r3, r3, #21
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	183b      	adds	r3, r7, r0
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336c:	4b9a      	ldr	r3, [pc, #616]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b99      	ldr	r3, [pc, #612]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	0049      	lsls	r1, r1, #1
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337a:	f7fd ff7b 	bl	8001274 <HAL_GetTick>
 800337e:	0003      	movs	r3, r0
 8003380:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003382:	e00b      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fd ff76 	bl	8001274 <HAL_GetTick>
 8003388:	0002      	movs	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d904      	bls.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003392:	2313      	movs	r3, #19
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2203      	movs	r2, #3
 8003398:	701a      	strb	r2, [r3, #0]
        break;
 800339a:	e005      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339c:	4b8e      	ldr	r3, [pc, #568]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	d0ed      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80033a8:	2313      	movs	r3, #19
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d154      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033b2:	4b88      	ldr	r3, [pc, #544]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033b6:	23c0      	movs	r3, #192	; 0xc0
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4013      	ands	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d019      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d014      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ce:	4b81      	ldr	r3, [pc, #516]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	4a82      	ldr	r2, [pc, #520]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d8:	4b7e      	ldr	r3, [pc, #504]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033dc:	4b7d      	ldr	r3, [pc, #500]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	0249      	lsls	r1, r1, #9
 80033e2:	430a      	orrs	r2, r1
 80033e4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e6:	4b7b      	ldr	r3, [pc, #492]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ea:	4b7a      	ldr	r3, [pc, #488]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033ec:	497c      	ldr	r1, [pc, #496]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f2:	4b78      	ldr	r3, [pc, #480]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d016      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd ff38 	bl	8001274 <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003408:	e00c      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fd ff33 	bl	8001274 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	4a73      	ldr	r2, [pc, #460]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d904      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800341a:	2313      	movs	r3, #19
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2203      	movs	r2, #3
 8003420:	701a      	strb	r2, [r3, #0]
            break;
 8003422:	e004      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003424:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2202      	movs	r2, #2
 800342a:	4013      	ands	r3, r2
 800342c:	d0ed      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800342e:	2313      	movs	r3, #19
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003438:	4b66      	ldr	r3, [pc, #408]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	4a67      	ldr	r2, [pc, #412]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800343e:	4013      	ands	r3, r2
 8003440:	0019      	movs	r1, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003448:	430a      	orrs	r2, r1
 800344a:	65da      	str	r2, [r3, #92]	; 0x5c
 800344c:	e00c      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800344e:	2312      	movs	r3, #18
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	2213      	movs	r2, #19
 8003454:	18ba      	adds	r2, r7, r2
 8003456:	7812      	ldrb	r2, [r2, #0]
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e005      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345c:	2312      	movs	r3, #18
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2213      	movs	r2, #19
 8003462:	18ba      	adds	r2, r7, r2
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003468:	2311      	movs	r3, #17
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d105      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003472:	4b58      	ldr	r3, [pc, #352]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003476:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003478:	495b      	ldr	r1, [pc, #364]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800347a:	400a      	ands	r2, r1
 800347c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2201      	movs	r2, #1
 8003484:	4013      	ands	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003488:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	2203      	movs	r2, #3
 800348e:	4393      	bics	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003498:	430a      	orrs	r2, r1
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2210      	movs	r2, #16
 80034a2:	4013      	ands	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034a6:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	4a50      	ldr	r2, [pc, #320]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034b6:	430a      	orrs	r2, r1
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4013      	ands	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034c6:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	4a49      	ldr	r2, [pc, #292]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034d6:	430a      	orrs	r2, r1
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4013      	ands	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	4a42      	ldr	r2, [pc, #264]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034f6:	430a      	orrs	r2, r1
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2220      	movs	r2, #32
 8003500:	4013      	ands	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003504:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800350a:	4013      	ands	r3, r2
 800350c:	0019      	movs	r1, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003514:	430a      	orrs	r2, r1
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	01db      	lsls	r3, r3, #7
 8003520:	4013      	ands	r3, r2
 8003522:	d015      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003524:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	0899      	lsrs	r1, r3, #2
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003532:	430a      	orrs	r2, r1
 8003534:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	429a      	cmp	r2, r3
 8003540:	d106      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	0249      	lsls	r1, r1, #9
 800354c:	430a      	orrs	r2, r1
 800354e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	039b      	lsls	r3, r3, #14
 8003558:	4013      	ands	r3, r2
 800355a:	d016      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	4a26      	ldr	r2, [pc, #152]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800356c:	430a      	orrs	r2, r1
 800356e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	03db      	lsls	r3, r3, #15
 8003578:	429a      	cmp	r2, r3
 800357a:	d106      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800357c:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003582:	2180      	movs	r1, #128	; 0x80
 8003584:	0449      	lsls	r1, r1, #17
 8003586:	430a      	orrs	r2, r1
 8003588:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	4013      	ands	r3, r2
 8003594:	d016      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	01db      	lsls	r3, r3, #7
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d106      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	0249      	lsls	r1, r1, #9
 80035c0:	430a      	orrs	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80035c4:	2312      	movs	r3, #18
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	781b      	ldrb	r3, [r3, #0]
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b006      	add	sp, #24
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40007000 	.word	0x40007000
 80035dc:	fffffcff 	.word	0xfffffcff
 80035e0:	fffeffff 	.word	0xfffeffff
 80035e4:	00001388 	.word	0x00001388
 80035e8:	efffffff 	.word	0xefffffff
 80035ec:	fffff3ff 	.word	0xfffff3ff
 80035f0:	fff3ffff 	.word	0xfff3ffff
 80035f4:	ffcfffff 	.word	0xffcfffff
 80035f8:	ffffcfff 	.word	0xffffcfff
 80035fc:	ffbfffff 	.word	0xffbfffff
 8003600:	ffff3fff 	.word	0xffff3fff

08003604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e04a      	b.n	80036ac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	223d      	movs	r2, #61	; 0x3d
 800361a:	5c9b      	ldrb	r3, [r3, r2]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	223c      	movs	r2, #60	; 0x3c
 8003626:	2100      	movs	r1, #0
 8003628:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0018      	movs	r0, r3
 800362e:	f7fd fbb9 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	223d      	movs	r2, #61	; 0x3d
 8003636:	2102      	movs	r1, #2
 8003638:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3304      	adds	r3, #4
 8003642:	0019      	movs	r1, r3
 8003644:	0010      	movs	r0, r2
 8003646:	f000 fb49 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2248      	movs	r2, #72	; 0x48
 800364e:	2101      	movs	r1, #1
 8003650:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	223e      	movs	r2, #62	; 0x3e
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	223f      	movs	r2, #63	; 0x3f
 800365e:	2101      	movs	r1, #1
 8003660:	5499      	strb	r1, [r3, r2]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2240      	movs	r2, #64	; 0x40
 8003666:	2101      	movs	r1, #1
 8003668:	5499      	strb	r1, [r3, r2]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2241      	movs	r2, #65	; 0x41
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2242      	movs	r2, #66	; 0x42
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2243      	movs	r2, #67	; 0x43
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2244      	movs	r2, #68	; 0x44
 8003686:	2101      	movs	r1, #1
 8003688:	5499      	strb	r1, [r3, r2]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2245      	movs	r2, #69	; 0x45
 800368e:	2101      	movs	r1, #1
 8003690:	5499      	strb	r1, [r3, r2]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2246      	movs	r2, #70	; 0x46
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2247      	movs	r2, #71	; 0x47
 800369e:	2101      	movs	r1, #1
 80036a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	223d      	movs	r2, #61	; 0x3d
 80036a6:	2101      	movs	r1, #1
 80036a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b002      	add	sp, #8
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e04a      	b.n	800375c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	223d      	movs	r2, #61	; 0x3d
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	223c      	movs	r2, #60	; 0x3c
 80036d6:	2100      	movs	r1, #0
 80036d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f841 	bl	8003764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	223d      	movs	r2, #61	; 0x3d
 80036e6:	2102      	movs	r1, #2
 80036e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	0019      	movs	r1, r3
 80036f4:	0010      	movs	r0, r2
 80036f6:	f000 faf1 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2248      	movs	r2, #72	; 0x48
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223e      	movs	r2, #62	; 0x3e
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	223f      	movs	r2, #63	; 0x3f
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2240      	movs	r2, #64	; 0x40
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2241      	movs	r2, #65	; 0x41
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2242      	movs	r2, #66	; 0x42
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2243      	movs	r2, #67	; 0x43
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2244      	movs	r2, #68	; 0x44
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2245      	movs	r2, #69	; 0x45
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2246      	movs	r2, #70	; 0x46
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2247      	movs	r2, #71	; 0x47
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	223d      	movs	r2, #61	; 0x3d
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d108      	bne.n	8003796 <HAL_TIM_PWM_Start+0x22>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	223e      	movs	r2, #62	; 0x3e
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	4193      	sbcs	r3, r2
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e037      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d108      	bne.n	80037ae <HAL_TIM_PWM_Start+0x3a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	223f      	movs	r2, #63	; 0x3f
 80037a0:	5c9b      	ldrb	r3, [r3, r2]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	4193      	sbcs	r3, r2
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e02b      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d108      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x52>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	5c9b      	ldrb	r3, [r3, r2]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	4193      	sbcs	r3, r2
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e01f      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	d108      	bne.n	80037de <HAL_TIM_PWM_Start+0x6a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2241      	movs	r2, #65	; 0x41
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	1e5a      	subs	r2, r3, #1
 80037d8:	4193      	sbcs	r3, r2
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e013      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d108      	bne.n	80037f6 <HAL_TIM_PWM_Start+0x82>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2242      	movs	r2, #66	; 0x42
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	1e5a      	subs	r2, r3, #1
 80037f0:	4193      	sbcs	r3, r2
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e007      	b.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2243      	movs	r2, #67	; 0x43
 80037fa:	5c9b      	ldrb	r3, [r3, r2]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	4193      	sbcs	r3, r2
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e081      	b.n	8003912 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <HAL_TIM_PWM_Start+0xaa>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	223e      	movs	r2, #62	; 0x3e
 8003818:	2102      	movs	r1, #2
 800381a:	5499      	strb	r1, [r3, r2]
 800381c:	e023      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d104      	bne.n	800382e <HAL_TIM_PWM_Start+0xba>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	223f      	movs	r2, #63	; 0x3f
 8003828:	2102      	movs	r1, #2
 800382a:	5499      	strb	r1, [r3, r2]
 800382c:	e01b      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d104      	bne.n	800383e <HAL_TIM_PWM_Start+0xca>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	2102      	movs	r1, #2
 800383a:	5499      	strb	r1, [r3, r2]
 800383c:	e013      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0xda>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2241      	movs	r2, #65	; 0x41
 8003848:	2102      	movs	r1, #2
 800384a:	5499      	strb	r1, [r3, r2]
 800384c:	e00b      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0xea>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2242      	movs	r2, #66	; 0x42
 8003858:	2102      	movs	r1, #2
 800385a:	5499      	strb	r1, [r3, r2]
 800385c:	e003      	b.n	8003866 <HAL_TIM_PWM_Start+0xf2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2243      	movs	r2, #67	; 0x43
 8003862:	2102      	movs	r1, #2
 8003864:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	2201      	movs	r2, #1
 800386e:	0018      	movs	r0, r3
 8003870:	f000 fde2 	bl	8004438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a28      	ldr	r2, [pc, #160]	; (800391c <HAL_TIM_PWM_Start+0x1a8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_TIM_PWM_Start+0x11e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a27      	ldr	r2, [pc, #156]	; (8003920 <HAL_TIM_PWM_Start+0x1ac>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_TIM_PWM_Start+0x11e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <HAL_TIM_PWM_Start+0x1b0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_TIM_PWM_Start+0x122>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_TIM_PWM_Start+0x124>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	0209      	lsls	r1, r1, #8
 80038aa:	430a      	orrs	r2, r1
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_TIM_PWM_Start+0x1a8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00a      	beq.n	80038ce <HAL_TIM_PWM_Start+0x15a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	05db      	lsls	r3, r3, #23
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d004      	beq.n	80038ce <HAL_TIM_PWM_Start+0x15a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_TIM_PWM_Start+0x1b4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d116      	bne.n	80038fc <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a15      	ldr	r2, [pc, #84]	; (800392c <HAL_TIM_PWM_Start+0x1b8>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b06      	cmp	r3, #6
 80038de:	d016      	beq.n	800390e <HAL_TIM_PWM_Start+0x19a>
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	025b      	lsls	r3, r3, #9
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d011      	beq.n	800390e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	e008      	b.n	800390e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2101      	movs	r1, #1
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e000      	b.n	8003910 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	0018      	movs	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	b004      	add	sp, #16
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800
 8003928:	40000400 	.word	0x40000400
 800392c:	00010007 	.word	0x00010007

08003930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2317      	movs	r3, #23
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	223c      	movs	r2, #60	; 0x3c
 8003948:	5c9b      	ldrb	r3, [r3, r2]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_TIM_PWM_ConfigChannel+0x22>
 800394e:	2302      	movs	r3, #2
 8003950:	e0e5      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	223c      	movs	r2, #60	; 0x3c
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b14      	cmp	r3, #20
 800395e:	d900      	bls.n	8003962 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003960:	e0d1      	b.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	009a      	lsls	r2, r3, #2
 8003966:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003968:	18d3      	adds	r3, r2, r3
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	0011      	movs	r1, r2
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fa26 	bl	8003dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2108      	movs	r1, #8
 8003988:	430a      	orrs	r2, r1
 800398a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2104      	movs	r1, #4
 8003998:	438a      	bics	r2, r1
 800399a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6999      	ldr	r1, [r3, #24]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	619a      	str	r2, [r3, #24]
      break;
 80039ae:	e0af      	b.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	0011      	movs	r1, r2
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 fa85 	bl	8003ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	0109      	lsls	r1, r1, #4
 80039cc:	430a      	orrs	r2, r1
 80039ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4954      	ldr	r1, [pc, #336]	; (8003b2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039dc:	400a      	ands	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6999      	ldr	r1, [r3, #24]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	021a      	lsls	r2, r3, #8
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	619a      	str	r2, [r3, #24]
      break;
 80039f4:	e08c      	b.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	0011      	movs	r1, r2
 80039fe:	0018      	movs	r0, r3
 8003a00:	f000 fae0 	bl	8003fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2108      	movs	r1, #8
 8003a10:	430a      	orrs	r2, r1
 8003a12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2104      	movs	r1, #4
 8003a20:	438a      	bics	r2, r1
 8003a22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69d9      	ldr	r1, [r3, #28]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	61da      	str	r2, [r3, #28]
      break;
 8003a36:	e06b      	b.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	0011      	movs	r1, r2
 8003a40:	0018      	movs	r0, r3
 8003a42:	f000 fb41 	bl	80040c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	0109      	lsls	r1, r1, #4
 8003a54:	430a      	orrs	r2, r1
 8003a56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4932      	ldr	r1, [pc, #200]	; (8003b2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69d9      	ldr	r1, [r3, #28]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	021a      	lsls	r2, r3, #8
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	61da      	str	r2, [r3, #28]
      break;
 8003a7c:	e048      	b.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	0011      	movs	r1, r2
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 fb82 	bl	8004190 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2108      	movs	r1, #8
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2104      	movs	r1, #4
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003abe:	e027      	b.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fbbb 	bl	8004244 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2180      	movs	r1, #128	; 0x80
 8003ada:	0109      	lsls	r1, r1, #4
 8003adc:	430a      	orrs	r2, r1
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4910      	ldr	r1, [pc, #64]	; (8003b2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	021a      	lsls	r2, r3, #8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b04:	e004      	b.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003b06:	2317      	movs	r3, #23
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
      break;
 8003b0e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	223c      	movs	r2, #60	; 0x3c
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]

  return status;
 8003b18:	2317      	movs	r3, #23
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	781b      	ldrb	r3, [r3, #0]
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b006      	add	sp, #24
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	08005790 	.word	0x08005790
 8003b2c:	fffffbff 	.word	0xfffffbff

08003b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	230f      	movs	r3, #15
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	223c      	movs	r2, #60	; 0x3c
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_ConfigClockSource+0x20>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0bc      	b.n	8003cca <HAL_TIM_ConfigClockSource+0x19a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	223c      	movs	r2, #60	; 0x3c
 8003b54:	2101      	movs	r1, #1
 8003b56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	223d      	movs	r2, #61	; 0x3d
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4a5a      	ldr	r2, [pc, #360]	; (8003cd4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4a59      	ldr	r2, [pc, #356]	; (8003cd8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	0192      	lsls	r2, r2, #6
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d040      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0xde>
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	0192      	lsls	r2, r2, #6
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d900      	bls.n	8003b96 <HAL_TIM_ConfigClockSource+0x66>
 8003b94:	e088      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	0152      	lsls	r2, r2, #5
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d100      	bne.n	8003ba0 <HAL_TIM_ConfigClockSource+0x70>
 8003b9e:	e088      	b.n	8003cb2 <HAL_TIM_ConfigClockSource+0x182>
 8003ba0:	2280      	movs	r2, #128	; 0x80
 8003ba2:	0152      	lsls	r2, r2, #5
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d900      	bls.n	8003baa <HAL_TIM_ConfigClockSource+0x7a>
 8003ba8:	e07e      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
 8003baa:	2b70      	cmp	r3, #112	; 0x70
 8003bac:	d018      	beq.n	8003be0 <HAL_TIM_ConfigClockSource+0xb0>
 8003bae:	d900      	bls.n	8003bb2 <HAL_TIM_ConfigClockSource+0x82>
 8003bb0:	e07a      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
 8003bb2:	2b60      	cmp	r3, #96	; 0x60
 8003bb4:	d04f      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x126>
 8003bb6:	d900      	bls.n	8003bba <HAL_TIM_ConfigClockSource+0x8a>
 8003bb8:	e076      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
 8003bba:	2b50      	cmp	r3, #80	; 0x50
 8003bbc:	d03b      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x106>
 8003bbe:	d900      	bls.n	8003bc2 <HAL_TIM_ConfigClockSource+0x92>
 8003bc0:	e072      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d057      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x146>
 8003bc6:	d900      	bls.n	8003bca <HAL_TIM_ConfigClockSource+0x9a>
 8003bc8:	e06e      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
 8003bca:	2b30      	cmp	r3, #48	; 0x30
 8003bcc:	d063      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x166>
 8003bce:	d86b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d060      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x166>
 8003bd4:	d868      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d05d      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x166>
 8003bda:	2b10      	cmp	r3, #16
 8003bdc:	d05b      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x166>
 8003bde:	e063      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bf0:	f000 fc02 	bl	80043f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2277      	movs	r2, #119	; 0x77
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
      break;
 8003c0c:	e052      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c1e:	f000 fbeb 	bl	80043f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	01c9      	lsls	r1, r1, #7
 8003c30:	430a      	orrs	r2, r1
 8003c32:	609a      	str	r2, [r3, #8]
      break;
 8003c34:	e03e      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	001a      	movs	r2, r3
 8003c44:	f000 fb5c 	bl	8004300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2150      	movs	r1, #80	; 0x50
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 fbb6 	bl	80043c0 <TIM_ITRx_SetConfig>
      break;
 8003c54:	e02e      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c62:	001a      	movs	r2, r3
 8003c64:	f000 fb7a 	bl	800435c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2160      	movs	r1, #96	; 0x60
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f000 fba6 	bl	80043c0 <TIM_ITRx_SetConfig>
      break;
 8003c74:	e01e      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	001a      	movs	r2, r3
 8003c84:	f000 fb3c 	bl	8004300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2140      	movs	r1, #64	; 0x40
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fb96 	bl	80043c0 <TIM_ITRx_SetConfig>
      break;
 8003c94:	e00e      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	0010      	movs	r0, r2
 8003ca2:	f000 fb8d 	bl	80043c0 <TIM_ITRx_SetConfig>
      break;
 8003ca6:	e005      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ca8:	230f      	movs	r3, #15
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]
      break;
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003cb2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	223d      	movs	r2, #61	; 0x3d
 8003cb8:	2101      	movs	r1, #1
 8003cba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	223c      	movs	r2, #60	; 0x3c
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

  return status;
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	781b      	ldrb	r3, [r3, #0]
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b004      	add	sp, #16
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	ffceff88 	.word	0xffceff88
 8003cd8:	ffff00ff 	.word	0xffff00ff

08003cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <TIM_Base_SetConfig+0xd4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d008      	beq.n	8003d06 <TIM_Base_SetConfig+0x2a>
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	05db      	lsls	r3, r3, #23
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d003      	beq.n	8003d06 <TIM_Base_SetConfig+0x2a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <TIM_Base_SetConfig+0xd8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2270      	movs	r2, #112	; 0x70
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <TIM_Base_SetConfig+0xd4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d014      	beq.n	8003d4a <TIM_Base_SetConfig+0x6e>
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	05db      	lsls	r3, r3, #23
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d00f      	beq.n	8003d4a <TIM_Base_SetConfig+0x6e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <TIM_Base_SetConfig+0xd8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00b      	beq.n	8003d4a <TIM_Base_SetConfig+0x6e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <TIM_Base_SetConfig+0xdc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <TIM_Base_SetConfig+0x6e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <TIM_Base_SetConfig+0xe0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_Base_SetConfig+0x6e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <TIM_Base_SetConfig+0xe4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	; (8003dc4 <TIM_Base_SetConfig+0xe8>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	4393      	bics	r3, r2
 8003d62:	001a      	movs	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <TIM_Base_SetConfig+0xd4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d007      	beq.n	8003d9a <TIM_Base_SetConfig+0xbe>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a0b      	ldr	r2, [pc, #44]	; (8003dbc <TIM_Base_SetConfig+0xe0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_Base_SetConfig+0xbe>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <TIM_Base_SetConfig+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d103      	bne.n	8003da2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	615a      	str	r2, [r3, #20]
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b004      	add	sp, #16
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40002000 	.word	0x40002000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	fffffcff 	.word	0xfffffcff

08003dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4393      	bics	r3, r2
 8003dda:	001a      	movs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a2e      	ldr	r2, [pc, #184]	; (8003eb0 <TIM_OC1_SetConfig+0xe8>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	4393      	bics	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4393      	bics	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <TIM_OC1_SetConfig+0xec>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_OC1_SetConfig+0x6e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <TIM_OC1_SetConfig+0xf0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_OC1_SetConfig+0x6e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <TIM_OC1_SetConfig+0xf4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10c      	bne.n	8003e50 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2208      	movs	r2, #8
 8003e3a:	4393      	bics	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	4393      	bics	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <TIM_OC1_SetConfig+0xec>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_OC1_SetConfig+0xa0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <TIM_OC1_SetConfig+0xf0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC1_SetConfig+0xa0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <TIM_OC1_SetConfig+0xf4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d111      	bne.n	8003e8c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <TIM_OC1_SetConfig+0xf8>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <TIM_OC1_SetConfig+0xfc>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b006      	add	sp, #24
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	fffeff8f 	.word	0xfffeff8f
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800
 8003ec0:	fffffeff 	.word	0xfffffeff
 8003ec4:	fffffdff 	.word	0xfffffdff

08003ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	4393      	bics	r3, r2
 8003eda:	001a      	movs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	; (8003fa8 <TIM_OC2_SetConfig+0xe0>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <TIM_OC2_SetConfig+0xe4>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2220      	movs	r2, #32
 8003f12:	4393      	bics	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <TIM_OC2_SetConfig+0xe8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10d      	bne.n	8003f46 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	4393      	bics	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2240      	movs	r2, #64	; 0x40
 8003f42:	4393      	bics	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <TIM_OC2_SetConfig+0xe8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_OC2_SetConfig+0x96>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <TIM_OC2_SetConfig+0xec>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_OC2_SetConfig+0x96>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <TIM_OC2_SetConfig+0xf0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d113      	bne.n	8003f86 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <TIM_OC2_SetConfig+0xf4>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <TIM_OC2_SetConfig+0xf8>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b006      	add	sp, #24
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	feff8fff 	.word	0xfeff8fff
 8003fac:	fffffcff 	.word	0xfffffcff
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40014400 	.word	0x40014400
 8003fb8:	40014800 	.word	0x40014800
 8003fbc:	fffffbff 	.word	0xfffffbff
 8003fc0:	fffff7ff 	.word	0xfffff7ff

08003fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4a33      	ldr	r2, [pc, #204]	; (80040a0 <TIM_OC3_SetConfig+0xdc>)
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <TIM_OC3_SetConfig+0xe0>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <TIM_OC3_SetConfig+0xe4>)
 800400a:	4013      	ands	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a23      	ldr	r2, [pc, #140]	; (80040ac <TIM_OC3_SetConfig+0xe8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10d      	bne.n	800403e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <TIM_OC3_SetConfig+0xec>)
 8004026:	4013      	ands	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <TIM_OC3_SetConfig+0xf0>)
 800403a:	4013      	ands	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1a      	ldr	r2, [pc, #104]	; (80040ac <TIM_OC3_SetConfig+0xe8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_OC3_SetConfig+0x92>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <TIM_OC3_SetConfig+0xf4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_OC3_SetConfig+0x92>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <TIM_OC3_SetConfig+0xf8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <TIM_OC3_SetConfig+0xfc>)
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <TIM_OC3_SetConfig+0x100>)
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	b006      	add	sp, #24
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	fffffeff 	.word	0xfffffeff
 80040a4:	fffeff8f 	.word	0xfffeff8f
 80040a8:	fffffdff 	.word	0xfffffdff
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	fffff7ff 	.word	0xfffff7ff
 80040b4:	fffffbff 	.word	0xfffffbff
 80040b8:	40014400 	.word	0x40014400
 80040bc:	40014800 	.word	0x40014800
 80040c0:	ffffefff 	.word	0xffffefff
 80040c4:	ffffdfff 	.word	0xffffdfff

080040c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4a26      	ldr	r2, [pc, #152]	; (8004170 <TIM_OC4_SetConfig+0xa8>)
 80040d8:	401a      	ands	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a20      	ldr	r2, [pc, #128]	; (8004174 <TIM_OC4_SetConfig+0xac>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <TIM_OC4_SetConfig+0xb0>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4a1b      	ldr	r2, [pc, #108]	; (800417c <TIM_OC4_SetConfig+0xb4>)
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	031b      	lsls	r3, r3, #12
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <TIM_OC4_SetConfig+0xb8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <TIM_OC4_SetConfig+0x70>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <TIM_OC4_SetConfig+0xbc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC4_SetConfig+0x70>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a15      	ldr	r2, [pc, #84]	; (8004188 <TIM_OC4_SetConfig+0xc0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d109      	bne.n	800414c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	4a14      	ldr	r2, [pc, #80]	; (800418c <TIM_OC4_SetConfig+0xc4>)
 800413c:	4013      	ands	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	019b      	lsls	r3, r3, #6
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b006      	add	sp, #24
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	ffffefff 	.word	0xffffefff
 8004174:	feff8fff 	.word	0xfeff8fff
 8004178:	fffffcff 	.word	0xfffffcff
 800417c:	ffffdfff 	.word	0xffffdfff
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800
 800418c:	ffffbfff 	.word	0xffffbfff

08004190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4a23      	ldr	r2, [pc, #140]	; (800422c <TIM_OC5_SetConfig+0x9c>)
 80041a0:	401a      	ands	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <TIM_OC5_SetConfig+0xa0>)
 80041bc:	4013      	ands	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <TIM_OC5_SetConfig+0xa4>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <TIM_OC5_SetConfig+0xa8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_OC5_SetConfig+0x66>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <TIM_OC5_SetConfig+0xac>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_OC5_SetConfig+0x66>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a13      	ldr	r2, [pc, #76]	; (8004240 <TIM_OC5_SetConfig+0xb0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d109      	bne.n	800420a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4a0c      	ldr	r2, [pc, #48]	; (800422c <TIM_OC5_SetConfig+0x9c>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b006      	add	sp, #24
 800422a:	bd80      	pop	{r7, pc}
 800422c:	fffeffff 	.word	0xfffeffff
 8004230:	fffeff8f 	.word	0xfffeff8f
 8004234:	fffdffff 	.word	0xfffdffff
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <TIM_OC6_SetConfig+0xa0>)
 8004254:	401a      	ands	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <TIM_OC6_SetConfig+0xa4>)
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <TIM_OC6_SetConfig+0xa8>)
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	051b      	lsls	r3, r3, #20
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <TIM_OC6_SetConfig+0xac>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_OC6_SetConfig+0x68>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <TIM_OC6_SetConfig+0xb0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC6_SetConfig+0x68>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <TIM_OC6_SetConfig+0xb4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d109      	bne.n	80042c0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4a13      	ldr	r2, [pc, #76]	; (80042fc <TIM_OC6_SetConfig+0xb8>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	029b      	lsls	r3, r3, #10
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b006      	add	sp, #24
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	ffefffff 	.word	0xffefffff
 80042e8:	feff8fff 	.word	0xfeff8fff
 80042ec:	ffdfffff 	.word	0xffdfffff
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800
 80042fc:	fffbffff 	.word	0xfffbffff

08004300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	2201      	movs	r2, #1
 8004318:	4393      	bics	r3, r2
 800431a:	001a      	movs	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	22f0      	movs	r2, #240	; 0xf0
 800432a:	4393      	bics	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	220a      	movs	r2, #10
 800433c:	4393      	bics	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b006      	add	sp, #24
 800435a:	bd80      	pop	{r7, pc}

0800435c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	2210      	movs	r2, #16
 800436e:	4393      	bics	r3, r2
 8004370:	001a      	movs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <TIM_TI2_ConfigInputStage+0x60>)
 8004386:	4013      	ands	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	031b      	lsls	r3, r3, #12
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	22a0      	movs	r2, #160	; 0xa0
 8004398:	4393      	bics	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b006      	add	sp, #24
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	ffff0fff 	.word	0xffff0fff

080043c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <TIM_ITRx_SetConfig+0x34>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	2207      	movs	r2, #7
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	609a      	str	r2, [r3, #8]
}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b004      	add	sp, #16
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	ffcfff8f 	.word	0xffcfff8f

080043f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <TIM_ETR_SetConfig+0x3c>)
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	431a      	orrs	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4313      	orrs	r3, r2
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	b006      	add	sp, #24
 8004432:	bd80      	pop	{r7, pc}
 8004434:	ffff00ff 	.word	0xffff00ff

08004438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	221f      	movs	r2, #31
 8004448:	4013      	ands	r3, r2
 800444a:	2201      	movs	r2, #1
 800444c:	409a      	lsls	r2, r3
 800444e:	0013      	movs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	43d2      	mvns	r2, r2
 800445a:	401a      	ands	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	211f      	movs	r1, #31
 8004468:	400b      	ands	r3, r1
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4099      	lsls	r1, r3
 800446e:	000b      	movs	r3, r1
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b006      	add	sp, #24
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	223c      	movs	r2, #60	; 0x3c
 800448e:	5c9b      	ldrb	r3, [r3, r2]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e050      	b.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	223c      	movs	r2, #60	; 0x3c
 800449c:	2101      	movs	r1, #1
 800449e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	223d      	movs	r2, #61	; 0x3d
 80044a4:	2102      	movs	r1, #2
 80044a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a21      	ldr	r2, [pc, #132]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a20      	ldr	r2, [pc, #128]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2270      	movs	r2, #112	; 0x70
 80044d8:	4393      	bics	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a14      	ldr	r2, [pc, #80]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00a      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	05db      	lsls	r3, r3, #23
 8004500:	429a      	cmp	r2, r3
 8004502:	d004      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a10      	ldr	r2, [pc, #64]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10c      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	4393      	bics	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4313      	orrs	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	223d      	movs	r2, #61	; 0x3d
 800452c:	2101      	movs	r1, #1
 800452e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	223c      	movs	r2, #60	; 0x3c
 8004534:	2100      	movs	r1, #0
 8004536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b004      	add	sp, #16
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	40012c00 	.word	0x40012c00
 8004548:	ff0fffff 	.word	0xff0fffff
 800454c:	40000400 	.word	0x40000400

08004550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	223c      	movs	r2, #60	; 0x3c
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004568:	2302      	movs	r3, #2
 800456a:	e079      	b.n	8004660 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	223c      	movs	r2, #60	; 0x3c
 8004570:	2101      	movs	r1, #1
 8004572:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	22ff      	movs	r2, #255	; 0xff
 8004578:	4393      	bics	r3, r2
 800457a:	001a      	movs	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a38      	ldr	r2, [pc, #224]	; (8004668 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004588:	401a      	ands	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a35      	ldr	r2, [pc, #212]	; (800466c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004596:	401a      	ands	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a33      	ldr	r2, [pc, #204]	; (8004670 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80045a4:	401a      	ands	r2, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a30      	ldr	r2, [pc, #192]	; (8004674 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80045b2:	401a      	ands	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a2e      	ldr	r2, [pc, #184]	; (8004678 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80045c0:	401a      	ands	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a2b      	ldr	r2, [pc, #172]	; (800467c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80045ce:	401a      	ands	r2, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4a29      	ldr	r2, [pc, #164]	; (8004680 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80045dc:	401a      	ands	r2, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a25      	ldr	r2, [pc, #148]	; (8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d106      	bne.n	8004600 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a24      	ldr	r2, [pc, #144]	; (8004688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80045f6:	401a      	ands	r2, r3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d121      	bne.n	800464e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a1f      	ldr	r2, [pc, #124]	; (800468c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800460e:	401a      	ands	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	051b      	lsls	r3, r3, #20
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800461e:	401a      	ands	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a1a      	ldr	r2, [pc, #104]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800462c:	401a      	ands	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d106      	bne.n	800464e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004644:	401a      	ands	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	223c      	movs	r2, #60	; 0x3c
 800465a:	2100      	movs	r1, #0
 800465c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b004      	add	sp, #16
 8004666:	bd80      	pop	{r7, pc}
 8004668:	fffffcff 	.word	0xfffffcff
 800466c:	fffffbff 	.word	0xfffffbff
 8004670:	fffff7ff 	.word	0xfffff7ff
 8004674:	ffffefff 	.word	0xffffefff
 8004678:	ffffdfff 	.word	0xffffdfff
 800467c:	ffffbfff 	.word	0xffffbfff
 8004680:	fff0ffff 	.word	0xfff0ffff
 8004684:	40012c00 	.word	0x40012c00
 8004688:	efffffff 	.word	0xefffffff
 800468c:	ff0fffff 	.word	0xff0fffff
 8004690:	feffffff 	.word	0xfeffffff
 8004694:	fdffffff 	.word	0xfdffffff
 8004698:	dfffffff 	.word	0xdfffffff

0800469c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e046      	b.n	800473c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2288      	movs	r2, #136	; 0x88
 80046b2:	589b      	ldr	r3, [r3, r2]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d107      	bne.n	80046c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2284      	movs	r2, #132	; 0x84
 80046bc:	2100      	movs	r1, #0
 80046be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0018      	movs	r0, r3
 80046c4:	f7fc fc96 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2288      	movs	r2, #136	; 0x88
 80046cc:	2124      	movs	r1, #36	; 0x24
 80046ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2101      	movs	r1, #1
 80046dc:	438a      	bics	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 f8da 	bl	800489c <UART_SetConfig>
 80046e8:	0003      	movs	r3, r0
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e024      	b.n	800473c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 fb45 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	490d      	ldr	r1, [pc, #52]	; (8004744 <HAL_UART_Init+0xa8>)
 800470e:	400a      	ands	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	212a      	movs	r1, #42	; 0x2a
 800471e:	438a      	bics	r2, r1
 8004720:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2101      	movs	r1, #1
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 fbdd 	bl	8004ef4 <UART_CheckIdleState>
 800473a:	0003      	movs	r3, r0
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b002      	add	sp, #8
 8004742:	bd80      	pop	{r7, pc}
 8004744:	ffffb7ff 	.word	0xffffb7ff

08004748 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	1dbb      	adds	r3, r7, #6
 8004754:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2288      	movs	r2, #136	; 0x88
 800475a:	589b      	ldr	r3, [r3, r2]
 800475c:	2b20      	cmp	r3, #32
 800475e:	d000      	beq.n	8004762 <HAL_UART_Transmit_DMA+0x1a>
 8004760:	e079      	b.n	8004856 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_UART_Transmit_DMA+0x28>
 8004768:	1dbb      	adds	r3, r7, #6
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e071      	b.n	8004858 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	015b      	lsls	r3, r3, #5
 800477c:	429a      	cmp	r2, r3
 800477e:	d109      	bne.n	8004794 <HAL_UART_Transmit_DMA+0x4c>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2201      	movs	r2, #1
 800478c:	4013      	ands	r3, r2
 800478e:	d001      	beq.n	8004794 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e061      	b.n	8004858 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1dba      	adds	r2, r7, #6
 800479e:	2154      	movs	r1, #84	; 0x54
 80047a0:	8812      	ldrh	r2, [r2, #0]
 80047a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1dba      	adds	r2, r7, #6
 80047a8:	2156      	movs	r1, #86	; 0x56
 80047aa:	8812      	ldrh	r2, [r2, #0]
 80047ac:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2290      	movs	r2, #144	; 0x90
 80047b2:	2100      	movs	r1, #0
 80047b4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2288      	movs	r2, #136	; 0x88
 80047ba:	2121      	movs	r1, #33	; 0x21
 80047bc:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d028      	beq.n	8004818 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ca:	4a25      	ldr	r2, [pc, #148]	; (8004860 <HAL_UART_Transmit_DMA+0x118>)
 80047cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d2:	4a24      	ldr	r2, [pc, #144]	; (8004864 <HAL_UART_Transmit_DMA+0x11c>)
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047da:	4a23      	ldr	r2, [pc, #140]	; (8004868 <HAL_UART_Transmit_DMA+0x120>)
 80047dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e2:	2200      	movs	r2, #0
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	0019      	movs	r1, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3328      	adds	r3, #40	; 0x28
 80047f6:	001a      	movs	r2, r3
 80047f8:	1dbb      	adds	r3, r7, #6
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	f7fd fd2e 	bl	800225c <HAL_DMA_Start_IT>
 8004800:	1e03      	subs	r3, r0, #0
 8004802:	d009      	beq.n	8004818 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2290      	movs	r2, #144	; 0x90
 8004808:	2110      	movs	r1, #16
 800480a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2288      	movs	r2, #136	; 0x88
 8004810:	2120      	movs	r1, #32
 8004812:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e01f      	b.n	8004858 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2240      	movs	r2, #64	; 0x40
 800481e:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004820:	f3ef 8310 	mrs	r3, PRIMASK
 8004824:	613b      	str	r3, [r7, #16]
  return(result);
 8004826:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	2301      	movs	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f383 8810 	msr	PRIMASK, r3
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f383 8810 	msr	PRIMASK, r3
}
 8004850:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b008      	add	sp, #32
 800485e:	bd80      	pop	{r7, pc}
 8004860:	0800526d 	.word	0x0800526d
 8004864:	08005305 	.word	0x08005305
 8004868:	08005323 	.word	0x08005323

0800486c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800489c:	b5b0      	push	{r4, r5, r7, lr}
 800489e:	b090      	sub	sp, #64	; 0x40
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a4:	231a      	movs	r3, #26
 80048a6:	2220      	movs	r2, #32
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	19db      	adds	r3, r3, r7
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	431a      	orrs	r2, r3
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4ac4      	ldr	r2, [pc, #784]	; (8004be0 <UART_SetConfig+0x344>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	0019      	movs	r1, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	430b      	orrs	r3, r1
 80048dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4abf      	ldr	r2, [pc, #764]	; (8004be4 <UART_SetConfig+0x348>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	0018      	movs	r0, r3
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	68d9      	ldr	r1, [r3, #12]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	0003      	movs	r3, r0
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4ab9      	ldr	r2, [pc, #740]	; (8004be8 <UART_SetConfig+0x34c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800490e:	4313      	orrs	r3, r2
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4ab4      	ldr	r2, [pc, #720]	; (8004bec <UART_SetConfig+0x350>)
 800491a:	4013      	ands	r3, r2
 800491c:	0019      	movs	r1, r3
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	430b      	orrs	r3, r1
 8004926:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	220f      	movs	r2, #15
 8004930:	4393      	bics	r3, r2
 8004932:	0018      	movs	r0, r3
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	0003      	movs	r3, r0
 800493e:	430b      	orrs	r3, r1
 8004940:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4aaa      	ldr	r2, [pc, #680]	; (8004bf0 <UART_SetConfig+0x354>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d131      	bne.n	80049b0 <UART_SetConfig+0x114>
 800494c:	4ba9      	ldr	r3, [pc, #676]	; (8004bf4 <UART_SetConfig+0x358>)
 800494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004950:	2203      	movs	r2, #3
 8004952:	4013      	ands	r3, r2
 8004954:	2b03      	cmp	r3, #3
 8004956:	d01d      	beq.n	8004994 <UART_SetConfig+0xf8>
 8004958:	d823      	bhi.n	80049a2 <UART_SetConfig+0x106>
 800495a:	2b02      	cmp	r3, #2
 800495c:	d00c      	beq.n	8004978 <UART_SetConfig+0xdc>
 800495e:	d820      	bhi.n	80049a2 <UART_SetConfig+0x106>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <UART_SetConfig+0xce>
 8004964:	2b01      	cmp	r3, #1
 8004966:	d00e      	beq.n	8004986 <UART_SetConfig+0xea>
 8004968:	e01b      	b.n	80049a2 <UART_SetConfig+0x106>
 800496a:	231b      	movs	r3, #27
 800496c:	2220      	movs	r2, #32
 800496e:	189b      	adds	r3, r3, r2
 8004970:	19db      	adds	r3, r3, r7
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	e071      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004978:	231b      	movs	r3, #27
 800497a:	2220      	movs	r2, #32
 800497c:	189b      	adds	r3, r3, r2
 800497e:	19db      	adds	r3, r3, r7
 8004980:	2202      	movs	r2, #2
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	e06a      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004986:	231b      	movs	r3, #27
 8004988:	2220      	movs	r2, #32
 800498a:	189b      	adds	r3, r3, r2
 800498c:	19db      	adds	r3, r3, r7
 800498e:	2204      	movs	r2, #4
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e063      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004994:	231b      	movs	r3, #27
 8004996:	2220      	movs	r2, #32
 8004998:	189b      	adds	r3, r3, r2
 800499a:	19db      	adds	r3, r3, r7
 800499c:	2208      	movs	r2, #8
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e05c      	b.n	8004a5c <UART_SetConfig+0x1c0>
 80049a2:	231b      	movs	r3, #27
 80049a4:	2220      	movs	r2, #32
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	19db      	adds	r3, r3, r7
 80049aa:	2210      	movs	r2, #16
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e055      	b.n	8004a5c <UART_SetConfig+0x1c0>
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a90      	ldr	r2, [pc, #576]	; (8004bf8 <UART_SetConfig+0x35c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d106      	bne.n	80049c8 <UART_SetConfig+0x12c>
 80049ba:	231b      	movs	r3, #27
 80049bc:	2220      	movs	r2, #32
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	19db      	adds	r3, r3, r7
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e049      	b.n	8004a5c <UART_SetConfig+0x1c0>
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a86      	ldr	r2, [pc, #536]	; (8004be8 <UART_SetConfig+0x34c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d13e      	bne.n	8004a50 <UART_SetConfig+0x1b4>
 80049d2:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <UART_SetConfig+0x358>)
 80049d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049d6:	23c0      	movs	r3, #192	; 0xc0
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	4013      	ands	r3, r2
 80049dc:	22c0      	movs	r2, #192	; 0xc0
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d027      	beq.n	8004a34 <UART_SetConfig+0x198>
 80049e4:	22c0      	movs	r2, #192	; 0xc0
 80049e6:	0112      	lsls	r2, r2, #4
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d82a      	bhi.n	8004a42 <UART_SetConfig+0x1a6>
 80049ec:	2280      	movs	r2, #128	; 0x80
 80049ee:	0112      	lsls	r2, r2, #4
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d011      	beq.n	8004a18 <UART_SetConfig+0x17c>
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d822      	bhi.n	8004a42 <UART_SetConfig+0x1a6>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <UART_SetConfig+0x16e>
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	00d2      	lsls	r2, r2, #3
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <UART_SetConfig+0x18a>
 8004a08:	e01b      	b.n	8004a42 <UART_SetConfig+0x1a6>
 8004a0a:	231b      	movs	r3, #27
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	19db      	adds	r3, r3, r7
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e021      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004a18:	231b      	movs	r3, #27
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	19db      	adds	r3, r3, r7
 8004a20:	2202      	movs	r2, #2
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e01a      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004a26:	231b      	movs	r3, #27
 8004a28:	2220      	movs	r2, #32
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	19db      	adds	r3, r3, r7
 8004a2e:	2204      	movs	r2, #4
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e013      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004a34:	231b      	movs	r3, #27
 8004a36:	2220      	movs	r2, #32
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	19db      	adds	r3, r3, r7
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e00c      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004a42:	231b      	movs	r3, #27
 8004a44:	2220      	movs	r2, #32
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	19db      	adds	r3, r3, r7
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e005      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004a50:	231b      	movs	r3, #27
 8004a52:	2220      	movs	r2, #32
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	19db      	adds	r3, r3, r7
 8004a58:	2210      	movs	r2, #16
 8004a5a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a61      	ldr	r2, [pc, #388]	; (8004be8 <UART_SetConfig+0x34c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d000      	beq.n	8004a68 <UART_SetConfig+0x1cc>
 8004a66:	e092      	b.n	8004b8e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a68:	231b      	movs	r3, #27
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	19db      	adds	r3, r3, r7
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d015      	beq.n	8004aa2 <UART_SetConfig+0x206>
 8004a76:	dc18      	bgt.n	8004aaa <UART_SetConfig+0x20e>
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d00d      	beq.n	8004a98 <UART_SetConfig+0x1fc>
 8004a7c:	dc15      	bgt.n	8004aaa <UART_SetConfig+0x20e>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <UART_SetConfig+0x1ec>
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d005      	beq.n	8004a92 <UART_SetConfig+0x1f6>
 8004a86:	e010      	b.n	8004aaa <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a88:	f7fe fc2c 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a90:	e014      	b.n	8004abc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a92:	4b5a      	ldr	r3, [pc, #360]	; (8004bfc <UART_SetConfig+0x360>)
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a96:	e011      	b.n	8004abc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a98:	f7fe fb98 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aa0:	e00c      	b.n	8004abc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa2:	2380      	movs	r3, #128	; 0x80
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aa8:	e008      	b.n	8004abc <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004aae:	231a      	movs	r3, #26
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	19db      	adds	r3, r3, r7
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
        break;
 8004aba:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d100      	bne.n	8004ac4 <UART_SetConfig+0x228>
 8004ac2:	e147      	b.n	8004d54 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ac8:	4b4d      	ldr	r3, [pc, #308]	; (8004c00 <UART_SetConfig+0x364>)
 8004aca:	0052      	lsls	r2, r2, #1
 8004acc:	5ad3      	ldrh	r3, [r2, r3]
 8004ace:	0019      	movs	r1, r3
 8004ad0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ad2:	f7fb fb17 	bl	8000104 <__udivsi3>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	0013      	movs	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d305      	bcc.n	8004af6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d906      	bls.n	8004b04 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004af6:	231a      	movs	r3, #26
 8004af8:	2220      	movs	r2, #32
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	19db      	adds	r3, r3, r7
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e127      	b.n	8004d54 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b10:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <UART_SetConfig+0x364>)
 8004b12:	0052      	lsls	r2, r2, #1
 8004b14:	5ad3      	ldrh	r3, [r2, r3]
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	69b8      	ldr	r0, [r7, #24]
 8004b22:	69f9      	ldr	r1, [r7, #28]
 8004b24:	f7fb fc64 	bl	80003f0 <__aeabi_uldivmod>
 8004b28:	0002      	movs	r2, r0
 8004b2a:	000b      	movs	r3, r1
 8004b2c:	0e11      	lsrs	r1, r2, #24
 8004b2e:	021d      	lsls	r5, r3, #8
 8004b30:	430d      	orrs	r5, r1
 8004b32:	0214      	lsls	r4, r2, #8
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68b8      	ldr	r0, [r7, #8]
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	1900      	adds	r0, r0, r4
 8004b46:	4169      	adcs	r1, r5
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f7fb fc4b 	bl	80003f0 <__aeabi_uldivmod>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	000b      	movs	r3, r1
 8004b5e:	0013      	movs	r3, r2
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b64:	23c0      	movs	r3, #192	; 0xc0
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d309      	bcc.n	8004b80 <UART_SetConfig+0x2e4>
 8004b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	035b      	lsls	r3, r3, #13
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d204      	bcs.n	8004b80 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	e0e9      	b.n	8004d54 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b80:	231a      	movs	r3, #26
 8004b82:	2220      	movs	r2, #32
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	19db      	adds	r3, r3, r7
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e0e2      	b.n	8004d54 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d000      	beq.n	8004b9c <UART_SetConfig+0x300>
 8004b9a:	e083      	b.n	8004ca4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004b9c:	231b      	movs	r3, #27
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	189b      	adds	r3, r3, r2
 8004ba2:	19db      	adds	r3, r3, r7
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d015      	beq.n	8004bd6 <UART_SetConfig+0x33a>
 8004baa:	dc2b      	bgt.n	8004c04 <UART_SetConfig+0x368>
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d00d      	beq.n	8004bcc <UART_SetConfig+0x330>
 8004bb0:	dc28      	bgt.n	8004c04 <UART_SetConfig+0x368>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <UART_SetConfig+0x320>
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d005      	beq.n	8004bc6 <UART_SetConfig+0x32a>
 8004bba:	e023      	b.n	8004c04 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bbc:	f7fe fb92 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bc4:	e027      	b.n	8004c16 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <UART_SetConfig+0x360>)
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bca:	e024      	b.n	8004c16 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bcc:	f7fe fafe 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bd4:	e01f      	b.n	8004c16 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bdc:	e01b      	b.n	8004c16 <UART_SetConfig+0x37a>
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	cfff69f3 	.word	0xcfff69f3
 8004be4:	ffffcfff 	.word	0xffffcfff
 8004be8:	40008000 	.word	0x40008000
 8004bec:	11fff4ff 	.word	0x11fff4ff
 8004bf0:	40013800 	.word	0x40013800
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40004400 	.word	0x40004400
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	080057e4 	.word	0x080057e4
      default:
        pclk = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c08:	231a      	movs	r3, #26
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	19db      	adds	r3, r3, r7
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
        break;
 8004c14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d100      	bne.n	8004c1e <UART_SetConfig+0x382>
 8004c1c:	e09a      	b.n	8004d54 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c22:	4b58      	ldr	r3, [pc, #352]	; (8004d84 <UART_SetConfig+0x4e8>)
 8004c24:	0052      	lsls	r2, r2, #1
 8004c26:	5ad3      	ldrh	r3, [r2, r3]
 8004c28:	0019      	movs	r1, r3
 8004c2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c2c:	f7fb fa6a 	bl	8000104 <__udivsi3>
 8004c30:	0003      	movs	r3, r0
 8004c32:	005a      	lsls	r2, r3, #1
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	18d2      	adds	r2, r2, r3
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	0019      	movs	r1, r3
 8004c42:	0010      	movs	r0, r2
 8004c44:	f7fb fa5e 	bl	8000104 <__udivsi3>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	2b0f      	cmp	r3, #15
 8004c50:	d921      	bls.n	8004c96 <UART_SetConfig+0x3fa>
 8004c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	025b      	lsls	r3, r3, #9
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d21c      	bcs.n	8004c96 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	200e      	movs	r0, #14
 8004c62:	2420      	movs	r4, #32
 8004c64:	1903      	adds	r3, r0, r4
 8004c66:	19db      	adds	r3, r3, r7
 8004c68:	210f      	movs	r1, #15
 8004c6a:	438a      	bics	r2, r1
 8004c6c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2207      	movs	r2, #7
 8004c76:	4013      	ands	r3, r2
 8004c78:	b299      	uxth	r1, r3
 8004c7a:	1903      	adds	r3, r0, r4
 8004c7c:	19db      	adds	r3, r3, r7
 8004c7e:	1902      	adds	r2, r0, r4
 8004c80:	19d2      	adds	r2, r2, r7
 8004c82:	8812      	ldrh	r2, [r2, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1902      	adds	r2, r0, r4
 8004c8e:	19d2      	adds	r2, r2, r7
 8004c90:	8812      	ldrh	r2, [r2, #0]
 8004c92:	60da      	str	r2, [r3, #12]
 8004c94:	e05e      	b.n	8004d54 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c96:	231a      	movs	r3, #26
 8004c98:	2220      	movs	r2, #32
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	19db      	adds	r3, r3, r7
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e057      	b.n	8004d54 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca4:	231b      	movs	r3, #27
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	189b      	adds	r3, r3, r2
 8004caa:	19db      	adds	r3, r3, r7
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d015      	beq.n	8004cde <UART_SetConfig+0x442>
 8004cb2:	dc18      	bgt.n	8004ce6 <UART_SetConfig+0x44a>
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d00d      	beq.n	8004cd4 <UART_SetConfig+0x438>
 8004cb8:	dc15      	bgt.n	8004ce6 <UART_SetConfig+0x44a>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <UART_SetConfig+0x428>
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d005      	beq.n	8004cce <UART_SetConfig+0x432>
 8004cc2:	e010      	b.n	8004ce6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc4:	f7fe fb0e 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ccc:	e014      	b.n	8004cf8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cce:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <UART_SetConfig+0x4ec>)
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cd2:	e011      	b.n	8004cf8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd4:	f7fe fa7a 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cdc:	e00c      	b.n	8004cf8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ce4:	e008      	b.n	8004cf8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004cea:	231a      	movs	r3, #26
 8004cec:	2220      	movs	r2, #32
 8004cee:	189b      	adds	r3, r3, r2
 8004cf0:	19db      	adds	r3, r3, r7
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
        break;
 8004cf6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d02a      	beq.n	8004d54 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <UART_SetConfig+0x4e8>)
 8004d04:	0052      	lsls	r2, r2, #1
 8004d06:	5ad3      	ldrh	r3, [r2, r3]
 8004d08:	0019      	movs	r1, r3
 8004d0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d0c:	f7fb f9fa 	bl	8000104 <__udivsi3>
 8004d10:	0003      	movs	r3, r0
 8004d12:	001a      	movs	r2, r3
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	18d2      	adds	r2, r2, r3
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	0019      	movs	r1, r3
 8004d22:	0010      	movs	r0, r2
 8004d24:	f7fb f9ee 	bl	8000104 <__udivsi3>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	2b0f      	cmp	r3, #15
 8004d30:	d90a      	bls.n	8004d48 <UART_SetConfig+0x4ac>
 8004d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	025b      	lsls	r3, r3, #9
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d205      	bcs.n	8004d48 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	e005      	b.n	8004d54 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d48:	231a      	movs	r3, #26
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	19db      	adds	r3, r3, r7
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	226a      	movs	r2, #106	; 0x6a
 8004d58:	2101      	movs	r1, #1
 8004d5a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	2268      	movs	r2, #104	; 0x68
 8004d60:	2101      	movs	r1, #1
 8004d62:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	2200      	movs	r2, #0
 8004d68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d70:	231a      	movs	r3, #26
 8004d72:	2220      	movs	r2, #32
 8004d74:	189b      	adds	r3, r3, r2
 8004d76:	19db      	adds	r3, r3, r7
 8004d78:	781b      	ldrb	r3, [r3, #0]
}
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b010      	add	sp, #64	; 0x40
 8004d80:	bdb0      	pop	{r4, r5, r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	080057e4 	.word	0x080057e4
 8004d88:	00f42400 	.word	0x00f42400

08004d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	2201      	movs	r2, #1
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d00b      	beq.n	8004db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4a4a      	ldr	r2, [pc, #296]	; (8004ed0 <UART_AdvFeatureConfig+0x144>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	2202      	movs	r2, #2
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4a43      	ldr	r2, [pc, #268]	; (8004ed4 <UART_AdvFeatureConfig+0x148>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	0019      	movs	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	2204      	movs	r2, #4
 8004dde:	4013      	ands	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a3b      	ldr	r2, [pc, #236]	; (8004ed8 <UART_AdvFeatureConfig+0x14c>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	2208      	movs	r2, #8
 8004e00:	4013      	ands	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4a34      	ldr	r2, [pc, #208]	; (8004edc <UART_AdvFeatureConfig+0x150>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	0019      	movs	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	2210      	movs	r2, #16
 8004e22:	4013      	ands	r3, r2
 8004e24:	d00b      	beq.n	8004e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <UART_AdvFeatureConfig+0x154>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	0019      	movs	r1, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	2220      	movs	r2, #32
 8004e44:	4013      	ands	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <UART_AdvFeatureConfig+0x158>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	2240      	movs	r2, #64	; 0x40
 8004e66:	4013      	ands	r3, r2
 8004e68:	d01d      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <UART_AdvFeatureConfig+0x15c>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e86:	2380      	movs	r3, #128	; 0x80
 8004e88:	035b      	lsls	r3, r3, #13
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d10b      	bne.n	8004ea6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a15      	ldr	r2, [pc, #84]	; (8004eec <UART_AdvFeatureConfig+0x160>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	0019      	movs	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	2280      	movs	r2, #128	; 0x80
 8004eac:	4013      	ands	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <UART_AdvFeatureConfig+0x164>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b002      	add	sp, #8
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	fffdffff 	.word	0xfffdffff
 8004ed4:	fffeffff 	.word	0xfffeffff
 8004ed8:	fffbffff 	.word	0xfffbffff
 8004edc:	ffff7fff 	.word	0xffff7fff
 8004ee0:	ffffefff 	.word	0xffffefff
 8004ee4:	ffffdfff 	.word	0xffffdfff
 8004ee8:	ffefffff 	.word	0xffefffff
 8004eec:	ff9fffff 	.word	0xff9fffff
 8004ef0:	fff7ffff 	.word	0xfff7ffff

08004ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2290      	movs	r2, #144	; 0x90
 8004f00:	2100      	movs	r1, #0
 8004f02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f04:	f7fc f9b6 	bl	8001274 <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2208      	movs	r2, #8
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d10c      	bne.n	8004f34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2280      	movs	r2, #128	; 0x80
 8004f1e:	0391      	lsls	r1, r2, #14
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4a1a      	ldr	r2, [pc, #104]	; (8004f8c <UART_CheckIdleState+0x98>)
 8004f24:	9200      	str	r2, [sp, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f000 f832 	bl	8004f90 <UART_WaitOnFlagUntilTimeout>
 8004f2c:	1e03      	subs	r3, r0, #0
 8004f2e:	d001      	beq.n	8004f34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e026      	b.n	8004f82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d10c      	bne.n	8004f5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2280      	movs	r2, #128	; 0x80
 8004f46:	03d1      	lsls	r1, r2, #15
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4a10      	ldr	r2, [pc, #64]	; (8004f8c <UART_CheckIdleState+0x98>)
 8004f4c:	9200      	str	r2, [sp, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f000 f81e 	bl	8004f90 <UART_WaitOnFlagUntilTimeout>
 8004f54:	1e03      	subs	r3, r0, #0
 8004f56:	d001      	beq.n	8004f5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e012      	b.n	8004f82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2288      	movs	r2, #136	; 0x88
 8004f60:	2120      	movs	r1, #32
 8004f62:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	228c      	movs	r2, #140	; 0x8c
 8004f68:	2120      	movs	r1, #32
 8004f6a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2284      	movs	r2, #132	; 0x84
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b004      	add	sp, #16
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	01ffffff 	.word	0x01ffffff

08004f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b094      	sub	sp, #80	; 0x50
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	1dfb      	adds	r3, r7, #7
 8004f9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa0:	e0a7      	b.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	d100      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fa8:	e0a3      	b.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7fc f963 	bl	8001274 <HAL_GetTick>
 8004fae:	0002      	movs	r2, r0
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d13f      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fca:	2301      	movs	r3, #1
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	f383 8810 	msr	PRIMASK, r3
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	494e      	ldr	r1, [pc, #312]	; (800511c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004fe2:	400a      	ands	r2, r1
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	f383 8810 	msr	PRIMASK, r3
}
 8004ff0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	f383 8810 	msr	PRIMASK, r3
}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2101      	movs	r1, #1
 8005014:	438a      	bics	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	f383 8810 	msr	PRIMASK, r3
}
 8005022:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2288      	movs	r2, #136	; 0x88
 8005028:	2120      	movs	r1, #32
 800502a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	228c      	movs	r2, #140	; 0x8c
 8005030:	2120      	movs	r1, #32
 8005032:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2284      	movs	r2, #132	; 0x84
 8005038:	2100      	movs	r1, #0
 800503a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e069      	b.n	8005114 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2204      	movs	r2, #4
 8005048:	4013      	ands	r3, r2
 800504a:	d052      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	401a      	ands	r2, r3
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	429a      	cmp	r2, r3
 800505e:	d148      	bne.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2280      	movs	r2, #128	; 0x80
 8005066:	0112      	lsls	r2, r2, #4
 8005068:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8310 	mrs	r3, PRIMASK
 800506e:	613b      	str	r3, [r7, #16]
  return(result);
 8005070:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005074:	2301      	movs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4924      	ldr	r1, [pc, #144]	; (800511c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800508c:	400a      	ands	r2, r1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005092:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509c:	f3ef 8310 	mrs	r3, PRIMASK
 80050a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80050a2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a6:	2301      	movs	r3, #1
 80050a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2101      	movs	r1, #1
 80050be:	438a      	bics	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]
 80050c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	f383 8810 	msr	PRIMASK, r3
}
 80050cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2288      	movs	r2, #136	; 0x88
 80050d2:	2120      	movs	r1, #32
 80050d4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	228c      	movs	r2, #140	; 0x8c
 80050da:	2120      	movs	r1, #32
 80050dc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2290      	movs	r2, #144	; 0x90
 80050e2:	2120      	movs	r1, #32
 80050e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2284      	movs	r2, #132	; 0x84
 80050ea:	2100      	movs	r1, #0
 80050ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e010      	b.n	8005114 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	425a      	negs	r2, r3
 8005102:	4153      	adcs	r3, r2
 8005104:	b2db      	uxtb	r3, r3
 8005106:	001a      	movs	r2, r3
 8005108:	1dfb      	adds	r3, r7, #7
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d100      	bne.n	8005112 <UART_WaitOnFlagUntilTimeout+0x182>
 8005110:	e747      	b.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b014      	add	sp, #80	; 0x50
 800511a:	bd80      	pop	{r7, pc}
 800511c:	fffffe5f 	.word	0xfffffe5f

08005120 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005128:	f3ef 8310 	mrs	r3, PRIMASK
 800512c:	60bb      	str	r3, [r7, #8]
  return(result);
 800512e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	2301      	movs	r3, #1
 8005134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f383 8810 	msr	PRIMASK, r3
}
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	21c0      	movs	r1, #192	; 0xc0
 800514a:	438a      	bics	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f383 8810 	msr	PRIMASK, r3
}
 8005158:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515a:	f3ef 8310 	mrs	r3, PRIMASK
 800515e:	617b      	str	r3, [r7, #20]
  return(result);
 8005160:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	2301      	movs	r3, #1
 8005166:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f383 8810 	msr	PRIMASK, r3
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4908      	ldr	r1, [pc, #32]	; (800519c <UART_EndTxTransfer+0x7c>)
 800517c:	400a      	ands	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f383 8810 	msr	PRIMASK, r3
}
 800518a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2288      	movs	r2, #136	; 0x88
 8005190:	2120      	movs	r1, #32
 8005192:	5099      	str	r1, [r3, r2]
}
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	b00a      	add	sp, #40	; 0x28
 800519a:	bd80      	pop	{r7, pc}
 800519c:	ff7fffff 	.word	0xff7fffff

080051a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08e      	sub	sp, #56	; 0x38
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ac:	617b      	str	r3, [r7, #20]
  return(result);
 80051ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
 80051b2:	2301      	movs	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f383 8810 	msr	PRIMASK, r3
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4926      	ldr	r1, [pc, #152]	; (8005264 <UART_EndRxTransfer+0xc4>)
 80051ca:	400a      	ands	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f383 8810 	msr	PRIMASK, r3
}
 80051d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051da:	f3ef 8310 	mrs	r3, PRIMASK
 80051de:	623b      	str	r3, [r7, #32]
  return(result);
 80051e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051e2:	633b      	str	r3, [r7, #48]	; 0x30
 80051e4:	2301      	movs	r3, #1
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	f383 8810 	msr	PRIMASK, r3
}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	491b      	ldr	r1, [pc, #108]	; (8005268 <UART_EndRxTransfer+0xc8>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	f383 8810 	msr	PRIMASK, r3
}
 800520a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d118      	bne.n	8005246 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005214:	f3ef 8310 	mrs	r3, PRIMASK
 8005218:	60bb      	str	r3, [r7, #8]
  return(result);
 800521a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521e:	2301      	movs	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f383 8810 	msr	PRIMASK, r3
}
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2110      	movs	r1, #16
 8005236:	438a      	bics	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f383 8810 	msr	PRIMASK, r3
}
 8005244:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	228c      	movs	r2, #140	; 0x8c
 800524a:	2120      	movs	r1, #32
 800524c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	675a      	str	r2, [r3, #116]	; 0x74
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b00e      	add	sp, #56	; 0x38
 8005260:	bd80      	pop	{r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	fffffedf 	.word	0xfffffedf
 8005268:	effffffe 	.word	0xeffffffe

0800526c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08c      	sub	sp, #48	; 0x30
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2220      	movs	r2, #32
 8005282:	4013      	ands	r3, r2
 8005284:	d135      	bne.n	80052f2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2256      	movs	r2, #86	; 0x56
 800528a:	2100      	movs	r1, #0
 800528c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528e:	f3ef 8310 	mrs	r3, PRIMASK
 8005292:	60fb      	str	r3, [r7, #12]
  return(result);
 8005294:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
 8005298:	2301      	movs	r3, #1
 800529a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f383 8810 	msr	PRIMASK, r3
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	438a      	bics	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f383 8810 	msr	PRIMASK, r3
}
 80052be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c0:	f3ef 8310 	mrs	r3, PRIMASK
 80052c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80052c6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ca:	2301      	movs	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2140      	movs	r1, #64	; 0x40
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	e004      	b.n	80052fc <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7ff fab9 	bl	800486c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	b00c      	add	sp, #48	; 0x30
 8005302:	bd80      	pop	{r7, pc}

08005304 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	0018      	movs	r0, r3
 8005316:	f7ff fab1 	bl	800487c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b004      	add	sp, #16
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2288      	movs	r2, #136	; 0x88
 8005334:	589b      	ldr	r3, [r3, r2]
 8005336:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	228c      	movs	r2, #140	; 0x8c
 800533c:	589b      	ldr	r3, [r3, r2]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	4013      	ands	r3, r2
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d10a      	bne.n	8005364 <UART_DMAError+0x42>
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b21      	cmp	r3, #33	; 0x21
 8005352:	d107      	bne.n	8005364 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2256      	movs	r2, #86	; 0x56
 8005358:	2100      	movs	r1, #0
 800535a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	0018      	movs	r0, r3
 8005360:	f7ff fede 	bl	8005120 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2240      	movs	r2, #64	; 0x40
 800536c:	4013      	ands	r3, r2
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d10a      	bne.n	8005388 <UART_DMAError+0x66>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b22      	cmp	r3, #34	; 0x22
 8005376:	d107      	bne.n	8005388 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	225e      	movs	r2, #94	; 0x5e
 800537c:	2100      	movs	r1, #0
 800537e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	0018      	movs	r0, r3
 8005384:	f7ff ff0c 	bl	80051a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2290      	movs	r2, #144	; 0x90
 800538c:	589b      	ldr	r3, [r3, r2]
 800538e:	2210      	movs	r2, #16
 8005390:	431a      	orrs	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2190      	movs	r1, #144	; 0x90
 8005396:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	0018      	movs	r0, r3
 800539c:	f7ff fa76 	bl	800488c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b006      	add	sp, #24
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e05d      	b.n	800547c <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2288      	movs	r2, #136	; 0x88
 80053c4:	589b      	ldr	r3, [r3, r2]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2284      	movs	r2, #132	; 0x84
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7fb fe0d 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2288      	movs	r2, #136	; 0x88
 80053de:	2124      	movs	r1, #36	; 0x24
 80053e0:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2101      	movs	r1, #1
 80053ee:	438a      	bics	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	0018      	movs	r0, r3
 80053f6:	f7ff fa51 	bl	800489c <UART_SetConfig>
 80053fa:	0003      	movs	r3, r0
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e03b      	b.n	800547c <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	0018      	movs	r0, r3
 8005410:	f7ff fcbc 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2180      	movs	r1, #128	; 0x80
 8005420:	01c9      	lsls	r1, r1, #7
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4a15      	ldr	r2, [pc, #84]	; (8005484 <HAL_RS485Ex_Init+0xdc>)
 800542e:	4013      	ands	r3, r2
 8005430:	0019      	movs	r1, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	430a      	orrs	r2, r1
 800543a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	055b      	lsls	r3, r3, #21
 8005440:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <HAL_RS485Ex_Init+0xe0>)
 8005454:	4013      	ands	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	430a      	orrs	r2, r1
 8005460:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2101      	movs	r1, #1
 800546e:	430a      	orrs	r2, r1
 8005470:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	0018      	movs	r0, r3
 8005476:	f7ff fd3d 	bl	8004ef4 <UART_CheckIdleState>
 800547a:	0003      	movs	r3, r0
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	b006      	add	sp, #24
 8005482:	bd80      	pop	{r7, pc}
 8005484:	ffff7fff 	.word	0xffff7fff
 8005488:	fc00ffff 	.word	0xfc00ffff

0800548c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2284      	movs	r2, #132	; 0x84
 8005498:	5c9b      	ldrb	r3, [r3, r2]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800549e:	2302      	movs	r3, #2
 80054a0:	e027      	b.n	80054f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2284      	movs	r2, #132	; 0x84
 80054a6:	2101      	movs	r1, #1
 80054a8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2288      	movs	r2, #136	; 0x88
 80054ae:	2124      	movs	r1, #36	; 0x24
 80054b0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2101      	movs	r1, #1
 80054c6:	438a      	bics	r2, r1
 80054c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a0b      	ldr	r2, [pc, #44]	; (80054fc <HAL_UARTEx_DisableFifoMode+0x70>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2288      	movs	r2, #136	; 0x88
 80054e4:	2120      	movs	r1, #32
 80054e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2284      	movs	r2, #132	; 0x84
 80054ec:	2100      	movs	r1, #0
 80054ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	dfffffff 	.word	0xdfffffff

08005500 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2284      	movs	r2, #132	; 0x84
 800550e:	5c9b      	ldrb	r3, [r3, r2]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e02e      	b.n	8005576 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2284      	movs	r2, #132	; 0x84
 800551c:	2101      	movs	r1, #1
 800551e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2288      	movs	r2, #136	; 0x88
 8005524:	2124      	movs	r1, #36	; 0x24
 8005526:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2101      	movs	r1, #1
 800553c:	438a      	bics	r2, r1
 800553e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	08d9      	lsrs	r1, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 f854 	bl	8005604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2288      	movs	r2, #136	; 0x88
 8005568:	2120      	movs	r1, #32
 800556a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2284      	movs	r2, #132	; 0x84
 8005570:	2100      	movs	r1, #0
 8005572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b004      	add	sp, #16
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2284      	movs	r2, #132	; 0x84
 800558e:	5c9b      	ldrb	r3, [r3, r2]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005594:	2302      	movs	r3, #2
 8005596:	e02f      	b.n	80055f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2284      	movs	r2, #132	; 0x84
 800559c:	2101      	movs	r1, #1
 800559e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2288      	movs	r2, #136	; 0x88
 80055a4:	2124      	movs	r1, #36	; 0x24
 80055a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2101      	movs	r1, #1
 80055bc:	438a      	bics	r2, r1
 80055be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	0019      	movs	r1, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0018      	movs	r0, r3
 80055da:	f000 f813 	bl	8005604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2288      	movs	r2, #136	; 0x88
 80055ea:	2120      	movs	r1, #32
 80055ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2284      	movs	r2, #132	; 0x84
 80055f2:	2100      	movs	r1, #0
 80055f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b004      	add	sp, #16
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	f1ffffff 	.word	0xf1ffffff

08005604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005610:	2b00      	cmp	r3, #0
 8005612:	d108      	bne.n	8005626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	226a      	movs	r2, #106	; 0x6a
 8005618:	2101      	movs	r1, #1
 800561a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2268      	movs	r2, #104	; 0x68
 8005620:	2101      	movs	r1, #1
 8005622:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005624:	e043      	b.n	80056ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005626:	260f      	movs	r6, #15
 8005628:	19bb      	adds	r3, r7, r6
 800562a:	2208      	movs	r2, #8
 800562c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800562e:	200e      	movs	r0, #14
 8005630:	183b      	adds	r3, r7, r0
 8005632:	2208      	movs	r2, #8
 8005634:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	0e5b      	lsrs	r3, r3, #25
 800563e:	b2da      	uxtb	r2, r3
 8005640:	240d      	movs	r4, #13
 8005642:	193b      	adds	r3, r7, r4
 8005644:	2107      	movs	r1, #7
 8005646:	400a      	ands	r2, r1
 8005648:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	0f5b      	lsrs	r3, r3, #29
 8005652:	b2da      	uxtb	r2, r3
 8005654:	250c      	movs	r5, #12
 8005656:	197b      	adds	r3, r7, r5
 8005658:	2107      	movs	r1, #7
 800565a:	400a      	ands	r2, r1
 800565c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800565e:	183b      	adds	r3, r7, r0
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	197a      	adds	r2, r7, r5
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	4914      	ldr	r1, [pc, #80]	; (80056b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005668:	5c8a      	ldrb	r2, [r1, r2]
 800566a:	435a      	muls	r2, r3
 800566c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800566e:	197b      	adds	r3, r7, r5
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	4a12      	ldr	r2, [pc, #72]	; (80056bc <UARTEx_SetNbDataToProcess+0xb8>)
 8005674:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005676:	0019      	movs	r1, r3
 8005678:	f7fa fdce 	bl	8000218 <__divsi3>
 800567c:	0003      	movs	r3, r0
 800567e:	b299      	uxth	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	226a      	movs	r2, #106	; 0x6a
 8005684:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005686:	19bb      	adds	r3, r7, r6
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	193a      	adds	r2, r7, r4
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	490a      	ldr	r1, [pc, #40]	; (80056b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005690:	5c8a      	ldrb	r2, [r1, r2]
 8005692:	435a      	muls	r2, r3
 8005694:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005696:	193b      	adds	r3, r7, r4
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	4a08      	ldr	r2, [pc, #32]	; (80056bc <UARTEx_SetNbDataToProcess+0xb8>)
 800569c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800569e:	0019      	movs	r1, r3
 80056a0:	f7fa fdba 	bl	8000218 <__divsi3>
 80056a4:	0003      	movs	r3, r0
 80056a6:	b299      	uxth	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2268      	movs	r2, #104	; 0x68
 80056ac:	5299      	strh	r1, [r3, r2]
}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b005      	add	sp, #20
 80056b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	080057fc 	.word	0x080057fc
 80056bc:	08005804 	.word	0x08005804

080056c0 <memset>:
 80056c0:	0003      	movs	r3, r0
 80056c2:	1882      	adds	r2, r0, r2
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d100      	bne.n	80056ca <memset+0xa>
 80056c8:	4770      	bx	lr
 80056ca:	7019      	strb	r1, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	e7f9      	b.n	80056c4 <memset+0x4>

080056d0 <__libc_init_array>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	2600      	movs	r6, #0
 80056d4:	4c0c      	ldr	r4, [pc, #48]	; (8005708 <__libc_init_array+0x38>)
 80056d6:	4d0d      	ldr	r5, [pc, #52]	; (800570c <__libc_init_array+0x3c>)
 80056d8:	1b64      	subs	r4, r4, r5
 80056da:	10a4      	asrs	r4, r4, #2
 80056dc:	42a6      	cmp	r6, r4
 80056de:	d109      	bne.n	80056f4 <__libc_init_array+0x24>
 80056e0:	2600      	movs	r6, #0
 80056e2:	f000 f819 	bl	8005718 <_init>
 80056e6:	4c0a      	ldr	r4, [pc, #40]	; (8005710 <__libc_init_array+0x40>)
 80056e8:	4d0a      	ldr	r5, [pc, #40]	; (8005714 <__libc_init_array+0x44>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	42a6      	cmp	r6, r4
 80056f0:	d105      	bne.n	80056fe <__libc_init_array+0x2e>
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	00b3      	lsls	r3, r6, #2
 80056f6:	58eb      	ldr	r3, [r5, r3]
 80056f8:	4798      	blx	r3
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7ee      	b.n	80056dc <__libc_init_array+0xc>
 80056fe:	00b3      	lsls	r3, r6, #2
 8005700:	58eb      	ldr	r3, [r5, r3]
 8005702:	4798      	blx	r3
 8005704:	3601      	adds	r6, #1
 8005706:	e7f2      	b.n	80056ee <__libc_init_array+0x1e>
 8005708:	08005814 	.word	0x08005814
 800570c:	08005814 	.word	0x08005814
 8005710:	08005818 	.word	0x08005818
 8005714:	08005814 	.word	0x08005814

08005718 <_init>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr

08005724 <_fini>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr
