
Barod_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000778c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007924  08007924  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800792c  0800792c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800792c  0800792c  0001792c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000014  08007948  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08007948  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001378d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cef  00000000  00000000  0003380c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00036500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d42  00000000  00000000  000375f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187f1  00000000  00000000  0003833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e18  00000000  00000000  00050b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cd97  00000000  00000000  00066943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ed0  00000000  00000000  001036dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001075ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007830 	.word	0x08007830

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08007830 	.word	0x08007830

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f824 	bl	800046c <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_d2uiz>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2200      	movs	r2, #0
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <__aeabi_d2uiz+0x38>)
 8000436:	0004      	movs	r4, r0
 8000438:	000d      	movs	r5, r1
 800043a:	f001 fb47 	bl	8001acc <__aeabi_dcmpge>
 800043e:	2800      	cmp	r0, #0
 8000440:	d104      	bne.n	800044c <__aeabi_d2uiz+0x1c>
 8000442:	0020      	movs	r0, r4
 8000444:	0029      	movs	r1, r5
 8000446:	f001 fa81 	bl	800194c <__aeabi_d2iz>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <__aeabi_d2uiz+0x38>)
 800044e:	2200      	movs	r2, #0
 8000450:	0020      	movs	r0, r4
 8000452:	0029      	movs	r1, r5
 8000454:	f000 fef8 	bl	8001248 <__aeabi_dsub>
 8000458:	f001 fa78 	bl	800194c <__aeabi_d2iz>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	061b      	lsls	r3, r3, #24
 8000460:	469c      	mov	ip, r3
 8000462:	4460      	add	r0, ip
 8000464:	e7f1      	b.n	800044a <__aeabi_d2uiz+0x1a>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	41e00000 	.word	0x41e00000

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	000d      	movs	r5, r1
 800047c:	4692      	mov	sl, r2
 800047e:	4699      	mov	r9, r3
 8000480:	b083      	sub	sp, #12
 8000482:	428b      	cmp	r3, r1
 8000484:	d830      	bhi.n	80004e8 <__udivmoddi4+0x7c>
 8000486:	d02d      	beq.n	80004e4 <__udivmoddi4+0x78>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f001 fb46 	bl	8001b1c <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f001 fb41 	bl	8001b1c <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	d434      	bmi.n	800050c <__udivmoddi4+0xa0>
 80004a2:	469b      	mov	fp, r3
 80004a4:	4653      	mov	r3, sl
 80004a6:	465a      	mov	r2, fp
 80004a8:	4093      	lsls	r3, r2
 80004aa:	4642      	mov	r2, r8
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4093      	lsls	r3, r2
 80004b2:	001e      	movs	r6, r3
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d83b      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80004b8:	42af      	cmp	r7, r5
 80004ba:	d100      	bne.n	80004be <__udivmoddi4+0x52>
 80004bc:	e079      	b.n	80005b2 <__udivmoddi4+0x146>
 80004be:	465b      	mov	r3, fp
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	41bd      	sbcs	r5, r7
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da00      	bge.n	80004ca <__udivmoddi4+0x5e>
 80004c8:	e076      	b.n	80005b8 <__udivmoddi4+0x14c>
 80004ca:	2200      	movs	r2, #0
 80004cc:	2300      	movs	r3, #0
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	2301      	movs	r3, #1
 80004d4:	465a      	mov	r2, fp
 80004d6:	4093      	lsls	r3, r2
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	4642      	mov	r2, r8
 80004de:	4093      	lsls	r3, r2
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	e029      	b.n	8000538 <__udivmoddi4+0xcc>
 80004e4:	4282      	cmp	r2, r0
 80004e6:	d9cf      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <__udivmoddi4+0x8e>
 80004f6:	601c      	str	r4, [r3, #0]
 80004f8:	605d      	str	r5, [r3, #4]
 80004fa:	9800      	ldr	r0, [sp, #0]
 80004fc:	9901      	ldr	r1, [sp, #4]
 80004fe:	b003      	add	sp, #12
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	46bb      	mov	fp, r7
 8000504:	46b2      	mov	sl, r6
 8000506:	46a9      	mov	r9, r5
 8000508:	46a0      	mov	r8, r4
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050c:	4642      	mov	r2, r8
 800050e:	469b      	mov	fp, r3
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	4652      	mov	r2, sl
 8000516:	40da      	lsrs	r2, r3
 8000518:	4641      	mov	r1, r8
 800051a:	0013      	movs	r3, r2
 800051c:	464a      	mov	r2, r9
 800051e:	408a      	lsls	r2, r1
 8000520:	0017      	movs	r7, r2
 8000522:	4642      	mov	r2, r8
 8000524:	431f      	orrs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d9c3      	bls.n	80004b8 <__udivmoddi4+0x4c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	4643      	mov	r3, r8
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0d8      	beq.n	80004f0 <__udivmoddi4+0x84>
 800053e:	07fb      	lsls	r3, r7, #31
 8000540:	0872      	lsrs	r2, r6, #1
 8000542:	431a      	orrs	r2, r3
 8000544:	4646      	mov	r6, r8
 8000546:	087b      	lsrs	r3, r7, #1
 8000548:	e00e      	b.n	8000568 <__udivmoddi4+0xfc>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d101      	bne.n	8000552 <__udivmoddi4+0xe6>
 800054e:	42a2      	cmp	r2, r4
 8000550:	d80c      	bhi.n	800056c <__udivmoddi4+0x100>
 8000552:	1aa4      	subs	r4, r4, r2
 8000554:	419d      	sbcs	r5, r3
 8000556:	2001      	movs	r0, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2100      	movs	r1, #0
 800055e:	3e01      	subs	r6, #1
 8000560:	1824      	adds	r4, r4, r0
 8000562:	414d      	adcs	r5, r1
 8000564:	2e00      	cmp	r6, #0
 8000566:	d006      	beq.n	8000576 <__udivmoddi4+0x10a>
 8000568:	42ab      	cmp	r3, r5
 800056a:	d9ee      	bls.n	800054a <__udivmoddi4+0xde>
 800056c:	3e01      	subs	r6, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2e00      	cmp	r6, #0
 8000574:	d1f8      	bne.n	8000568 <__udivmoddi4+0xfc>
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	465b      	mov	r3, fp
 800057c:	1900      	adds	r0, r0, r4
 800057e:	4169      	adcs	r1, r5
 8000580:	2b00      	cmp	r3, #0
 8000582:	db24      	blt.n	80005ce <__udivmoddi4+0x162>
 8000584:	002b      	movs	r3, r5
 8000586:	465a      	mov	r2, fp
 8000588:	4644      	mov	r4, r8
 800058a:	40d3      	lsrs	r3, r2
 800058c:	002a      	movs	r2, r5
 800058e:	40e2      	lsrs	r2, r4
 8000590:	001c      	movs	r4, r3
 8000592:	465b      	mov	r3, fp
 8000594:	0015      	movs	r5, r2
 8000596:	2b00      	cmp	r3, #0
 8000598:	db2a      	blt.n	80005f0 <__udivmoddi4+0x184>
 800059a:	0026      	movs	r6, r4
 800059c:	409e      	lsls	r6, r3
 800059e:	0033      	movs	r3, r6
 80005a0:	0026      	movs	r6, r4
 80005a2:	4647      	mov	r7, r8
 80005a4:	40be      	lsls	r6, r7
 80005a6:	0032      	movs	r2, r6
 80005a8:	1a80      	subs	r0, r0, r2
 80005aa:	4199      	sbcs	r1, r3
 80005ac:	9000      	str	r0, [sp, #0]
 80005ae:	9101      	str	r1, [sp, #4]
 80005b0:	e79e      	b.n	80004f0 <__udivmoddi4+0x84>
 80005b2:	42a3      	cmp	r3, r4
 80005b4:	d8bc      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80005b6:	e782      	b.n	80004be <__udivmoddi4+0x52>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	9100      	str	r1, [sp, #0]
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	2201      	movs	r2, #1
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	e785      	b.n	80004da <__udivmoddi4+0x6e>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	4646      	mov	r6, r8
 80005d8:	409a      	lsls	r2, r3
 80005da:	0023      	movs	r3, r4
 80005dc:	40f3      	lsrs	r3, r6
 80005de:	4644      	mov	r4, r8
 80005e0:	4313      	orrs	r3, r2
 80005e2:	002a      	movs	r2, r5
 80005e4:	40e2      	lsrs	r2, r4
 80005e6:	001c      	movs	r4, r3
 80005e8:	465b      	mov	r3, fp
 80005ea:	0015      	movs	r5, r2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dad4      	bge.n	800059a <__udivmoddi4+0x12e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	002f      	movs	r7, r5
 80005f4:	2320      	movs	r3, #32
 80005f6:	0026      	movs	r6, r4
 80005f8:	4097      	lsls	r7, r2
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	40de      	lsrs	r6, r3
 80005fe:	003b      	movs	r3, r7
 8000600:	4333      	orrs	r3, r6
 8000602:	e7cd      	b.n	80005a0 <__udivmoddi4+0x134>

08000604 <__aeabi_dadd>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	464f      	mov	r7, r9
 8000608:	4646      	mov	r6, r8
 800060a:	46d6      	mov	lr, sl
 800060c:	0004      	movs	r4, r0
 800060e:	b5c0      	push	{r6, r7, lr}
 8000610:	001f      	movs	r7, r3
 8000612:	030b      	lsls	r3, r1, #12
 8000614:	0010      	movs	r0, r2
 8000616:	004e      	lsls	r6, r1, #1
 8000618:	0a5b      	lsrs	r3, r3, #9
 800061a:	0fcd      	lsrs	r5, r1, #31
 800061c:	0f61      	lsrs	r1, r4, #29
 800061e:	007a      	lsls	r2, r7, #1
 8000620:	4319      	orrs	r1, r3
 8000622:	00e3      	lsls	r3, r4, #3
 8000624:	033c      	lsls	r4, r7, #12
 8000626:	0fff      	lsrs	r7, r7, #31
 8000628:	46bc      	mov	ip, r7
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	0f47      	lsrs	r7, r0, #29
 800062e:	4327      	orrs	r7, r4
 8000630:	0d76      	lsrs	r6, r6, #21
 8000632:	0d52      	lsrs	r2, r2, #21
 8000634:	00c0      	lsls	r0, r0, #3
 8000636:	46b9      	mov	r9, r7
 8000638:	4680      	mov	r8, r0
 800063a:	1ab7      	subs	r7, r6, r2
 800063c:	4565      	cmp	r5, ip
 800063e:	d100      	bne.n	8000642 <__aeabi_dadd+0x3e>
 8000640:	e09b      	b.n	800077a <__aeabi_dadd+0x176>
 8000642:	2f00      	cmp	r7, #0
 8000644:	dc00      	bgt.n	8000648 <__aeabi_dadd+0x44>
 8000646:	e084      	b.n	8000752 <__aeabi_dadd+0x14e>
 8000648:	2a00      	cmp	r2, #0
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x4a>
 800064c:	e0be      	b.n	80007cc <__aeabi_dadd+0x1c8>
 800064e:	4ac8      	ldr	r2, [pc, #800]	; (8000970 <__aeabi_dadd+0x36c>)
 8000650:	4296      	cmp	r6, r2
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x52>
 8000654:	e124      	b.n	80008a0 <__aeabi_dadd+0x29c>
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	464c      	mov	r4, r9
 800065a:	0412      	lsls	r2, r2, #16
 800065c:	4314      	orrs	r4, r2
 800065e:	46a1      	mov	r9, r4
 8000660:	2f38      	cmp	r7, #56	; 0x38
 8000662:	dd00      	ble.n	8000666 <__aeabi_dadd+0x62>
 8000664:	e167      	b.n	8000936 <__aeabi_dadd+0x332>
 8000666:	2f1f      	cmp	r7, #31
 8000668:	dd00      	ble.n	800066c <__aeabi_dadd+0x68>
 800066a:	e1d6      	b.n	8000a1a <__aeabi_dadd+0x416>
 800066c:	2220      	movs	r2, #32
 800066e:	464c      	mov	r4, r9
 8000670:	1bd2      	subs	r2, r2, r7
 8000672:	4094      	lsls	r4, r2
 8000674:	46a2      	mov	sl, r4
 8000676:	4644      	mov	r4, r8
 8000678:	40fc      	lsrs	r4, r7
 800067a:	0020      	movs	r0, r4
 800067c:	4654      	mov	r4, sl
 800067e:	4304      	orrs	r4, r0
 8000680:	4640      	mov	r0, r8
 8000682:	4090      	lsls	r0, r2
 8000684:	1e42      	subs	r2, r0, #1
 8000686:	4190      	sbcs	r0, r2
 8000688:	464a      	mov	r2, r9
 800068a:	40fa      	lsrs	r2, r7
 800068c:	4304      	orrs	r4, r0
 800068e:	1a89      	subs	r1, r1, r2
 8000690:	1b1c      	subs	r4, r3, r4
 8000692:	42a3      	cmp	r3, r4
 8000694:	4192      	sbcs	r2, r2
 8000696:	4252      	negs	r2, r2
 8000698:	1a8b      	subs	r3, r1, r2
 800069a:	469a      	mov	sl, r3
 800069c:	4653      	mov	r3, sl
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	d400      	bmi.n	80006a4 <__aeabi_dadd+0xa0>
 80006a2:	e0d4      	b.n	800084e <__aeabi_dadd+0x24a>
 80006a4:	4653      	mov	r3, sl
 80006a6:	025a      	lsls	r2, r3, #9
 80006a8:	0a53      	lsrs	r3, r2, #9
 80006aa:	469a      	mov	sl, r3
 80006ac:	4653      	mov	r3, sl
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0xb0>
 80006b2:	e104      	b.n	80008be <__aeabi_dadd+0x2ba>
 80006b4:	4650      	mov	r0, sl
 80006b6:	f001 fa13 	bl	8001ae0 <__clzsi2>
 80006ba:	0003      	movs	r3, r0
 80006bc:	3b08      	subs	r3, #8
 80006be:	2220      	movs	r2, #32
 80006c0:	0020      	movs	r0, r4
 80006c2:	1ad2      	subs	r2, r2, r3
 80006c4:	4651      	mov	r1, sl
 80006c6:	40d0      	lsrs	r0, r2
 80006c8:	4099      	lsls	r1, r3
 80006ca:	0002      	movs	r2, r0
 80006cc:	409c      	lsls	r4, r3
 80006ce:	430a      	orrs	r2, r1
 80006d0:	42b3      	cmp	r3, r6
 80006d2:	da00      	bge.n	80006d6 <__aeabi_dadd+0xd2>
 80006d4:	e102      	b.n	80008dc <__aeabi_dadd+0x2d8>
 80006d6:	1b9b      	subs	r3, r3, r6
 80006d8:	1c59      	adds	r1, r3, #1
 80006da:	291f      	cmp	r1, #31
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_dadd+0xdc>
 80006de:	e0a7      	b.n	8000830 <__aeabi_dadd+0x22c>
 80006e0:	2320      	movs	r3, #32
 80006e2:	0010      	movs	r0, r2
 80006e4:	0026      	movs	r6, r4
 80006e6:	1a5b      	subs	r3, r3, r1
 80006e8:	409c      	lsls	r4, r3
 80006ea:	4098      	lsls	r0, r3
 80006ec:	40ce      	lsrs	r6, r1
 80006ee:	40ca      	lsrs	r2, r1
 80006f0:	1e63      	subs	r3, r4, #1
 80006f2:	419c      	sbcs	r4, r3
 80006f4:	4330      	orrs	r0, r6
 80006f6:	4692      	mov	sl, r2
 80006f8:	2600      	movs	r6, #0
 80006fa:	4304      	orrs	r4, r0
 80006fc:	0763      	lsls	r3, r4, #29
 80006fe:	d009      	beq.n	8000714 <__aeabi_dadd+0x110>
 8000700:	230f      	movs	r3, #15
 8000702:	4023      	ands	r3, r4
 8000704:	2b04      	cmp	r3, #4
 8000706:	d005      	beq.n	8000714 <__aeabi_dadd+0x110>
 8000708:	1d23      	adds	r3, r4, #4
 800070a:	42a3      	cmp	r3, r4
 800070c:	41a4      	sbcs	r4, r4
 800070e:	4264      	negs	r4, r4
 8000710:	44a2      	add	sl, r4
 8000712:	001c      	movs	r4, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0x118>
 800071a:	e09b      	b.n	8000854 <__aeabi_dadd+0x250>
 800071c:	4b94      	ldr	r3, [pc, #592]	; (8000970 <__aeabi_dadd+0x36c>)
 800071e:	3601      	adds	r6, #1
 8000720:	429e      	cmp	r6, r3
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x122>
 8000724:	e0b8      	b.n	8000898 <__aeabi_dadd+0x294>
 8000726:	4653      	mov	r3, sl
 8000728:	4992      	ldr	r1, [pc, #584]	; (8000974 <__aeabi_dadd+0x370>)
 800072a:	08e4      	lsrs	r4, r4, #3
 800072c:	400b      	ands	r3, r1
 800072e:	0019      	movs	r1, r3
 8000730:	075b      	lsls	r3, r3, #29
 8000732:	4323      	orrs	r3, r4
 8000734:	0572      	lsls	r2, r6, #21
 8000736:	024c      	lsls	r4, r1, #9
 8000738:	0b24      	lsrs	r4, r4, #12
 800073a:	0d52      	lsrs	r2, r2, #21
 800073c:	0512      	lsls	r2, r2, #20
 800073e:	07ed      	lsls	r5, r5, #31
 8000740:	4322      	orrs	r2, r4
 8000742:	432a      	orrs	r2, r5
 8000744:	0018      	movs	r0, r3
 8000746:	0011      	movs	r1, r2
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	2f00      	cmp	r7, #0
 8000754:	d048      	beq.n	80007e8 <__aeabi_dadd+0x1e4>
 8000756:	1b97      	subs	r7, r2, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d000      	beq.n	800075e <__aeabi_dadd+0x15a>
 800075c:	e10e      	b.n	800097c <__aeabi_dadd+0x378>
 800075e:	000c      	movs	r4, r1
 8000760:	431c      	orrs	r4, r3
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x162>
 8000764:	e1b7      	b.n	8000ad6 <__aeabi_dadd+0x4d2>
 8000766:	1e7c      	subs	r4, r7, #1
 8000768:	2f01      	cmp	r7, #1
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x16a>
 800076c:	e226      	b.n	8000bbc <__aeabi_dadd+0x5b8>
 800076e:	4d80      	ldr	r5, [pc, #512]	; (8000970 <__aeabi_dadd+0x36c>)
 8000770:	42af      	cmp	r7, r5
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x172>
 8000774:	e1d5      	b.n	8000b22 <__aeabi_dadd+0x51e>
 8000776:	0027      	movs	r7, r4
 8000778:	e107      	b.n	800098a <__aeabi_dadd+0x386>
 800077a:	2f00      	cmp	r7, #0
 800077c:	dc00      	bgt.n	8000780 <__aeabi_dadd+0x17c>
 800077e:	e0b2      	b.n	80008e6 <__aeabi_dadd+0x2e2>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d047      	beq.n	8000814 <__aeabi_dadd+0x210>
 8000784:	4a7a      	ldr	r2, [pc, #488]	; (8000970 <__aeabi_dadd+0x36c>)
 8000786:	4296      	cmp	r6, r2
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x188>
 800078a:	e089      	b.n	80008a0 <__aeabi_dadd+0x29c>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	464c      	mov	r4, r9
 8000790:	0412      	lsls	r2, r2, #16
 8000792:	4314      	orrs	r4, r2
 8000794:	46a1      	mov	r9, r4
 8000796:	2f38      	cmp	r7, #56	; 0x38
 8000798:	dc6b      	bgt.n	8000872 <__aeabi_dadd+0x26e>
 800079a:	2f1f      	cmp	r7, #31
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dadd+0x19c>
 800079e:	e16e      	b.n	8000a7e <__aeabi_dadd+0x47a>
 80007a0:	003a      	movs	r2, r7
 80007a2:	4648      	mov	r0, r9
 80007a4:	3a20      	subs	r2, #32
 80007a6:	40d0      	lsrs	r0, r2
 80007a8:	4684      	mov	ip, r0
 80007aa:	2f20      	cmp	r7, #32
 80007ac:	d007      	beq.n	80007be <__aeabi_dadd+0x1ba>
 80007ae:	2240      	movs	r2, #64	; 0x40
 80007b0:	4648      	mov	r0, r9
 80007b2:	1bd2      	subs	r2, r2, r7
 80007b4:	4090      	lsls	r0, r2
 80007b6:	0002      	movs	r2, r0
 80007b8:	4640      	mov	r0, r8
 80007ba:	4310      	orrs	r0, r2
 80007bc:	4680      	mov	r8, r0
 80007be:	4640      	mov	r0, r8
 80007c0:	1e42      	subs	r2, r0, #1
 80007c2:	4190      	sbcs	r0, r2
 80007c4:	4662      	mov	r2, ip
 80007c6:	0004      	movs	r4, r0
 80007c8:	4314      	orrs	r4, r2
 80007ca:	e057      	b.n	800087c <__aeabi_dadd+0x278>
 80007cc:	464a      	mov	r2, r9
 80007ce:	4302      	orrs	r2, r0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x1d0>
 80007d2:	e103      	b.n	80009dc <__aeabi_dadd+0x3d8>
 80007d4:	1e7a      	subs	r2, r7, #1
 80007d6:	2f01      	cmp	r7, #1
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x1d8>
 80007da:	e193      	b.n	8000b04 <__aeabi_dadd+0x500>
 80007dc:	4c64      	ldr	r4, [pc, #400]	; (8000970 <__aeabi_dadd+0x36c>)
 80007de:	42a7      	cmp	r7, r4
 80007e0:	d100      	bne.n	80007e4 <__aeabi_dadd+0x1e0>
 80007e2:	e18a      	b.n	8000afa <__aeabi_dadd+0x4f6>
 80007e4:	0017      	movs	r7, r2
 80007e6:	e73b      	b.n	8000660 <__aeabi_dadd+0x5c>
 80007e8:	4c63      	ldr	r4, [pc, #396]	; (8000978 <__aeabi_dadd+0x374>)
 80007ea:	1c72      	adds	r2, r6, #1
 80007ec:	4222      	tst	r2, r4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x1ee>
 80007f0:	e0e0      	b.n	80009b4 <__aeabi_dadd+0x3b0>
 80007f2:	000a      	movs	r2, r1
 80007f4:	431a      	orrs	r2, r3
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d000      	beq.n	80007fc <__aeabi_dadd+0x1f8>
 80007fa:	e174      	b.n	8000ae6 <__aeabi_dadd+0x4e2>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x1fe>
 8000800:	e1d0      	b.n	8000ba4 <__aeabi_dadd+0x5a0>
 8000802:	464a      	mov	r2, r9
 8000804:	4302      	orrs	r2, r0
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x206>
 8000808:	e1e3      	b.n	8000bd2 <__aeabi_dadd+0x5ce>
 800080a:	074a      	lsls	r2, r1, #29
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	4313      	orrs	r3, r2
 8000810:	08c9      	lsrs	r1, r1, #3
 8000812:	e029      	b.n	8000868 <__aeabi_dadd+0x264>
 8000814:	464a      	mov	r2, r9
 8000816:	4302      	orrs	r2, r0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x218>
 800081a:	e17d      	b.n	8000b18 <__aeabi_dadd+0x514>
 800081c:	1e7a      	subs	r2, r7, #1
 800081e:	2f01      	cmp	r7, #1
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0x220>
 8000822:	e0e0      	b.n	80009e6 <__aeabi_dadd+0x3e2>
 8000824:	4c52      	ldr	r4, [pc, #328]	; (8000970 <__aeabi_dadd+0x36c>)
 8000826:	42a7      	cmp	r7, r4
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x228>
 800082a:	e166      	b.n	8000afa <__aeabi_dadd+0x4f6>
 800082c:	0017      	movs	r7, r2
 800082e:	e7b2      	b.n	8000796 <__aeabi_dadd+0x192>
 8000830:	0010      	movs	r0, r2
 8000832:	3b1f      	subs	r3, #31
 8000834:	40d8      	lsrs	r0, r3
 8000836:	2920      	cmp	r1, #32
 8000838:	d003      	beq.n	8000842 <__aeabi_dadd+0x23e>
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	409a      	lsls	r2, r3
 8000840:	4314      	orrs	r4, r2
 8000842:	1e63      	subs	r3, r4, #1
 8000844:	419c      	sbcs	r4, r3
 8000846:	2300      	movs	r3, #0
 8000848:	2600      	movs	r6, #0
 800084a:	469a      	mov	sl, r3
 800084c:	4304      	orrs	r4, r0
 800084e:	0763      	lsls	r3, r4, #29
 8000850:	d000      	beq.n	8000854 <__aeabi_dadd+0x250>
 8000852:	e755      	b.n	8000700 <__aeabi_dadd+0xfc>
 8000854:	4652      	mov	r2, sl
 8000856:	08e3      	lsrs	r3, r4, #3
 8000858:	0752      	lsls	r2, r2, #29
 800085a:	4313      	orrs	r3, r2
 800085c:	4652      	mov	r2, sl
 800085e:	0037      	movs	r7, r6
 8000860:	08d1      	lsrs	r1, r2, #3
 8000862:	4a43      	ldr	r2, [pc, #268]	; (8000970 <__aeabi_dadd+0x36c>)
 8000864:	4297      	cmp	r7, r2
 8000866:	d01f      	beq.n	80008a8 <__aeabi_dadd+0x2a4>
 8000868:	0309      	lsls	r1, r1, #12
 800086a:	057a      	lsls	r2, r7, #21
 800086c:	0b0c      	lsrs	r4, r1, #12
 800086e:	0d52      	lsrs	r2, r2, #21
 8000870:	e764      	b.n	800073c <__aeabi_dadd+0x138>
 8000872:	4642      	mov	r2, r8
 8000874:	464c      	mov	r4, r9
 8000876:	4314      	orrs	r4, r2
 8000878:	1e62      	subs	r2, r4, #1
 800087a:	4194      	sbcs	r4, r2
 800087c:	18e4      	adds	r4, r4, r3
 800087e:	429c      	cmp	r4, r3
 8000880:	4192      	sbcs	r2, r2
 8000882:	4252      	negs	r2, r2
 8000884:	4692      	mov	sl, r2
 8000886:	448a      	add	sl, r1
 8000888:	4653      	mov	r3, sl
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	d5df      	bpl.n	800084e <__aeabi_dadd+0x24a>
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <__aeabi_dadd+0x36c>)
 8000890:	3601      	adds	r6, #1
 8000892:	429e      	cmp	r6, r3
 8000894:	d000      	beq.n	8000898 <__aeabi_dadd+0x294>
 8000896:	e0b3      	b.n	8000a00 <__aeabi_dadd+0x3fc>
 8000898:	0032      	movs	r2, r6
 800089a:	2400      	movs	r4, #0
 800089c:	2300      	movs	r3, #0
 800089e:	e74d      	b.n	800073c <__aeabi_dadd+0x138>
 80008a0:	074a      	lsls	r2, r1, #29
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	08c9      	lsrs	r1, r1, #3
 80008a8:	001a      	movs	r2, r3
 80008aa:	430a      	orrs	r2, r1
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x2ac>
 80008ae:	e200      	b.n	8000cb2 <__aeabi_dadd+0x6ae>
 80008b0:	2480      	movs	r4, #128	; 0x80
 80008b2:	0324      	lsls	r4, r4, #12
 80008b4:	430c      	orrs	r4, r1
 80008b6:	0324      	lsls	r4, r4, #12
 80008b8:	4a2d      	ldr	r2, [pc, #180]	; (8000970 <__aeabi_dadd+0x36c>)
 80008ba:	0b24      	lsrs	r4, r4, #12
 80008bc:	e73e      	b.n	800073c <__aeabi_dadd+0x138>
 80008be:	0020      	movs	r0, r4
 80008c0:	f001 f90e 	bl	8001ae0 <__clzsi2>
 80008c4:	0003      	movs	r3, r0
 80008c6:	3318      	adds	r3, #24
 80008c8:	2b1f      	cmp	r3, #31
 80008ca:	dc00      	bgt.n	80008ce <__aeabi_dadd+0x2ca>
 80008cc:	e6f7      	b.n	80006be <__aeabi_dadd+0xba>
 80008ce:	0022      	movs	r2, r4
 80008d0:	3808      	subs	r0, #8
 80008d2:	4082      	lsls	r2, r0
 80008d4:	2400      	movs	r4, #0
 80008d6:	42b3      	cmp	r3, r6
 80008d8:	db00      	blt.n	80008dc <__aeabi_dadd+0x2d8>
 80008da:	e6fc      	b.n	80006d6 <__aeabi_dadd+0xd2>
 80008dc:	1af6      	subs	r6, r6, r3
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <__aeabi_dadd+0x370>)
 80008e0:	401a      	ands	r2, r3
 80008e2:	4692      	mov	sl, r2
 80008e4:	e70a      	b.n	80006fc <__aeabi_dadd+0xf8>
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d02b      	beq.n	8000942 <__aeabi_dadd+0x33e>
 80008ea:	1b97      	subs	r7, r2, r6
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x2ee>
 80008f0:	e0b8      	b.n	8000a64 <__aeabi_dadd+0x460>
 80008f2:	4c1f      	ldr	r4, [pc, #124]	; (8000970 <__aeabi_dadd+0x36c>)
 80008f4:	42a2      	cmp	r2, r4
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x2f6>
 80008f8:	e11c      	b.n	8000b34 <__aeabi_dadd+0x530>
 80008fa:	2480      	movs	r4, #128	; 0x80
 80008fc:	0424      	lsls	r4, r4, #16
 80008fe:	4321      	orrs	r1, r4
 8000900:	2f38      	cmp	r7, #56	; 0x38
 8000902:	dd00      	ble.n	8000906 <__aeabi_dadd+0x302>
 8000904:	e11e      	b.n	8000b44 <__aeabi_dadd+0x540>
 8000906:	2f1f      	cmp	r7, #31
 8000908:	dd00      	ble.n	800090c <__aeabi_dadd+0x308>
 800090a:	e19e      	b.n	8000c4a <__aeabi_dadd+0x646>
 800090c:	2620      	movs	r6, #32
 800090e:	000c      	movs	r4, r1
 8000910:	1bf6      	subs	r6, r6, r7
 8000912:	0018      	movs	r0, r3
 8000914:	40b3      	lsls	r3, r6
 8000916:	40b4      	lsls	r4, r6
 8000918:	40f8      	lsrs	r0, r7
 800091a:	1e5e      	subs	r6, r3, #1
 800091c:	41b3      	sbcs	r3, r6
 800091e:	40f9      	lsrs	r1, r7
 8000920:	4304      	orrs	r4, r0
 8000922:	431c      	orrs	r4, r3
 8000924:	4489      	add	r9, r1
 8000926:	4444      	add	r4, r8
 8000928:	4544      	cmp	r4, r8
 800092a:	419b      	sbcs	r3, r3
 800092c:	425b      	negs	r3, r3
 800092e:	444b      	add	r3, r9
 8000930:	469a      	mov	sl, r3
 8000932:	0016      	movs	r6, r2
 8000934:	e7a8      	b.n	8000888 <__aeabi_dadd+0x284>
 8000936:	4642      	mov	r2, r8
 8000938:	464c      	mov	r4, r9
 800093a:	4314      	orrs	r4, r2
 800093c:	1e62      	subs	r2, r4, #1
 800093e:	4194      	sbcs	r4, r2
 8000940:	e6a6      	b.n	8000690 <__aeabi_dadd+0x8c>
 8000942:	4c0d      	ldr	r4, [pc, #52]	; (8000978 <__aeabi_dadd+0x374>)
 8000944:	1c72      	adds	r2, r6, #1
 8000946:	4222      	tst	r2, r4
 8000948:	d000      	beq.n	800094c <__aeabi_dadd+0x348>
 800094a:	e0a8      	b.n	8000a9e <__aeabi_dadd+0x49a>
 800094c:	000a      	movs	r2, r1
 800094e:	431a      	orrs	r2, r3
 8000950:	2e00      	cmp	r6, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_dadd+0x352>
 8000954:	e10a      	b.n	8000b6c <__aeabi_dadd+0x568>
 8000956:	2a00      	cmp	r2, #0
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x358>
 800095a:	e15e      	b.n	8000c1a <__aeabi_dadd+0x616>
 800095c:	464a      	mov	r2, r9
 800095e:	4302      	orrs	r2, r0
 8000960:	d000      	beq.n	8000964 <__aeabi_dadd+0x360>
 8000962:	e161      	b.n	8000c28 <__aeabi_dadd+0x624>
 8000964:	074a      	lsls	r2, r1, #29
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	4313      	orrs	r3, r2
 800096a:	08c9      	lsrs	r1, r1, #3
 800096c:	e77c      	b.n	8000868 <__aeabi_dadd+0x264>
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	000007ff 	.word	0x000007ff
 8000974:	ff7fffff 	.word	0xff7fffff
 8000978:	000007fe 	.word	0x000007fe
 800097c:	4ccf      	ldr	r4, [pc, #828]	; (8000cbc <__aeabi_dadd+0x6b8>)
 800097e:	42a2      	cmp	r2, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x380>
 8000982:	e0ce      	b.n	8000b22 <__aeabi_dadd+0x51e>
 8000984:	2480      	movs	r4, #128	; 0x80
 8000986:	0424      	lsls	r4, r4, #16
 8000988:	4321      	orrs	r1, r4
 800098a:	2f38      	cmp	r7, #56	; 0x38
 800098c:	dc5b      	bgt.n	8000a46 <__aeabi_dadd+0x442>
 800098e:	2f1f      	cmp	r7, #31
 8000990:	dd00      	ble.n	8000994 <__aeabi_dadd+0x390>
 8000992:	e0dc      	b.n	8000b4e <__aeabi_dadd+0x54a>
 8000994:	2520      	movs	r5, #32
 8000996:	000c      	movs	r4, r1
 8000998:	1bed      	subs	r5, r5, r7
 800099a:	001e      	movs	r6, r3
 800099c:	40ab      	lsls	r3, r5
 800099e:	40ac      	lsls	r4, r5
 80009a0:	40fe      	lsrs	r6, r7
 80009a2:	1e5d      	subs	r5, r3, #1
 80009a4:	41ab      	sbcs	r3, r5
 80009a6:	4334      	orrs	r4, r6
 80009a8:	40f9      	lsrs	r1, r7
 80009aa:	431c      	orrs	r4, r3
 80009ac:	464b      	mov	r3, r9
 80009ae:	1a5b      	subs	r3, r3, r1
 80009b0:	4699      	mov	r9, r3
 80009b2:	e04c      	b.n	8000a4e <__aeabi_dadd+0x44a>
 80009b4:	464a      	mov	r2, r9
 80009b6:	1a1c      	subs	r4, r3, r0
 80009b8:	1a88      	subs	r0, r1, r2
 80009ba:	42a3      	cmp	r3, r4
 80009bc:	4192      	sbcs	r2, r2
 80009be:	4252      	negs	r2, r2
 80009c0:	4692      	mov	sl, r2
 80009c2:	0002      	movs	r2, r0
 80009c4:	4650      	mov	r0, sl
 80009c6:	1a12      	subs	r2, r2, r0
 80009c8:	4692      	mov	sl, r2
 80009ca:	0212      	lsls	r2, r2, #8
 80009cc:	d478      	bmi.n	8000ac0 <__aeabi_dadd+0x4bc>
 80009ce:	4653      	mov	r3, sl
 80009d0:	4323      	orrs	r3, r4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x3d2>
 80009d4:	e66a      	b.n	80006ac <__aeabi_dadd+0xa8>
 80009d6:	2100      	movs	r1, #0
 80009d8:	2500      	movs	r5, #0
 80009da:	e745      	b.n	8000868 <__aeabi_dadd+0x264>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e73d      	b.n	8000862 <__aeabi_dadd+0x25e>
 80009e6:	181c      	adds	r4, r3, r0
 80009e8:	429c      	cmp	r4, r3
 80009ea:	419b      	sbcs	r3, r3
 80009ec:	4449      	add	r1, r9
 80009ee:	468a      	mov	sl, r1
 80009f0:	425b      	negs	r3, r3
 80009f2:	449a      	add	sl, r3
 80009f4:	4653      	mov	r3, sl
 80009f6:	2601      	movs	r6, #1
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	d400      	bmi.n	80009fe <__aeabi_dadd+0x3fa>
 80009fc:	e727      	b.n	800084e <__aeabi_dadd+0x24a>
 80009fe:	2602      	movs	r6, #2
 8000a00:	4652      	mov	r2, sl
 8000a02:	4baf      	ldr	r3, [pc, #700]	; (8000cc0 <__aeabi_dadd+0x6bc>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	401a      	ands	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	4021      	ands	r1, r4
 8000a0c:	0862      	lsrs	r2, r4, #1
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	07dc      	lsls	r4, r3, #31
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	469a      	mov	sl, r3
 8000a16:	4314      	orrs	r4, r2
 8000a18:	e670      	b.n	80006fc <__aeabi_dadd+0xf8>
 8000a1a:	003a      	movs	r2, r7
 8000a1c:	464c      	mov	r4, r9
 8000a1e:	3a20      	subs	r2, #32
 8000a20:	40d4      	lsrs	r4, r2
 8000a22:	46a4      	mov	ip, r4
 8000a24:	2f20      	cmp	r7, #32
 8000a26:	d007      	beq.n	8000a38 <__aeabi_dadd+0x434>
 8000a28:	2240      	movs	r2, #64	; 0x40
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	1bd2      	subs	r2, r2, r7
 8000a2e:	4090      	lsls	r0, r2
 8000a30:	0002      	movs	r2, r0
 8000a32:	4640      	mov	r0, r8
 8000a34:	4310      	orrs	r0, r2
 8000a36:	4680      	mov	r8, r0
 8000a38:	4640      	mov	r0, r8
 8000a3a:	1e42      	subs	r2, r0, #1
 8000a3c:	4190      	sbcs	r0, r2
 8000a3e:	4662      	mov	r2, ip
 8000a40:	0004      	movs	r4, r0
 8000a42:	4314      	orrs	r4, r2
 8000a44:	e624      	b.n	8000690 <__aeabi_dadd+0x8c>
 8000a46:	4319      	orrs	r1, r3
 8000a48:	000c      	movs	r4, r1
 8000a4a:	1e63      	subs	r3, r4, #1
 8000a4c:	419c      	sbcs	r4, r3
 8000a4e:	4643      	mov	r3, r8
 8000a50:	1b1c      	subs	r4, r3, r4
 8000a52:	45a0      	cmp	r8, r4
 8000a54:	419b      	sbcs	r3, r3
 8000a56:	4649      	mov	r1, r9
 8000a58:	425b      	negs	r3, r3
 8000a5a:	1acb      	subs	r3, r1, r3
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	4665      	mov	r5, ip
 8000a60:	0016      	movs	r6, r2
 8000a62:	e61b      	b.n	800069c <__aeabi_dadd+0x98>
 8000a64:	000c      	movs	r4, r1
 8000a66:	431c      	orrs	r4, r3
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x468>
 8000a6a:	e0c7      	b.n	8000bfc <__aeabi_dadd+0x5f8>
 8000a6c:	1e7c      	subs	r4, r7, #1
 8000a6e:	2f01      	cmp	r7, #1
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dadd+0x470>
 8000a72:	e0f9      	b.n	8000c68 <__aeabi_dadd+0x664>
 8000a74:	4e91      	ldr	r6, [pc, #580]	; (8000cbc <__aeabi_dadd+0x6b8>)
 8000a76:	42b7      	cmp	r7, r6
 8000a78:	d05c      	beq.n	8000b34 <__aeabi_dadd+0x530>
 8000a7a:	0027      	movs	r7, r4
 8000a7c:	e740      	b.n	8000900 <__aeabi_dadd+0x2fc>
 8000a7e:	2220      	movs	r2, #32
 8000a80:	464c      	mov	r4, r9
 8000a82:	4640      	mov	r0, r8
 8000a84:	1bd2      	subs	r2, r2, r7
 8000a86:	4094      	lsls	r4, r2
 8000a88:	40f8      	lsrs	r0, r7
 8000a8a:	4304      	orrs	r4, r0
 8000a8c:	4640      	mov	r0, r8
 8000a8e:	4090      	lsls	r0, r2
 8000a90:	1e42      	subs	r2, r0, #1
 8000a92:	4190      	sbcs	r0, r2
 8000a94:	464a      	mov	r2, r9
 8000a96:	40fa      	lsrs	r2, r7
 8000a98:	4304      	orrs	r4, r0
 8000a9a:	1889      	adds	r1, r1, r2
 8000a9c:	e6ee      	b.n	800087c <__aeabi_dadd+0x278>
 8000a9e:	4c87      	ldr	r4, [pc, #540]	; (8000cbc <__aeabi_dadd+0x6b8>)
 8000aa0:	42a2      	cmp	r2, r4
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x4a2>
 8000aa4:	e6f9      	b.n	800089a <__aeabi_dadd+0x296>
 8000aa6:	1818      	adds	r0, r3, r0
 8000aa8:	4298      	cmp	r0, r3
 8000aaa:	419b      	sbcs	r3, r3
 8000aac:	4449      	add	r1, r9
 8000aae:	425b      	negs	r3, r3
 8000ab0:	18cb      	adds	r3, r1, r3
 8000ab2:	07dc      	lsls	r4, r3, #31
 8000ab4:	0840      	lsrs	r0, r0, #1
 8000ab6:	085b      	lsrs	r3, r3, #1
 8000ab8:	469a      	mov	sl, r3
 8000aba:	0016      	movs	r6, r2
 8000abc:	4304      	orrs	r4, r0
 8000abe:	e6c6      	b.n	800084e <__aeabi_dadd+0x24a>
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	1ad4      	subs	r4, r2, r3
 8000ac4:	45a0      	cmp	r8, r4
 8000ac6:	4180      	sbcs	r0, r0
 8000ac8:	464b      	mov	r3, r9
 8000aca:	4240      	negs	r0, r0
 8000acc:	1a59      	subs	r1, r3, r1
 8000ace:	1a0b      	subs	r3, r1, r0
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	4665      	mov	r5, ip
 8000ad4:	e5ea      	b.n	80006ac <__aeabi_dadd+0xa8>
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	464a      	mov	r2, r9
 8000ada:	08c0      	lsrs	r0, r0, #3
 8000adc:	075b      	lsls	r3, r3, #29
 8000ade:	4665      	mov	r5, ip
 8000ae0:	4303      	orrs	r3, r0
 8000ae2:	08d1      	lsrs	r1, r2, #3
 8000ae4:	e6bd      	b.n	8000862 <__aeabi_dadd+0x25e>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d000      	beq.n	8000aec <__aeabi_dadd+0x4e8>
 8000aea:	e08e      	b.n	8000c0a <__aeabi_dadd+0x606>
 8000aec:	464b      	mov	r3, r9
 8000aee:	4303      	orrs	r3, r0
 8000af0:	d117      	bne.n	8000b22 <__aeabi_dadd+0x51e>
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	2500      	movs	r5, #0
 8000af6:	0309      	lsls	r1, r1, #12
 8000af8:	e6da      	b.n	80008b0 <__aeabi_dadd+0x2ac>
 8000afa:	074a      	lsls	r2, r1, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	08c9      	lsrs	r1, r1, #3
 8000b02:	e6d1      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000b04:	1a1c      	subs	r4, r3, r0
 8000b06:	464a      	mov	r2, r9
 8000b08:	42a3      	cmp	r3, r4
 8000b0a:	419b      	sbcs	r3, r3
 8000b0c:	1a89      	subs	r1, r1, r2
 8000b0e:	425b      	negs	r3, r3
 8000b10:	1acb      	subs	r3, r1, r3
 8000b12:	469a      	mov	sl, r3
 8000b14:	2601      	movs	r6, #1
 8000b16:	e5c1      	b.n	800069c <__aeabi_dadd+0x98>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e69f      	b.n	8000862 <__aeabi_dadd+0x25e>
 8000b22:	4643      	mov	r3, r8
 8000b24:	08d8      	lsrs	r0, r3, #3
 8000b26:	464b      	mov	r3, r9
 8000b28:	464a      	mov	r2, r9
 8000b2a:	075b      	lsls	r3, r3, #29
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	4303      	orrs	r3, r0
 8000b30:	08d1      	lsrs	r1, r2, #3
 8000b32:	e6b9      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000b34:	4643      	mov	r3, r8
 8000b36:	08d8      	lsrs	r0, r3, #3
 8000b38:	464b      	mov	r3, r9
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	075b      	lsls	r3, r3, #29
 8000b3e:	4303      	orrs	r3, r0
 8000b40:	08d1      	lsrs	r1, r2, #3
 8000b42:	e6b1      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000b44:	4319      	orrs	r1, r3
 8000b46:	000c      	movs	r4, r1
 8000b48:	1e63      	subs	r3, r4, #1
 8000b4a:	419c      	sbcs	r4, r3
 8000b4c:	e6eb      	b.n	8000926 <__aeabi_dadd+0x322>
 8000b4e:	003c      	movs	r4, r7
 8000b50:	000d      	movs	r5, r1
 8000b52:	3c20      	subs	r4, #32
 8000b54:	40e5      	lsrs	r5, r4
 8000b56:	2f20      	cmp	r7, #32
 8000b58:	d003      	beq.n	8000b62 <__aeabi_dadd+0x55e>
 8000b5a:	2440      	movs	r4, #64	; 0x40
 8000b5c:	1be4      	subs	r4, r4, r7
 8000b5e:	40a1      	lsls	r1, r4
 8000b60:	430b      	orrs	r3, r1
 8000b62:	001c      	movs	r4, r3
 8000b64:	1e63      	subs	r3, r4, #1
 8000b66:	419c      	sbcs	r4, r3
 8000b68:	432c      	orrs	r4, r5
 8000b6a:	e770      	b.n	8000a4e <__aeabi_dadd+0x44a>
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d0e1      	beq.n	8000b34 <__aeabi_dadd+0x530>
 8000b70:	464a      	mov	r2, r9
 8000b72:	4302      	orrs	r2, r0
 8000b74:	d0c1      	beq.n	8000afa <__aeabi_dadd+0x4f6>
 8000b76:	074a      	lsls	r2, r1, #29
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	08c9      	lsrs	r1, r1, #3
 8000b80:	0312      	lsls	r2, r2, #12
 8000b82:	4211      	tst	r1, r2
 8000b84:	d008      	beq.n	8000b98 <__aeabi_dadd+0x594>
 8000b86:	4648      	mov	r0, r9
 8000b88:	08c4      	lsrs	r4, r0, #3
 8000b8a:	4214      	tst	r4, r2
 8000b8c:	d104      	bne.n	8000b98 <__aeabi_dadd+0x594>
 8000b8e:	4643      	mov	r3, r8
 8000b90:	0021      	movs	r1, r4
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	0742      	lsls	r2, r0, #29
 8000b96:	4313      	orrs	r3, r2
 8000b98:	0f5a      	lsrs	r2, r3, #29
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	0752      	lsls	r2, r2, #29
 8000b9e:	08db      	lsrs	r3, r3, #3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	e681      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x5a8>
 8000baa:	e714      	b.n	80009d6 <__aeabi_dadd+0x3d2>
 8000bac:	464b      	mov	r3, r9
 8000bae:	464a      	mov	r2, r9
 8000bb0:	08c0      	lsrs	r0, r0, #3
 8000bb2:	075b      	lsls	r3, r3, #29
 8000bb4:	4665      	mov	r5, ip
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e655      	b.n	8000868 <__aeabi_dadd+0x264>
 8000bbc:	1ac4      	subs	r4, r0, r3
 8000bbe:	45a0      	cmp	r8, r4
 8000bc0:	4180      	sbcs	r0, r0
 8000bc2:	464b      	mov	r3, r9
 8000bc4:	4240      	negs	r0, r0
 8000bc6:	1a59      	subs	r1, r3, r1
 8000bc8:	1a0b      	subs	r3, r1, r0
 8000bca:	469a      	mov	sl, r3
 8000bcc:	4665      	mov	r5, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	e564      	b.n	800069c <__aeabi_dadd+0x98>
 8000bd2:	1a1c      	subs	r4, r3, r0
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	42a3      	cmp	r3, r4
 8000bd8:	4180      	sbcs	r0, r0
 8000bda:	1a8a      	subs	r2, r1, r2
 8000bdc:	4240      	negs	r0, r0
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	4692      	mov	sl, r2
 8000be2:	0212      	lsls	r2, r2, #8
 8000be4:	d549      	bpl.n	8000c7a <__aeabi_dadd+0x676>
 8000be6:	4642      	mov	r2, r8
 8000be8:	1ad4      	subs	r4, r2, r3
 8000bea:	45a0      	cmp	r8, r4
 8000bec:	4180      	sbcs	r0, r0
 8000bee:	464b      	mov	r3, r9
 8000bf0:	4240      	negs	r0, r0
 8000bf2:	1a59      	subs	r1, r3, r1
 8000bf4:	1a0b      	subs	r3, r1, r0
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	4665      	mov	r5, ip
 8000bfa:	e57f      	b.n	80006fc <__aeabi_dadd+0xf8>
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	464a      	mov	r2, r9
 8000c00:	08c0      	lsrs	r0, r0, #3
 8000c02:	075b      	lsls	r3, r3, #29
 8000c04:	4303      	orrs	r3, r0
 8000c06:	08d1      	lsrs	r1, r2, #3
 8000c08:	e62b      	b.n	8000862 <__aeabi_dadd+0x25e>
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	4302      	orrs	r2, r0
 8000c10:	d138      	bne.n	8000c84 <__aeabi_dadd+0x680>
 8000c12:	074a      	lsls	r2, r1, #29
 8000c14:	4313      	orrs	r3, r2
 8000c16:	08c9      	lsrs	r1, r1, #3
 8000c18:	e646      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000c1a:	464b      	mov	r3, r9
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	075b      	lsls	r3, r3, #29
 8000c22:	4303      	orrs	r3, r0
 8000c24:	08d1      	lsrs	r1, r2, #3
 8000c26:	e61f      	b.n	8000868 <__aeabi_dadd+0x264>
 8000c28:	181c      	adds	r4, r3, r0
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	419b      	sbcs	r3, r3
 8000c2e:	4449      	add	r1, r9
 8000c30:	468a      	mov	sl, r1
 8000c32:	425b      	negs	r3, r3
 8000c34:	449a      	add	sl, r3
 8000c36:	4653      	mov	r3, sl
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_dadd+0x63a>
 8000c3c:	e607      	b.n	800084e <__aeabi_dadd+0x24a>
 8000c3e:	4652      	mov	r2, sl
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <__aeabi_dadd+0x6bc>)
 8000c42:	2601      	movs	r6, #1
 8000c44:	401a      	ands	r2, r3
 8000c46:	4692      	mov	sl, r2
 8000c48:	e601      	b.n	800084e <__aeabi_dadd+0x24a>
 8000c4a:	003c      	movs	r4, r7
 8000c4c:	000e      	movs	r6, r1
 8000c4e:	3c20      	subs	r4, #32
 8000c50:	40e6      	lsrs	r6, r4
 8000c52:	2f20      	cmp	r7, #32
 8000c54:	d003      	beq.n	8000c5e <__aeabi_dadd+0x65a>
 8000c56:	2440      	movs	r4, #64	; 0x40
 8000c58:	1be4      	subs	r4, r4, r7
 8000c5a:	40a1      	lsls	r1, r4
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	001c      	movs	r4, r3
 8000c60:	1e63      	subs	r3, r4, #1
 8000c62:	419c      	sbcs	r4, r3
 8000c64:	4334      	orrs	r4, r6
 8000c66:	e65e      	b.n	8000926 <__aeabi_dadd+0x322>
 8000c68:	4443      	add	r3, r8
 8000c6a:	4283      	cmp	r3, r0
 8000c6c:	4180      	sbcs	r0, r0
 8000c6e:	4449      	add	r1, r9
 8000c70:	468a      	mov	sl, r1
 8000c72:	4240      	negs	r0, r0
 8000c74:	001c      	movs	r4, r3
 8000c76:	4482      	add	sl, r0
 8000c78:	e6bc      	b.n	80009f4 <__aeabi_dadd+0x3f0>
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x67e>
 8000c80:	e6a9      	b.n	80009d6 <__aeabi_dadd+0x3d2>
 8000c82:	e5e4      	b.n	800084e <__aeabi_dadd+0x24a>
 8000c84:	074a      	lsls	r2, r1, #29
 8000c86:	4313      	orrs	r3, r2
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	08c9      	lsrs	r1, r1, #3
 8000c8c:	0312      	lsls	r2, r2, #12
 8000c8e:	4211      	tst	r1, r2
 8000c90:	d009      	beq.n	8000ca6 <__aeabi_dadd+0x6a2>
 8000c92:	4648      	mov	r0, r9
 8000c94:	08c4      	lsrs	r4, r0, #3
 8000c96:	4214      	tst	r4, r2
 8000c98:	d105      	bne.n	8000ca6 <__aeabi_dadd+0x6a2>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	0742      	lsls	r2, r0, #29
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	0f5a      	lsrs	r2, r3, #29
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	0752      	lsls	r2, r2, #29
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	e5fa      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	4a01      	ldr	r2, [pc, #4]	; (8000cbc <__aeabi_dadd+0x6b8>)
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	e540      	b.n	800073c <__aeabi_dadd+0x138>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	000007ff 	.word	0x000007ff
 8000cc0:	ff7fffff 	.word	0xff7fffff

08000cc4 <__aeabi_dmul>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	46de      	mov	lr, fp
 8000cca:	4657      	mov	r7, sl
 8000ccc:	464e      	mov	r6, r9
 8000cce:	b5e0      	push	{r5, r6, r7, lr}
 8000cd0:	001f      	movs	r7, r3
 8000cd2:	030b      	lsls	r3, r1, #12
 8000cd4:	0b1b      	lsrs	r3, r3, #12
 8000cd6:	469b      	mov	fp, r3
 8000cd8:	004d      	lsls	r5, r1, #1
 8000cda:	0fcb      	lsrs	r3, r1, #31
 8000cdc:	0004      	movs	r4, r0
 8000cde:	4691      	mov	r9, r2
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	0d6d      	lsrs	r5, r5, #21
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dmul+0x26>
 8000ce8:	e1cd      	b.n	8001086 <__aeabi_dmul+0x3c2>
 8000cea:	4bce      	ldr	r3, [pc, #824]	; (8001024 <__aeabi_dmul+0x360>)
 8000cec:	429d      	cmp	r5, r3
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dmul+0x2e>
 8000cf0:	e1e9      	b.n	80010c6 <__aeabi_dmul+0x402>
 8000cf2:	465a      	mov	r2, fp
 8000cf4:	0f43      	lsrs	r3, r0, #29
 8000cf6:	00d2      	lsls	r2, r2, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	0412      	lsls	r2, r2, #16
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	00c3      	lsls	r3, r0, #3
 8000d02:	469a      	mov	sl, r3
 8000d04:	4bc8      	ldr	r3, [pc, #800]	; (8001028 <__aeabi_dmul+0x364>)
 8000d06:	4693      	mov	fp, r2
 8000d08:	469c      	mov	ip, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	4465      	add	r5, ip
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	033c      	lsls	r4, r7, #12
 8000d14:	007b      	lsls	r3, r7, #1
 8000d16:	4648      	mov	r0, r9
 8000d18:	0b24      	lsrs	r4, r4, #12
 8000d1a:	0d5b      	lsrs	r3, r3, #21
 8000d1c:	0fff      	lsrs	r7, r7, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dmul+0x60>
 8000d22:	e189      	b.n	8001038 <__aeabi_dmul+0x374>
 8000d24:	4abf      	ldr	r2, [pc, #764]	; (8001024 <__aeabi_dmul+0x360>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d019      	beq.n	8000d5e <__aeabi_dmul+0x9a>
 8000d2a:	0f42      	lsrs	r2, r0, #29
 8000d2c:	00e4      	lsls	r4, r4, #3
 8000d2e:	4322      	orrs	r2, r4
 8000d30:	2480      	movs	r4, #128	; 0x80
 8000d32:	0424      	lsls	r4, r4, #16
 8000d34:	4314      	orrs	r4, r2
 8000d36:	4abc      	ldr	r2, [pc, #752]	; (8001028 <__aeabi_dmul+0x364>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	4642      	mov	r2, r8
 8000d3e:	4463      	add	r3, ip
 8000d40:	195b      	adds	r3, r3, r5
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	9b01      	ldr	r3, [sp, #4]
 8000d46:	407a      	eors	r2, r7
 8000d48:	3301      	adds	r3, #1
 8000d4a:	00c0      	lsls	r0, r0, #3
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	2e0a      	cmp	r6, #10
 8000d52:	dd1c      	ble.n	8000d8e <__aeabi_dmul+0xca>
 8000d54:	003a      	movs	r2, r7
 8000d56:	2e0b      	cmp	r6, #11
 8000d58:	d05e      	beq.n	8000e18 <__aeabi_dmul+0x154>
 8000d5a:	4647      	mov	r7, r8
 8000d5c:	e056      	b.n	8000e0c <__aeabi_dmul+0x148>
 8000d5e:	4649      	mov	r1, r9
 8000d60:	4bb0      	ldr	r3, [pc, #704]	; (8001024 <__aeabi_dmul+0x360>)
 8000d62:	4321      	orrs	r1, r4
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d12a      	bne.n	8000dc2 <__aeabi_dmul+0xfe>
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	2202      	movs	r2, #2
 8000d70:	0100      	lsls	r0, r0, #4
 8000d72:	002b      	movs	r3, r5
 8000d74:	4684      	mov	ip, r0
 8000d76:	4316      	orrs	r6, r2
 8000d78:	4642      	mov	r2, r8
 8000d7a:	4463      	add	r3, ip
 8000d7c:	407a      	eors	r2, r7
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	2e0a      	cmp	r6, #10
 8000d84:	dd00      	ble.n	8000d88 <__aeabi_dmul+0xc4>
 8000d86:	e231      	b.n	80011ec <__aeabi_dmul+0x528>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	2400      	movs	r4, #0
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	2e02      	cmp	r6, #2
 8000d90:	dc26      	bgt.n	8000de0 <__aeabi_dmul+0x11c>
 8000d92:	3e01      	subs	r6, #1
 8000d94:	2e01      	cmp	r6, #1
 8000d96:	d852      	bhi.n	8000e3e <__aeabi_dmul+0x17a>
 8000d98:	2902      	cmp	r1, #2
 8000d9a:	d04c      	beq.n	8000e36 <__aeabi_dmul+0x172>
 8000d9c:	2901      	cmp	r1, #1
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_dmul+0xde>
 8000da0:	e118      	b.n	8000fd4 <__aeabi_dmul+0x310>
 8000da2:	2300      	movs	r3, #0
 8000da4:	2400      	movs	r4, #0
 8000da6:	2500      	movs	r5, #0
 8000da8:	051b      	lsls	r3, r3, #20
 8000daa:	4323      	orrs	r3, r4
 8000dac:	07d2      	lsls	r2, r2, #31
 8000dae:	4313      	orrs	r3, r2
 8000db0:	0028      	movs	r0, r5
 8000db2:	0019      	movs	r1, r3
 8000db4:	b007      	add	sp, #28
 8000db6:	bcf0      	pop	{r4, r5, r6, r7}
 8000db8:	46bb      	mov	fp, r7
 8000dba:	46b2      	mov	sl, r6
 8000dbc:	46a9      	mov	r9, r5
 8000dbe:	46a0      	mov	r8, r4
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	0109      	lsls	r1, r1, #4
 8000dc8:	002b      	movs	r3, r5
 8000dca:	468c      	mov	ip, r1
 8000dcc:	4316      	orrs	r6, r2
 8000dce:	4642      	mov	r2, r8
 8000dd0:	4463      	add	r3, ip
 8000dd2:	407a      	eors	r2, r7
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	2e0a      	cmp	r6, #10
 8000dda:	dd00      	ble.n	8000dde <__aeabi_dmul+0x11a>
 8000ddc:	e228      	b.n	8001230 <__aeabi_dmul+0x56c>
 8000dde:	2103      	movs	r1, #3
 8000de0:	2501      	movs	r5, #1
 8000de2:	40b5      	lsls	r5, r6
 8000de4:	46ac      	mov	ip, r5
 8000de6:	26a6      	movs	r6, #166	; 0xa6
 8000de8:	4663      	mov	r3, ip
 8000dea:	00f6      	lsls	r6, r6, #3
 8000dec:	4035      	ands	r5, r6
 8000dee:	4233      	tst	r3, r6
 8000df0:	d10b      	bne.n	8000e0a <__aeabi_dmul+0x146>
 8000df2:	2690      	movs	r6, #144	; 0x90
 8000df4:	00b6      	lsls	r6, r6, #2
 8000df6:	4233      	tst	r3, r6
 8000df8:	d118      	bne.n	8000e2c <__aeabi_dmul+0x168>
 8000dfa:	3eb9      	subs	r6, #185	; 0xb9
 8000dfc:	3eff      	subs	r6, #255	; 0xff
 8000dfe:	421e      	tst	r6, r3
 8000e00:	d01d      	beq.n	8000e3e <__aeabi_dmul+0x17a>
 8000e02:	46a3      	mov	fp, r4
 8000e04:	4682      	mov	sl, r0
 8000e06:	9100      	str	r1, [sp, #0]
 8000e08:	e000      	b.n	8000e0c <__aeabi_dmul+0x148>
 8000e0a:	0017      	movs	r7, r2
 8000e0c:	9900      	ldr	r1, [sp, #0]
 8000e0e:	003a      	movs	r2, r7
 8000e10:	2902      	cmp	r1, #2
 8000e12:	d010      	beq.n	8000e36 <__aeabi_dmul+0x172>
 8000e14:	465c      	mov	r4, fp
 8000e16:	4650      	mov	r0, sl
 8000e18:	2903      	cmp	r1, #3
 8000e1a:	d1bf      	bne.n	8000d9c <__aeabi_dmul+0xd8>
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	031b      	lsls	r3, r3, #12
 8000e20:	431c      	orrs	r4, r3
 8000e22:	0324      	lsls	r4, r4, #12
 8000e24:	0005      	movs	r5, r0
 8000e26:	4b7f      	ldr	r3, [pc, #508]	; (8001024 <__aeabi_dmul+0x360>)
 8000e28:	0b24      	lsrs	r4, r4, #12
 8000e2a:	e7bd      	b.n	8000da8 <__aeabi_dmul+0xe4>
 8000e2c:	2480      	movs	r4, #128	; 0x80
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4b7c      	ldr	r3, [pc, #496]	; (8001024 <__aeabi_dmul+0x360>)
 8000e32:	0324      	lsls	r4, r4, #12
 8000e34:	e7b8      	b.n	8000da8 <__aeabi_dmul+0xe4>
 8000e36:	2400      	movs	r4, #0
 8000e38:	2500      	movs	r5, #0
 8000e3a:	4b7a      	ldr	r3, [pc, #488]	; (8001024 <__aeabi_dmul+0x360>)
 8000e3c:	e7b4      	b.n	8000da8 <__aeabi_dmul+0xe4>
 8000e3e:	4653      	mov	r3, sl
 8000e40:	041e      	lsls	r6, r3, #16
 8000e42:	0c36      	lsrs	r6, r6, #16
 8000e44:	0c1f      	lsrs	r7, r3, #16
 8000e46:	0033      	movs	r3, r6
 8000e48:	0c01      	lsrs	r1, r0, #16
 8000e4a:	0400      	lsls	r0, r0, #16
 8000e4c:	0c00      	lsrs	r0, r0, #16
 8000e4e:	4343      	muls	r3, r0
 8000e50:	4698      	mov	r8, r3
 8000e52:	0003      	movs	r3, r0
 8000e54:	437b      	muls	r3, r7
 8000e56:	4699      	mov	r9, r3
 8000e58:	0033      	movs	r3, r6
 8000e5a:	434b      	muls	r3, r1
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	4643      	mov	r3, r8
 8000e60:	000d      	movs	r5, r1
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	469a      	mov	sl, r3
 8000e66:	437d      	muls	r5, r7
 8000e68:	44cc      	add	ip, r9
 8000e6a:	44d4      	add	ip, sl
 8000e6c:	9500      	str	r5, [sp, #0]
 8000e6e:	45e1      	cmp	r9, ip
 8000e70:	d904      	bls.n	8000e7c <__aeabi_dmul+0x1b8>
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	025b      	lsls	r3, r3, #9
 8000e76:	4699      	mov	r9, r3
 8000e78:	444d      	add	r5, r9
 8000e7a:	9500      	str	r5, [sp, #0]
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	0c1b      	lsrs	r3, r3, #16
 8000e80:	001d      	movs	r5, r3
 8000e82:	4663      	mov	r3, ip
 8000e84:	041b      	lsls	r3, r3, #16
 8000e86:	469c      	mov	ip, r3
 8000e88:	4643      	mov	r3, r8
 8000e8a:	041b      	lsls	r3, r3, #16
 8000e8c:	0c1b      	lsrs	r3, r3, #16
 8000e8e:	4698      	mov	r8, r3
 8000e90:	4663      	mov	r3, ip
 8000e92:	4443      	add	r3, r8
 8000e94:	9303      	str	r3, [sp, #12]
 8000e96:	0c23      	lsrs	r3, r4, #16
 8000e98:	4698      	mov	r8, r3
 8000e9a:	0033      	movs	r3, r6
 8000e9c:	0424      	lsls	r4, r4, #16
 8000e9e:	0c24      	lsrs	r4, r4, #16
 8000ea0:	4363      	muls	r3, r4
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	0023      	movs	r3, r4
 8000ea6:	437b      	muls	r3, r7
 8000ea8:	4699      	mov	r9, r3
 8000eaa:	4643      	mov	r3, r8
 8000eac:	435e      	muls	r6, r3
 8000eae:	435f      	muls	r7, r3
 8000eb0:	444e      	add	r6, r9
 8000eb2:	4663      	mov	r3, ip
 8000eb4:	46b2      	mov	sl, r6
 8000eb6:	0c1e      	lsrs	r6, r3, #16
 8000eb8:	4456      	add	r6, sl
 8000eba:	45b1      	cmp	r9, r6
 8000ebc:	d903      	bls.n	8000ec6 <__aeabi_dmul+0x202>
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	444f      	add	r7, r9
 8000ec6:	0c33      	lsrs	r3, r6, #16
 8000ec8:	4699      	mov	r9, r3
 8000eca:	003b      	movs	r3, r7
 8000ecc:	444b      	add	r3, r9
 8000ece:	9305      	str	r3, [sp, #20]
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	46ac      	mov	ip, r5
 8000ed4:	041f      	lsls	r7, r3, #16
 8000ed6:	0c3f      	lsrs	r7, r7, #16
 8000ed8:	0436      	lsls	r6, r6, #16
 8000eda:	19f6      	adds	r6, r6, r7
 8000edc:	44b4      	add	ip, r6
 8000ede:	4663      	mov	r3, ip
 8000ee0:	9304      	str	r3, [sp, #16]
 8000ee2:	465b      	mov	r3, fp
 8000ee4:	0c1b      	lsrs	r3, r3, #16
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	465b      	mov	r3, fp
 8000eea:	041f      	lsls	r7, r3, #16
 8000eec:	0c3f      	lsrs	r7, r7, #16
 8000eee:	003b      	movs	r3, r7
 8000ef0:	4343      	muls	r3, r0
 8000ef2:	4699      	mov	r9, r3
 8000ef4:	4663      	mov	r3, ip
 8000ef6:	4343      	muls	r3, r0
 8000ef8:	469a      	mov	sl, r3
 8000efa:	464b      	mov	r3, r9
 8000efc:	4660      	mov	r0, ip
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	469b      	mov	fp, r3
 8000f02:	4348      	muls	r0, r1
 8000f04:	4379      	muls	r1, r7
 8000f06:	4451      	add	r1, sl
 8000f08:	4459      	add	r1, fp
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	d903      	bls.n	8000f16 <__aeabi_dmul+0x252>
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	025b      	lsls	r3, r3, #9
 8000f12:	469a      	mov	sl, r3
 8000f14:	4450      	add	r0, sl
 8000f16:	0c0b      	lsrs	r3, r1, #16
 8000f18:	469a      	mov	sl, r3
 8000f1a:	464b      	mov	r3, r9
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	0c1b      	lsrs	r3, r3, #16
 8000f20:	4699      	mov	r9, r3
 8000f22:	003b      	movs	r3, r7
 8000f24:	4363      	muls	r3, r4
 8000f26:	0409      	lsls	r1, r1, #16
 8000f28:	4645      	mov	r5, r8
 8000f2a:	4449      	add	r1, r9
 8000f2c:	4699      	mov	r9, r3
 8000f2e:	4663      	mov	r3, ip
 8000f30:	435c      	muls	r4, r3
 8000f32:	436b      	muls	r3, r5
 8000f34:	469c      	mov	ip, r3
 8000f36:	464b      	mov	r3, r9
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	4698      	mov	r8, r3
 8000f3c:	436f      	muls	r7, r5
 8000f3e:	193f      	adds	r7, r7, r4
 8000f40:	4447      	add	r7, r8
 8000f42:	4450      	add	r0, sl
 8000f44:	42bc      	cmp	r4, r7
 8000f46:	d903      	bls.n	8000f50 <__aeabi_dmul+0x28c>
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	025b      	lsls	r3, r3, #9
 8000f4c:	4698      	mov	r8, r3
 8000f4e:	44c4      	add	ip, r8
 8000f50:	9b04      	ldr	r3, [sp, #16]
 8000f52:	9d00      	ldr	r5, [sp, #0]
 8000f54:	4698      	mov	r8, r3
 8000f56:	4445      	add	r5, r8
 8000f58:	42b5      	cmp	r5, r6
 8000f5a:	41b6      	sbcs	r6, r6
 8000f5c:	4273      	negs	r3, r6
 8000f5e:	4698      	mov	r8, r3
 8000f60:	464b      	mov	r3, r9
 8000f62:	041e      	lsls	r6, r3, #16
 8000f64:	9b05      	ldr	r3, [sp, #20]
 8000f66:	043c      	lsls	r4, r7, #16
 8000f68:	4699      	mov	r9, r3
 8000f6a:	0c36      	lsrs	r6, r6, #16
 8000f6c:	19a4      	adds	r4, r4, r6
 8000f6e:	444c      	add	r4, r9
 8000f70:	46a1      	mov	r9, r4
 8000f72:	4683      	mov	fp, r0
 8000f74:	186e      	adds	r6, r5, r1
 8000f76:	44c1      	add	r9, r8
 8000f78:	428e      	cmp	r6, r1
 8000f7a:	4189      	sbcs	r1, r1
 8000f7c:	44cb      	add	fp, r9
 8000f7e:	465d      	mov	r5, fp
 8000f80:	4249      	negs	r1, r1
 8000f82:	186d      	adds	r5, r5, r1
 8000f84:	429c      	cmp	r4, r3
 8000f86:	41a4      	sbcs	r4, r4
 8000f88:	45c1      	cmp	r9, r8
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	4583      	cmp	fp, r0
 8000f8e:	4180      	sbcs	r0, r0
 8000f90:	428d      	cmp	r5, r1
 8000f92:	4189      	sbcs	r1, r1
 8000f94:	425b      	negs	r3, r3
 8000f96:	4264      	negs	r4, r4
 8000f98:	431c      	orrs	r4, r3
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	9b03      	ldr	r3, [sp, #12]
 8000f9e:	4249      	negs	r1, r1
 8000fa0:	4301      	orrs	r1, r0
 8000fa2:	0270      	lsls	r0, r6, #9
 8000fa4:	0c3f      	lsrs	r7, r7, #16
 8000fa6:	4318      	orrs	r0, r3
 8000fa8:	19e4      	adds	r4, r4, r7
 8000faa:	1e47      	subs	r7, r0, #1
 8000fac:	41b8      	sbcs	r0, r7
 8000fae:	1864      	adds	r4, r4, r1
 8000fb0:	4464      	add	r4, ip
 8000fb2:	0df6      	lsrs	r6, r6, #23
 8000fb4:	0261      	lsls	r1, r4, #9
 8000fb6:	4330      	orrs	r0, r6
 8000fb8:	0dec      	lsrs	r4, r5, #23
 8000fba:	026e      	lsls	r6, r5, #9
 8000fbc:	430c      	orrs	r4, r1
 8000fbe:	4330      	orrs	r0, r6
 8000fc0:	01c9      	lsls	r1, r1, #7
 8000fc2:	d400      	bmi.n	8000fc6 <__aeabi_dmul+0x302>
 8000fc4:	e0f1      	b.n	80011aa <__aeabi_dmul+0x4e6>
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	0843      	lsrs	r3, r0, #1
 8000fca:	4001      	ands	r1, r0
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	07e0      	lsls	r0, r4, #31
 8000fd0:	4318      	orrs	r0, r3
 8000fd2:	0864      	lsrs	r4, r4, #1
 8000fd4:	4915      	ldr	r1, [pc, #84]	; (800102c <__aeabi_dmul+0x368>)
 8000fd6:	9b02      	ldr	r3, [sp, #8]
 8000fd8:	468c      	mov	ip, r1
 8000fda:	4463      	add	r3, ip
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dc00      	bgt.n	8000fe2 <__aeabi_dmul+0x31e>
 8000fe0:	e097      	b.n	8001112 <__aeabi_dmul+0x44e>
 8000fe2:	0741      	lsls	r1, r0, #29
 8000fe4:	d009      	beq.n	8000ffa <__aeabi_dmul+0x336>
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	4001      	ands	r1, r0
 8000fea:	2904      	cmp	r1, #4
 8000fec:	d005      	beq.n	8000ffa <__aeabi_dmul+0x336>
 8000fee:	1d01      	adds	r1, r0, #4
 8000ff0:	4281      	cmp	r1, r0
 8000ff2:	4180      	sbcs	r0, r0
 8000ff4:	4240      	negs	r0, r0
 8000ff6:	1824      	adds	r4, r4, r0
 8000ff8:	0008      	movs	r0, r1
 8000ffa:	01e1      	lsls	r1, r4, #7
 8000ffc:	d506      	bpl.n	800100c <__aeabi_dmul+0x348>
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	00c9      	lsls	r1, r1, #3
 8001002:	468c      	mov	ip, r1
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <__aeabi_dmul+0x36c>)
 8001006:	401c      	ands	r4, r3
 8001008:	9b02      	ldr	r3, [sp, #8]
 800100a:	4463      	add	r3, ip
 800100c:	4909      	ldr	r1, [pc, #36]	; (8001034 <__aeabi_dmul+0x370>)
 800100e:	428b      	cmp	r3, r1
 8001010:	dd00      	ble.n	8001014 <__aeabi_dmul+0x350>
 8001012:	e710      	b.n	8000e36 <__aeabi_dmul+0x172>
 8001014:	0761      	lsls	r1, r4, #29
 8001016:	08c5      	lsrs	r5, r0, #3
 8001018:	0264      	lsls	r4, r4, #9
 800101a:	055b      	lsls	r3, r3, #21
 800101c:	430d      	orrs	r5, r1
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	0d5b      	lsrs	r3, r3, #21
 8001022:	e6c1      	b.n	8000da8 <__aeabi_dmul+0xe4>
 8001024:	000007ff 	.word	0x000007ff
 8001028:	fffffc01 	.word	0xfffffc01
 800102c:	000003ff 	.word	0x000003ff
 8001030:	feffffff 	.word	0xfeffffff
 8001034:	000007fe 	.word	0x000007fe
 8001038:	464b      	mov	r3, r9
 800103a:	4323      	orrs	r3, r4
 800103c:	d059      	beq.n	80010f2 <__aeabi_dmul+0x42e>
 800103e:	2c00      	cmp	r4, #0
 8001040:	d100      	bne.n	8001044 <__aeabi_dmul+0x380>
 8001042:	e0a3      	b.n	800118c <__aeabi_dmul+0x4c8>
 8001044:	0020      	movs	r0, r4
 8001046:	f000 fd4b 	bl	8001ae0 <__clzsi2>
 800104a:	0001      	movs	r1, r0
 800104c:	0003      	movs	r3, r0
 800104e:	390b      	subs	r1, #11
 8001050:	221d      	movs	r2, #29
 8001052:	1a52      	subs	r2, r2, r1
 8001054:	4649      	mov	r1, r9
 8001056:	0018      	movs	r0, r3
 8001058:	40d1      	lsrs	r1, r2
 800105a:	464a      	mov	r2, r9
 800105c:	3808      	subs	r0, #8
 800105e:	4082      	lsls	r2, r0
 8001060:	4084      	lsls	r4, r0
 8001062:	0010      	movs	r0, r2
 8001064:	430c      	orrs	r4, r1
 8001066:	4a74      	ldr	r2, [pc, #464]	; (8001238 <__aeabi_dmul+0x574>)
 8001068:	1aeb      	subs	r3, r5, r3
 800106a:	4694      	mov	ip, r2
 800106c:	4642      	mov	r2, r8
 800106e:	4463      	add	r3, ip
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	9b01      	ldr	r3, [sp, #4]
 8001074:	407a      	eors	r2, r7
 8001076:	3301      	adds	r3, #1
 8001078:	2100      	movs	r1, #0
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2e0a      	cmp	r6, #10
 8001080:	dd00      	ble.n	8001084 <__aeabi_dmul+0x3c0>
 8001082:	e667      	b.n	8000d54 <__aeabi_dmul+0x90>
 8001084:	e683      	b.n	8000d8e <__aeabi_dmul+0xca>
 8001086:	465b      	mov	r3, fp
 8001088:	4303      	orrs	r3, r0
 800108a:	469a      	mov	sl, r3
 800108c:	d02a      	beq.n	80010e4 <__aeabi_dmul+0x420>
 800108e:	465b      	mov	r3, fp
 8001090:	2b00      	cmp	r3, #0
 8001092:	d06d      	beq.n	8001170 <__aeabi_dmul+0x4ac>
 8001094:	4658      	mov	r0, fp
 8001096:	f000 fd23 	bl	8001ae0 <__clzsi2>
 800109a:	0001      	movs	r1, r0
 800109c:	0003      	movs	r3, r0
 800109e:	390b      	subs	r1, #11
 80010a0:	221d      	movs	r2, #29
 80010a2:	1a52      	subs	r2, r2, r1
 80010a4:	0021      	movs	r1, r4
 80010a6:	0018      	movs	r0, r3
 80010a8:	465d      	mov	r5, fp
 80010aa:	40d1      	lsrs	r1, r2
 80010ac:	3808      	subs	r0, #8
 80010ae:	4085      	lsls	r5, r0
 80010b0:	000a      	movs	r2, r1
 80010b2:	4084      	lsls	r4, r0
 80010b4:	432a      	orrs	r2, r5
 80010b6:	4693      	mov	fp, r2
 80010b8:	46a2      	mov	sl, r4
 80010ba:	4d5f      	ldr	r5, [pc, #380]	; (8001238 <__aeabi_dmul+0x574>)
 80010bc:	2600      	movs	r6, #0
 80010be:	1aed      	subs	r5, r5, r3
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	e625      	b.n	8000d12 <__aeabi_dmul+0x4e>
 80010c6:	465b      	mov	r3, fp
 80010c8:	4303      	orrs	r3, r0
 80010ca:	469a      	mov	sl, r3
 80010cc:	d105      	bne.n	80010da <__aeabi_dmul+0x416>
 80010ce:	2300      	movs	r3, #0
 80010d0:	469b      	mov	fp, r3
 80010d2:	3302      	adds	r3, #2
 80010d4:	2608      	movs	r6, #8
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	e61b      	b.n	8000d12 <__aeabi_dmul+0x4e>
 80010da:	2303      	movs	r3, #3
 80010dc:	4682      	mov	sl, r0
 80010de:	260c      	movs	r6, #12
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	e616      	b.n	8000d12 <__aeabi_dmul+0x4e>
 80010e4:	2300      	movs	r3, #0
 80010e6:	469b      	mov	fp, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	2604      	movs	r6, #4
 80010ec:	2500      	movs	r5, #0
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	e60f      	b.n	8000d12 <__aeabi_dmul+0x4e>
 80010f2:	4642      	mov	r2, r8
 80010f4:	3301      	adds	r3, #1
 80010f6:	9501      	str	r5, [sp, #4]
 80010f8:	431e      	orrs	r6, r3
 80010fa:	9b01      	ldr	r3, [sp, #4]
 80010fc:	407a      	eors	r2, r7
 80010fe:	3301      	adds	r3, #1
 8001100:	2400      	movs	r4, #0
 8001102:	2000      	movs	r0, #0
 8001104:	2101      	movs	r1, #1
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2e0a      	cmp	r6, #10
 800110c:	dd00      	ble.n	8001110 <__aeabi_dmul+0x44c>
 800110e:	e621      	b.n	8000d54 <__aeabi_dmul+0x90>
 8001110:	e63d      	b.n	8000d8e <__aeabi_dmul+0xca>
 8001112:	2101      	movs	r1, #1
 8001114:	1ac9      	subs	r1, r1, r3
 8001116:	2938      	cmp	r1, #56	; 0x38
 8001118:	dd00      	ble.n	800111c <__aeabi_dmul+0x458>
 800111a:	e642      	b.n	8000da2 <__aeabi_dmul+0xde>
 800111c:	291f      	cmp	r1, #31
 800111e:	dd47      	ble.n	80011b0 <__aeabi_dmul+0x4ec>
 8001120:	261f      	movs	r6, #31
 8001122:	0025      	movs	r5, r4
 8001124:	4276      	negs	r6, r6
 8001126:	1af3      	subs	r3, r6, r3
 8001128:	40dd      	lsrs	r5, r3
 800112a:	002b      	movs	r3, r5
 800112c:	2920      	cmp	r1, #32
 800112e:	d005      	beq.n	800113c <__aeabi_dmul+0x478>
 8001130:	4942      	ldr	r1, [pc, #264]	; (800123c <__aeabi_dmul+0x578>)
 8001132:	9d02      	ldr	r5, [sp, #8]
 8001134:	468c      	mov	ip, r1
 8001136:	4465      	add	r5, ip
 8001138:	40ac      	lsls	r4, r5
 800113a:	4320      	orrs	r0, r4
 800113c:	1e41      	subs	r1, r0, #1
 800113e:	4188      	sbcs	r0, r1
 8001140:	4318      	orrs	r0, r3
 8001142:	2307      	movs	r3, #7
 8001144:	001d      	movs	r5, r3
 8001146:	2400      	movs	r4, #0
 8001148:	4005      	ands	r5, r0
 800114a:	4203      	tst	r3, r0
 800114c:	d04a      	beq.n	80011e4 <__aeabi_dmul+0x520>
 800114e:	230f      	movs	r3, #15
 8001150:	2400      	movs	r4, #0
 8001152:	4003      	ands	r3, r0
 8001154:	2b04      	cmp	r3, #4
 8001156:	d042      	beq.n	80011de <__aeabi_dmul+0x51a>
 8001158:	1d03      	adds	r3, r0, #4
 800115a:	4283      	cmp	r3, r0
 800115c:	4180      	sbcs	r0, r0
 800115e:	4240      	negs	r0, r0
 8001160:	1824      	adds	r4, r4, r0
 8001162:	0018      	movs	r0, r3
 8001164:	0223      	lsls	r3, r4, #8
 8001166:	d53a      	bpl.n	80011de <__aeabi_dmul+0x51a>
 8001168:	2301      	movs	r3, #1
 800116a:	2400      	movs	r4, #0
 800116c:	2500      	movs	r5, #0
 800116e:	e61b      	b.n	8000da8 <__aeabi_dmul+0xe4>
 8001170:	f000 fcb6 	bl	8001ae0 <__clzsi2>
 8001174:	0001      	movs	r1, r0
 8001176:	0003      	movs	r3, r0
 8001178:	3115      	adds	r1, #21
 800117a:	3320      	adds	r3, #32
 800117c:	291c      	cmp	r1, #28
 800117e:	dd8f      	ble.n	80010a0 <__aeabi_dmul+0x3dc>
 8001180:	3808      	subs	r0, #8
 8001182:	2200      	movs	r2, #0
 8001184:	4084      	lsls	r4, r0
 8001186:	4692      	mov	sl, r2
 8001188:	46a3      	mov	fp, r4
 800118a:	e796      	b.n	80010ba <__aeabi_dmul+0x3f6>
 800118c:	f000 fca8 	bl	8001ae0 <__clzsi2>
 8001190:	0001      	movs	r1, r0
 8001192:	0003      	movs	r3, r0
 8001194:	3115      	adds	r1, #21
 8001196:	3320      	adds	r3, #32
 8001198:	291c      	cmp	r1, #28
 800119a:	dc00      	bgt.n	800119e <__aeabi_dmul+0x4da>
 800119c:	e758      	b.n	8001050 <__aeabi_dmul+0x38c>
 800119e:	0002      	movs	r2, r0
 80011a0:	464c      	mov	r4, r9
 80011a2:	3a08      	subs	r2, #8
 80011a4:	2000      	movs	r0, #0
 80011a6:	4094      	lsls	r4, r2
 80011a8:	e75d      	b.n	8001066 <__aeabi_dmul+0x3a2>
 80011aa:	9b01      	ldr	r3, [sp, #4]
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	e711      	b.n	8000fd4 <__aeabi_dmul+0x310>
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <__aeabi_dmul+0x57c>)
 80011b2:	0026      	movs	r6, r4
 80011b4:	469c      	mov	ip, r3
 80011b6:	0003      	movs	r3, r0
 80011b8:	9d02      	ldr	r5, [sp, #8]
 80011ba:	40cb      	lsrs	r3, r1
 80011bc:	4465      	add	r5, ip
 80011be:	40ae      	lsls	r6, r5
 80011c0:	431e      	orrs	r6, r3
 80011c2:	0003      	movs	r3, r0
 80011c4:	40ab      	lsls	r3, r5
 80011c6:	1e58      	subs	r0, r3, #1
 80011c8:	4183      	sbcs	r3, r0
 80011ca:	0030      	movs	r0, r6
 80011cc:	4318      	orrs	r0, r3
 80011ce:	40cc      	lsrs	r4, r1
 80011d0:	0743      	lsls	r3, r0, #29
 80011d2:	d0c7      	beq.n	8001164 <__aeabi_dmul+0x4a0>
 80011d4:	230f      	movs	r3, #15
 80011d6:	4003      	ands	r3, r0
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d1bd      	bne.n	8001158 <__aeabi_dmul+0x494>
 80011dc:	e7c2      	b.n	8001164 <__aeabi_dmul+0x4a0>
 80011de:	0765      	lsls	r5, r4, #29
 80011e0:	0264      	lsls	r4, r4, #9
 80011e2:	0b24      	lsrs	r4, r4, #12
 80011e4:	08c0      	lsrs	r0, r0, #3
 80011e6:	2300      	movs	r3, #0
 80011e8:	4305      	orrs	r5, r0
 80011ea:	e5dd      	b.n	8000da8 <__aeabi_dmul+0xe4>
 80011ec:	2500      	movs	r5, #0
 80011ee:	2302      	movs	r3, #2
 80011f0:	2e0f      	cmp	r6, #15
 80011f2:	d10c      	bne.n	800120e <__aeabi_dmul+0x54a>
 80011f4:	2480      	movs	r4, #128	; 0x80
 80011f6:	465b      	mov	r3, fp
 80011f8:	0324      	lsls	r4, r4, #12
 80011fa:	4223      	tst	r3, r4
 80011fc:	d00e      	beq.n	800121c <__aeabi_dmul+0x558>
 80011fe:	4221      	tst	r1, r4
 8001200:	d10c      	bne.n	800121c <__aeabi_dmul+0x558>
 8001202:	430c      	orrs	r4, r1
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	003a      	movs	r2, r7
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <__aeabi_dmul+0x580>)
 800120a:	0b24      	lsrs	r4, r4, #12
 800120c:	e5cc      	b.n	8000da8 <__aeabi_dmul+0xe4>
 800120e:	2e0b      	cmp	r6, #11
 8001210:	d000      	beq.n	8001214 <__aeabi_dmul+0x550>
 8001212:	e5a2      	b.n	8000d5a <__aeabi_dmul+0x96>
 8001214:	468b      	mov	fp, r1
 8001216:	46aa      	mov	sl, r5
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	e5f7      	b.n	8000e0c <__aeabi_dmul+0x148>
 800121c:	2480      	movs	r4, #128	; 0x80
 800121e:	465b      	mov	r3, fp
 8001220:	0324      	lsls	r4, r4, #12
 8001222:	431c      	orrs	r4, r3
 8001224:	0324      	lsls	r4, r4, #12
 8001226:	4642      	mov	r2, r8
 8001228:	4655      	mov	r5, sl
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <__aeabi_dmul+0x580>)
 800122c:	0b24      	lsrs	r4, r4, #12
 800122e:	e5bb      	b.n	8000da8 <__aeabi_dmul+0xe4>
 8001230:	464d      	mov	r5, r9
 8001232:	0021      	movs	r1, r4
 8001234:	2303      	movs	r3, #3
 8001236:	e7db      	b.n	80011f0 <__aeabi_dmul+0x52c>
 8001238:	fffffc0d 	.word	0xfffffc0d
 800123c:	0000043e 	.word	0x0000043e
 8001240:	0000041e 	.word	0x0000041e
 8001244:	000007ff 	.word	0x000007ff

08001248 <__aeabi_dsub>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	4657      	mov	r7, sl
 800124c:	464e      	mov	r6, r9
 800124e:	4645      	mov	r5, r8
 8001250:	46de      	mov	lr, fp
 8001252:	b5e0      	push	{r5, r6, r7, lr}
 8001254:	000d      	movs	r5, r1
 8001256:	0004      	movs	r4, r0
 8001258:	0019      	movs	r1, r3
 800125a:	0010      	movs	r0, r2
 800125c:	032b      	lsls	r3, r5, #12
 800125e:	0a5b      	lsrs	r3, r3, #9
 8001260:	0f62      	lsrs	r2, r4, #29
 8001262:	431a      	orrs	r2, r3
 8001264:	00e3      	lsls	r3, r4, #3
 8001266:	030c      	lsls	r4, r1, #12
 8001268:	0a64      	lsrs	r4, r4, #9
 800126a:	0f47      	lsrs	r7, r0, #29
 800126c:	4327      	orrs	r7, r4
 800126e:	4cd0      	ldr	r4, [pc, #832]	; (80015b0 <__aeabi_dsub+0x368>)
 8001270:	006e      	lsls	r6, r5, #1
 8001272:	4691      	mov	r9, r2
 8001274:	b083      	sub	sp, #12
 8001276:	004a      	lsls	r2, r1, #1
 8001278:	00c0      	lsls	r0, r0, #3
 800127a:	4698      	mov	r8, r3
 800127c:	46a2      	mov	sl, r4
 800127e:	0d76      	lsrs	r6, r6, #21
 8001280:	0fed      	lsrs	r5, r5, #31
 8001282:	0d52      	lsrs	r2, r2, #21
 8001284:	0fc9      	lsrs	r1, r1, #31
 8001286:	9001      	str	r0, [sp, #4]
 8001288:	42a2      	cmp	r2, r4
 800128a:	d100      	bne.n	800128e <__aeabi_dsub+0x46>
 800128c:	e0b9      	b.n	8001402 <__aeabi_dsub+0x1ba>
 800128e:	2401      	movs	r4, #1
 8001290:	4061      	eors	r1, r4
 8001292:	468b      	mov	fp, r1
 8001294:	428d      	cmp	r5, r1
 8001296:	d100      	bne.n	800129a <__aeabi_dsub+0x52>
 8001298:	e08d      	b.n	80013b6 <__aeabi_dsub+0x16e>
 800129a:	1ab4      	subs	r4, r6, r2
 800129c:	46a4      	mov	ip, r4
 800129e:	2c00      	cmp	r4, #0
 80012a0:	dc00      	bgt.n	80012a4 <__aeabi_dsub+0x5c>
 80012a2:	e0b7      	b.n	8001414 <__aeabi_dsub+0x1cc>
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	d100      	bne.n	80012aa <__aeabi_dsub+0x62>
 80012a8:	e0cb      	b.n	8001442 <__aeabi_dsub+0x1fa>
 80012aa:	4ac1      	ldr	r2, [pc, #772]	; (80015b0 <__aeabi_dsub+0x368>)
 80012ac:	4296      	cmp	r6, r2
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dsub+0x6a>
 80012b0:	e186      	b.n	80015c0 <__aeabi_dsub+0x378>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0412      	lsls	r2, r2, #16
 80012b6:	4317      	orrs	r7, r2
 80012b8:	4662      	mov	r2, ip
 80012ba:	2a38      	cmp	r2, #56	; 0x38
 80012bc:	dd00      	ble.n	80012c0 <__aeabi_dsub+0x78>
 80012be:	e1a4      	b.n	800160a <__aeabi_dsub+0x3c2>
 80012c0:	2a1f      	cmp	r2, #31
 80012c2:	dd00      	ble.n	80012c6 <__aeabi_dsub+0x7e>
 80012c4:	e21d      	b.n	8001702 <__aeabi_dsub+0x4ba>
 80012c6:	4661      	mov	r1, ip
 80012c8:	2220      	movs	r2, #32
 80012ca:	003c      	movs	r4, r7
 80012cc:	1a52      	subs	r2, r2, r1
 80012ce:	0001      	movs	r1, r0
 80012d0:	4090      	lsls	r0, r2
 80012d2:	4094      	lsls	r4, r2
 80012d4:	1e42      	subs	r2, r0, #1
 80012d6:	4190      	sbcs	r0, r2
 80012d8:	4662      	mov	r2, ip
 80012da:	46a0      	mov	r8, r4
 80012dc:	4664      	mov	r4, ip
 80012de:	40d7      	lsrs	r7, r2
 80012e0:	464a      	mov	r2, r9
 80012e2:	40e1      	lsrs	r1, r4
 80012e4:	4644      	mov	r4, r8
 80012e6:	1bd2      	subs	r2, r2, r7
 80012e8:	4691      	mov	r9, r2
 80012ea:	430c      	orrs	r4, r1
 80012ec:	4304      	orrs	r4, r0
 80012ee:	1b1c      	subs	r4, r3, r4
 80012f0:	42a3      	cmp	r3, r4
 80012f2:	4192      	sbcs	r2, r2
 80012f4:	464b      	mov	r3, r9
 80012f6:	4252      	negs	r2, r2
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	469a      	mov	sl, r3
 80012fc:	4653      	mov	r3, sl
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	d400      	bmi.n	8001304 <__aeabi_dsub+0xbc>
 8001302:	e12b      	b.n	800155c <__aeabi_dsub+0x314>
 8001304:	4653      	mov	r3, sl
 8001306:	025a      	lsls	r2, r3, #9
 8001308:	0a53      	lsrs	r3, r2, #9
 800130a:	469a      	mov	sl, r3
 800130c:	4653      	mov	r3, sl
 800130e:	2b00      	cmp	r3, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_dsub+0xcc>
 8001312:	e166      	b.n	80015e2 <__aeabi_dsub+0x39a>
 8001314:	4650      	mov	r0, sl
 8001316:	f000 fbe3 	bl	8001ae0 <__clzsi2>
 800131a:	0003      	movs	r3, r0
 800131c:	3b08      	subs	r3, #8
 800131e:	2220      	movs	r2, #32
 8001320:	0020      	movs	r0, r4
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	4651      	mov	r1, sl
 8001326:	40d0      	lsrs	r0, r2
 8001328:	4099      	lsls	r1, r3
 800132a:	0002      	movs	r2, r0
 800132c:	409c      	lsls	r4, r3
 800132e:	430a      	orrs	r2, r1
 8001330:	429e      	cmp	r6, r3
 8001332:	dd00      	ble.n	8001336 <__aeabi_dsub+0xee>
 8001334:	e164      	b.n	8001600 <__aeabi_dsub+0x3b8>
 8001336:	1b9b      	subs	r3, r3, r6
 8001338:	1c59      	adds	r1, r3, #1
 800133a:	291f      	cmp	r1, #31
 800133c:	dd00      	ble.n	8001340 <__aeabi_dsub+0xf8>
 800133e:	e0fe      	b.n	800153e <__aeabi_dsub+0x2f6>
 8001340:	2320      	movs	r3, #32
 8001342:	0010      	movs	r0, r2
 8001344:	0026      	movs	r6, r4
 8001346:	1a5b      	subs	r3, r3, r1
 8001348:	409c      	lsls	r4, r3
 800134a:	4098      	lsls	r0, r3
 800134c:	40ce      	lsrs	r6, r1
 800134e:	40ca      	lsrs	r2, r1
 8001350:	1e63      	subs	r3, r4, #1
 8001352:	419c      	sbcs	r4, r3
 8001354:	4330      	orrs	r0, r6
 8001356:	4692      	mov	sl, r2
 8001358:	2600      	movs	r6, #0
 800135a:	4304      	orrs	r4, r0
 800135c:	0763      	lsls	r3, r4, #29
 800135e:	d009      	beq.n	8001374 <__aeabi_dsub+0x12c>
 8001360:	230f      	movs	r3, #15
 8001362:	4023      	ands	r3, r4
 8001364:	2b04      	cmp	r3, #4
 8001366:	d005      	beq.n	8001374 <__aeabi_dsub+0x12c>
 8001368:	1d23      	adds	r3, r4, #4
 800136a:	42a3      	cmp	r3, r4
 800136c:	41a4      	sbcs	r4, r4
 800136e:	4264      	negs	r4, r4
 8001370:	44a2      	add	sl, r4
 8001372:	001c      	movs	r4, r3
 8001374:	4653      	mov	r3, sl
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	d400      	bmi.n	800137c <__aeabi_dsub+0x134>
 800137a:	e0f2      	b.n	8001562 <__aeabi_dsub+0x31a>
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <__aeabi_dsub+0x368>)
 800137e:	3601      	adds	r6, #1
 8001380:	429e      	cmp	r6, r3
 8001382:	d100      	bne.n	8001386 <__aeabi_dsub+0x13e>
 8001384:	e10f      	b.n	80015a6 <__aeabi_dsub+0x35e>
 8001386:	4653      	mov	r3, sl
 8001388:	498a      	ldr	r1, [pc, #552]	; (80015b4 <__aeabi_dsub+0x36c>)
 800138a:	08e4      	lsrs	r4, r4, #3
 800138c:	400b      	ands	r3, r1
 800138e:	0019      	movs	r1, r3
 8001390:	075b      	lsls	r3, r3, #29
 8001392:	4323      	orrs	r3, r4
 8001394:	0572      	lsls	r2, r6, #21
 8001396:	024c      	lsls	r4, r1, #9
 8001398:	0b24      	lsrs	r4, r4, #12
 800139a:	0d52      	lsrs	r2, r2, #21
 800139c:	0512      	lsls	r2, r2, #20
 800139e:	4322      	orrs	r2, r4
 80013a0:	07ed      	lsls	r5, r5, #31
 80013a2:	432a      	orrs	r2, r5
 80013a4:	0018      	movs	r0, r3
 80013a6:	0011      	movs	r1, r2
 80013a8:	b003      	add	sp, #12
 80013aa:	bcf0      	pop	{r4, r5, r6, r7}
 80013ac:	46bb      	mov	fp, r7
 80013ae:	46b2      	mov	sl, r6
 80013b0:	46a9      	mov	r9, r5
 80013b2:	46a0      	mov	r8, r4
 80013b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b6:	1ab4      	subs	r4, r6, r2
 80013b8:	46a4      	mov	ip, r4
 80013ba:	2c00      	cmp	r4, #0
 80013bc:	dd59      	ble.n	8001472 <__aeabi_dsub+0x22a>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x17c>
 80013c2:	e0b0      	b.n	8001526 <__aeabi_dsub+0x2de>
 80013c4:	4556      	cmp	r6, sl
 80013c6:	d100      	bne.n	80013ca <__aeabi_dsub+0x182>
 80013c8:	e0fa      	b.n	80015c0 <__aeabi_dsub+0x378>
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	0412      	lsls	r2, r2, #16
 80013ce:	4317      	orrs	r7, r2
 80013d0:	4662      	mov	r2, ip
 80013d2:	2a38      	cmp	r2, #56	; 0x38
 80013d4:	dd00      	ble.n	80013d8 <__aeabi_dsub+0x190>
 80013d6:	e0d4      	b.n	8001582 <__aeabi_dsub+0x33a>
 80013d8:	2a1f      	cmp	r2, #31
 80013da:	dc00      	bgt.n	80013de <__aeabi_dsub+0x196>
 80013dc:	e1c0      	b.n	8001760 <__aeabi_dsub+0x518>
 80013de:	0039      	movs	r1, r7
 80013e0:	3a20      	subs	r2, #32
 80013e2:	40d1      	lsrs	r1, r2
 80013e4:	4662      	mov	r2, ip
 80013e6:	2a20      	cmp	r2, #32
 80013e8:	d006      	beq.n	80013f8 <__aeabi_dsub+0x1b0>
 80013ea:	4664      	mov	r4, ip
 80013ec:	2240      	movs	r2, #64	; 0x40
 80013ee:	1b12      	subs	r2, r2, r4
 80013f0:	003c      	movs	r4, r7
 80013f2:	4094      	lsls	r4, r2
 80013f4:	4304      	orrs	r4, r0
 80013f6:	9401      	str	r4, [sp, #4]
 80013f8:	9c01      	ldr	r4, [sp, #4]
 80013fa:	1e62      	subs	r2, r4, #1
 80013fc:	4194      	sbcs	r4, r2
 80013fe:	430c      	orrs	r4, r1
 8001400:	e0c3      	b.n	800158a <__aeabi_dsub+0x342>
 8001402:	003c      	movs	r4, r7
 8001404:	4304      	orrs	r4, r0
 8001406:	d02b      	beq.n	8001460 <__aeabi_dsub+0x218>
 8001408:	468b      	mov	fp, r1
 800140a:	428d      	cmp	r5, r1
 800140c:	d02e      	beq.n	800146c <__aeabi_dsub+0x224>
 800140e:	4c6a      	ldr	r4, [pc, #424]	; (80015b8 <__aeabi_dsub+0x370>)
 8001410:	46a4      	mov	ip, r4
 8001412:	44b4      	add	ip, r6
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d05f      	beq.n	80014da <__aeabi_dsub+0x292>
 800141a:	1b94      	subs	r4, r2, r6
 800141c:	46a4      	mov	ip, r4
 800141e:	2e00      	cmp	r6, #0
 8001420:	d000      	beq.n	8001424 <__aeabi_dsub+0x1dc>
 8001422:	e120      	b.n	8001666 <__aeabi_dsub+0x41e>
 8001424:	464c      	mov	r4, r9
 8001426:	431c      	orrs	r4, r3
 8001428:	d100      	bne.n	800142c <__aeabi_dsub+0x1e4>
 800142a:	e1c7      	b.n	80017bc <__aeabi_dsub+0x574>
 800142c:	4661      	mov	r1, ip
 800142e:	1e4c      	subs	r4, r1, #1
 8001430:	2901      	cmp	r1, #1
 8001432:	d100      	bne.n	8001436 <__aeabi_dsub+0x1ee>
 8001434:	e223      	b.n	800187e <__aeabi_dsub+0x636>
 8001436:	4d5e      	ldr	r5, [pc, #376]	; (80015b0 <__aeabi_dsub+0x368>)
 8001438:	45ac      	cmp	ip, r5
 800143a:	d100      	bne.n	800143e <__aeabi_dsub+0x1f6>
 800143c:	e1d8      	b.n	80017f0 <__aeabi_dsub+0x5a8>
 800143e:	46a4      	mov	ip, r4
 8001440:	e11a      	b.n	8001678 <__aeabi_dsub+0x430>
 8001442:	003a      	movs	r2, r7
 8001444:	4302      	orrs	r2, r0
 8001446:	d100      	bne.n	800144a <__aeabi_dsub+0x202>
 8001448:	e0e4      	b.n	8001614 <__aeabi_dsub+0x3cc>
 800144a:	0022      	movs	r2, r4
 800144c:	3a01      	subs	r2, #1
 800144e:	2c01      	cmp	r4, #1
 8001450:	d100      	bne.n	8001454 <__aeabi_dsub+0x20c>
 8001452:	e1c3      	b.n	80017dc <__aeabi_dsub+0x594>
 8001454:	4956      	ldr	r1, [pc, #344]	; (80015b0 <__aeabi_dsub+0x368>)
 8001456:	428c      	cmp	r4, r1
 8001458:	d100      	bne.n	800145c <__aeabi_dsub+0x214>
 800145a:	e0b1      	b.n	80015c0 <__aeabi_dsub+0x378>
 800145c:	4694      	mov	ip, r2
 800145e:	e72b      	b.n	80012b8 <__aeabi_dsub+0x70>
 8001460:	2401      	movs	r4, #1
 8001462:	4061      	eors	r1, r4
 8001464:	468b      	mov	fp, r1
 8001466:	428d      	cmp	r5, r1
 8001468:	d000      	beq.n	800146c <__aeabi_dsub+0x224>
 800146a:	e716      	b.n	800129a <__aeabi_dsub+0x52>
 800146c:	4952      	ldr	r1, [pc, #328]	; (80015b8 <__aeabi_dsub+0x370>)
 800146e:	468c      	mov	ip, r1
 8001470:	44b4      	add	ip, r6
 8001472:	4664      	mov	r4, ip
 8001474:	2c00      	cmp	r4, #0
 8001476:	d100      	bne.n	800147a <__aeabi_dsub+0x232>
 8001478:	e0d3      	b.n	8001622 <__aeabi_dsub+0x3da>
 800147a:	1b91      	subs	r1, r2, r6
 800147c:	468c      	mov	ip, r1
 800147e:	2e00      	cmp	r6, #0
 8001480:	d100      	bne.n	8001484 <__aeabi_dsub+0x23c>
 8001482:	e15e      	b.n	8001742 <__aeabi_dsub+0x4fa>
 8001484:	494a      	ldr	r1, [pc, #296]	; (80015b0 <__aeabi_dsub+0x368>)
 8001486:	428a      	cmp	r2, r1
 8001488:	d100      	bne.n	800148c <__aeabi_dsub+0x244>
 800148a:	e1be      	b.n	800180a <__aeabi_dsub+0x5c2>
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	464c      	mov	r4, r9
 8001490:	0409      	lsls	r1, r1, #16
 8001492:	430c      	orrs	r4, r1
 8001494:	46a1      	mov	r9, r4
 8001496:	4661      	mov	r1, ip
 8001498:	2938      	cmp	r1, #56	; 0x38
 800149a:	dd00      	ble.n	800149e <__aeabi_dsub+0x256>
 800149c:	e1ba      	b.n	8001814 <__aeabi_dsub+0x5cc>
 800149e:	291f      	cmp	r1, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dsub+0x25c>
 80014a2:	e227      	b.n	80018f4 <__aeabi_dsub+0x6ac>
 80014a4:	2420      	movs	r4, #32
 80014a6:	1a64      	subs	r4, r4, r1
 80014a8:	4649      	mov	r1, r9
 80014aa:	40a1      	lsls	r1, r4
 80014ac:	001e      	movs	r6, r3
 80014ae:	4688      	mov	r8, r1
 80014b0:	4661      	mov	r1, ip
 80014b2:	40a3      	lsls	r3, r4
 80014b4:	40ce      	lsrs	r6, r1
 80014b6:	4641      	mov	r1, r8
 80014b8:	1e5c      	subs	r4, r3, #1
 80014ba:	41a3      	sbcs	r3, r4
 80014bc:	4331      	orrs	r1, r6
 80014be:	4319      	orrs	r1, r3
 80014c0:	000c      	movs	r4, r1
 80014c2:	4663      	mov	r3, ip
 80014c4:	4649      	mov	r1, r9
 80014c6:	40d9      	lsrs	r1, r3
 80014c8:	187f      	adds	r7, r7, r1
 80014ca:	1824      	adds	r4, r4, r0
 80014cc:	4284      	cmp	r4, r0
 80014ce:	419b      	sbcs	r3, r3
 80014d0:	425b      	negs	r3, r3
 80014d2:	469a      	mov	sl, r3
 80014d4:	0016      	movs	r6, r2
 80014d6:	44ba      	add	sl, r7
 80014d8:	e05d      	b.n	8001596 <__aeabi_dsub+0x34e>
 80014da:	4c38      	ldr	r4, [pc, #224]	; (80015bc <__aeabi_dsub+0x374>)
 80014dc:	1c72      	adds	r2, r6, #1
 80014de:	4222      	tst	r2, r4
 80014e0:	d000      	beq.n	80014e4 <__aeabi_dsub+0x29c>
 80014e2:	e0df      	b.n	80016a4 <__aeabi_dsub+0x45c>
 80014e4:	464a      	mov	r2, r9
 80014e6:	431a      	orrs	r2, r3
 80014e8:	2e00      	cmp	r6, #0
 80014ea:	d000      	beq.n	80014ee <__aeabi_dsub+0x2a6>
 80014ec:	e15c      	b.n	80017a8 <__aeabi_dsub+0x560>
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dsub+0x2ac>
 80014f2:	e1cf      	b.n	8001894 <__aeabi_dsub+0x64c>
 80014f4:	003a      	movs	r2, r7
 80014f6:	4302      	orrs	r2, r0
 80014f8:	d100      	bne.n	80014fc <__aeabi_dsub+0x2b4>
 80014fa:	e17f      	b.n	80017fc <__aeabi_dsub+0x5b4>
 80014fc:	1a1c      	subs	r4, r3, r0
 80014fe:	464a      	mov	r2, r9
 8001500:	42a3      	cmp	r3, r4
 8001502:	4189      	sbcs	r1, r1
 8001504:	1bd2      	subs	r2, r2, r7
 8001506:	4249      	negs	r1, r1
 8001508:	1a52      	subs	r2, r2, r1
 800150a:	4692      	mov	sl, r2
 800150c:	0212      	lsls	r2, r2, #8
 800150e:	d400      	bmi.n	8001512 <__aeabi_dsub+0x2ca>
 8001510:	e20a      	b.n	8001928 <__aeabi_dsub+0x6e0>
 8001512:	1ac4      	subs	r4, r0, r3
 8001514:	42a0      	cmp	r0, r4
 8001516:	4180      	sbcs	r0, r0
 8001518:	464b      	mov	r3, r9
 800151a:	4240      	negs	r0, r0
 800151c:	1aff      	subs	r7, r7, r3
 800151e:	1a3b      	subs	r3, r7, r0
 8001520:	469a      	mov	sl, r3
 8001522:	465d      	mov	r5, fp
 8001524:	e71a      	b.n	800135c <__aeabi_dsub+0x114>
 8001526:	003a      	movs	r2, r7
 8001528:	4302      	orrs	r2, r0
 800152a:	d073      	beq.n	8001614 <__aeabi_dsub+0x3cc>
 800152c:	0022      	movs	r2, r4
 800152e:	3a01      	subs	r2, #1
 8001530:	2c01      	cmp	r4, #1
 8001532:	d100      	bne.n	8001536 <__aeabi_dsub+0x2ee>
 8001534:	e0cb      	b.n	80016ce <__aeabi_dsub+0x486>
 8001536:	4554      	cmp	r4, sl
 8001538:	d042      	beq.n	80015c0 <__aeabi_dsub+0x378>
 800153a:	4694      	mov	ip, r2
 800153c:	e748      	b.n	80013d0 <__aeabi_dsub+0x188>
 800153e:	0010      	movs	r0, r2
 8001540:	3b1f      	subs	r3, #31
 8001542:	40d8      	lsrs	r0, r3
 8001544:	2920      	cmp	r1, #32
 8001546:	d003      	beq.n	8001550 <__aeabi_dsub+0x308>
 8001548:	2340      	movs	r3, #64	; 0x40
 800154a:	1a5b      	subs	r3, r3, r1
 800154c:	409a      	lsls	r2, r3
 800154e:	4314      	orrs	r4, r2
 8001550:	1e63      	subs	r3, r4, #1
 8001552:	419c      	sbcs	r4, r3
 8001554:	2300      	movs	r3, #0
 8001556:	2600      	movs	r6, #0
 8001558:	469a      	mov	sl, r3
 800155a:	4304      	orrs	r4, r0
 800155c:	0763      	lsls	r3, r4, #29
 800155e:	d000      	beq.n	8001562 <__aeabi_dsub+0x31a>
 8001560:	e6fe      	b.n	8001360 <__aeabi_dsub+0x118>
 8001562:	4652      	mov	r2, sl
 8001564:	08e3      	lsrs	r3, r4, #3
 8001566:	0752      	lsls	r2, r2, #29
 8001568:	4313      	orrs	r3, r2
 800156a:	4652      	mov	r2, sl
 800156c:	46b4      	mov	ip, r6
 800156e:	08d2      	lsrs	r2, r2, #3
 8001570:	490f      	ldr	r1, [pc, #60]	; (80015b0 <__aeabi_dsub+0x368>)
 8001572:	458c      	cmp	ip, r1
 8001574:	d02a      	beq.n	80015cc <__aeabi_dsub+0x384>
 8001576:	0312      	lsls	r2, r2, #12
 8001578:	0b14      	lsrs	r4, r2, #12
 800157a:	4662      	mov	r2, ip
 800157c:	0552      	lsls	r2, r2, #21
 800157e:	0d52      	lsrs	r2, r2, #21
 8001580:	e70c      	b.n	800139c <__aeabi_dsub+0x154>
 8001582:	003c      	movs	r4, r7
 8001584:	4304      	orrs	r4, r0
 8001586:	1e62      	subs	r2, r4, #1
 8001588:	4194      	sbcs	r4, r2
 800158a:	18e4      	adds	r4, r4, r3
 800158c:	429c      	cmp	r4, r3
 800158e:	4192      	sbcs	r2, r2
 8001590:	4252      	negs	r2, r2
 8001592:	444a      	add	r2, r9
 8001594:	4692      	mov	sl, r2
 8001596:	4653      	mov	r3, sl
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	d5df      	bpl.n	800155c <__aeabi_dsub+0x314>
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <__aeabi_dsub+0x368>)
 800159e:	3601      	adds	r6, #1
 80015a0:	429e      	cmp	r6, r3
 80015a2:	d000      	beq.n	80015a6 <__aeabi_dsub+0x35e>
 80015a4:	e0a0      	b.n	80016e8 <__aeabi_dsub+0x4a0>
 80015a6:	0032      	movs	r2, r6
 80015a8:	2400      	movs	r4, #0
 80015aa:	2300      	movs	r3, #0
 80015ac:	e6f6      	b.n	800139c <__aeabi_dsub+0x154>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	000007ff 	.word	0x000007ff
 80015b4:	ff7fffff 	.word	0xff7fffff
 80015b8:	fffff801 	.word	0xfffff801
 80015bc:	000007fe 	.word	0x000007fe
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	464a      	mov	r2, r9
 80015c4:	0752      	lsls	r2, r2, #29
 80015c6:	4313      	orrs	r3, r2
 80015c8:	464a      	mov	r2, r9
 80015ca:	08d2      	lsrs	r2, r2, #3
 80015cc:	0019      	movs	r1, r3
 80015ce:	4311      	orrs	r1, r2
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dsub+0x38c>
 80015d2:	e1b5      	b.n	8001940 <__aeabi_dsub+0x6f8>
 80015d4:	2480      	movs	r4, #128	; 0x80
 80015d6:	0324      	lsls	r4, r4, #12
 80015d8:	4314      	orrs	r4, r2
 80015da:	0324      	lsls	r4, r4, #12
 80015dc:	4ad5      	ldr	r2, [pc, #852]	; (8001934 <__aeabi_dsub+0x6ec>)
 80015de:	0b24      	lsrs	r4, r4, #12
 80015e0:	e6dc      	b.n	800139c <__aeabi_dsub+0x154>
 80015e2:	0020      	movs	r0, r4
 80015e4:	f000 fa7c 	bl	8001ae0 <__clzsi2>
 80015e8:	0003      	movs	r3, r0
 80015ea:	3318      	adds	r3, #24
 80015ec:	2b1f      	cmp	r3, #31
 80015ee:	dc00      	bgt.n	80015f2 <__aeabi_dsub+0x3aa>
 80015f0:	e695      	b.n	800131e <__aeabi_dsub+0xd6>
 80015f2:	0022      	movs	r2, r4
 80015f4:	3808      	subs	r0, #8
 80015f6:	4082      	lsls	r2, r0
 80015f8:	2400      	movs	r4, #0
 80015fa:	429e      	cmp	r6, r3
 80015fc:	dc00      	bgt.n	8001600 <__aeabi_dsub+0x3b8>
 80015fe:	e69a      	b.n	8001336 <__aeabi_dsub+0xee>
 8001600:	1af6      	subs	r6, r6, r3
 8001602:	4bcd      	ldr	r3, [pc, #820]	; (8001938 <__aeabi_dsub+0x6f0>)
 8001604:	401a      	ands	r2, r3
 8001606:	4692      	mov	sl, r2
 8001608:	e6a8      	b.n	800135c <__aeabi_dsub+0x114>
 800160a:	003c      	movs	r4, r7
 800160c:	4304      	orrs	r4, r0
 800160e:	1e62      	subs	r2, r4, #1
 8001610:	4194      	sbcs	r4, r2
 8001612:	e66c      	b.n	80012ee <__aeabi_dsub+0xa6>
 8001614:	464a      	mov	r2, r9
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	0752      	lsls	r2, r2, #29
 800161a:	4313      	orrs	r3, r2
 800161c:	464a      	mov	r2, r9
 800161e:	08d2      	lsrs	r2, r2, #3
 8001620:	e7a6      	b.n	8001570 <__aeabi_dsub+0x328>
 8001622:	4cc6      	ldr	r4, [pc, #792]	; (800193c <__aeabi_dsub+0x6f4>)
 8001624:	1c72      	adds	r2, r6, #1
 8001626:	4222      	tst	r2, r4
 8001628:	d000      	beq.n	800162c <__aeabi_dsub+0x3e4>
 800162a:	e0ac      	b.n	8001786 <__aeabi_dsub+0x53e>
 800162c:	464a      	mov	r2, r9
 800162e:	431a      	orrs	r2, r3
 8001630:	2e00      	cmp	r6, #0
 8001632:	d000      	beq.n	8001636 <__aeabi_dsub+0x3ee>
 8001634:	e105      	b.n	8001842 <__aeabi_dsub+0x5fa>
 8001636:	2a00      	cmp	r2, #0
 8001638:	d100      	bne.n	800163c <__aeabi_dsub+0x3f4>
 800163a:	e156      	b.n	80018ea <__aeabi_dsub+0x6a2>
 800163c:	003a      	movs	r2, r7
 800163e:	4302      	orrs	r2, r0
 8001640:	d100      	bne.n	8001644 <__aeabi_dsub+0x3fc>
 8001642:	e0db      	b.n	80017fc <__aeabi_dsub+0x5b4>
 8001644:	181c      	adds	r4, r3, r0
 8001646:	429c      	cmp	r4, r3
 8001648:	419b      	sbcs	r3, r3
 800164a:	444f      	add	r7, r9
 800164c:	46ba      	mov	sl, r7
 800164e:	425b      	negs	r3, r3
 8001650:	449a      	add	sl, r3
 8001652:	4653      	mov	r3, sl
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	d400      	bmi.n	800165a <__aeabi_dsub+0x412>
 8001658:	e780      	b.n	800155c <__aeabi_dsub+0x314>
 800165a:	4652      	mov	r2, sl
 800165c:	4bb6      	ldr	r3, [pc, #728]	; (8001938 <__aeabi_dsub+0x6f0>)
 800165e:	2601      	movs	r6, #1
 8001660:	401a      	ands	r2, r3
 8001662:	4692      	mov	sl, r2
 8001664:	e77a      	b.n	800155c <__aeabi_dsub+0x314>
 8001666:	4cb3      	ldr	r4, [pc, #716]	; (8001934 <__aeabi_dsub+0x6ec>)
 8001668:	42a2      	cmp	r2, r4
 800166a:	d100      	bne.n	800166e <__aeabi_dsub+0x426>
 800166c:	e0c0      	b.n	80017f0 <__aeabi_dsub+0x5a8>
 800166e:	2480      	movs	r4, #128	; 0x80
 8001670:	464d      	mov	r5, r9
 8001672:	0424      	lsls	r4, r4, #16
 8001674:	4325      	orrs	r5, r4
 8001676:	46a9      	mov	r9, r5
 8001678:	4664      	mov	r4, ip
 800167a:	2c38      	cmp	r4, #56	; 0x38
 800167c:	dc53      	bgt.n	8001726 <__aeabi_dsub+0x4de>
 800167e:	4661      	mov	r1, ip
 8001680:	2c1f      	cmp	r4, #31
 8001682:	dd00      	ble.n	8001686 <__aeabi_dsub+0x43e>
 8001684:	e0cd      	b.n	8001822 <__aeabi_dsub+0x5da>
 8001686:	2520      	movs	r5, #32
 8001688:	001e      	movs	r6, r3
 800168a:	1b2d      	subs	r5, r5, r4
 800168c:	464c      	mov	r4, r9
 800168e:	40ab      	lsls	r3, r5
 8001690:	40ac      	lsls	r4, r5
 8001692:	40ce      	lsrs	r6, r1
 8001694:	1e5d      	subs	r5, r3, #1
 8001696:	41ab      	sbcs	r3, r5
 8001698:	4334      	orrs	r4, r6
 800169a:	4323      	orrs	r3, r4
 800169c:	464c      	mov	r4, r9
 800169e:	40cc      	lsrs	r4, r1
 80016a0:	1b3f      	subs	r7, r7, r4
 80016a2:	e045      	b.n	8001730 <__aeabi_dsub+0x4e8>
 80016a4:	464a      	mov	r2, r9
 80016a6:	1a1c      	subs	r4, r3, r0
 80016a8:	1bd1      	subs	r1, r2, r7
 80016aa:	42a3      	cmp	r3, r4
 80016ac:	4192      	sbcs	r2, r2
 80016ae:	4252      	negs	r2, r2
 80016b0:	4692      	mov	sl, r2
 80016b2:	000a      	movs	r2, r1
 80016b4:	4651      	mov	r1, sl
 80016b6:	1a52      	subs	r2, r2, r1
 80016b8:	4692      	mov	sl, r2
 80016ba:	0212      	lsls	r2, r2, #8
 80016bc:	d500      	bpl.n	80016c0 <__aeabi_dsub+0x478>
 80016be:	e083      	b.n	80017c8 <__aeabi_dsub+0x580>
 80016c0:	4653      	mov	r3, sl
 80016c2:	4323      	orrs	r3, r4
 80016c4:	d000      	beq.n	80016c8 <__aeabi_dsub+0x480>
 80016c6:	e621      	b.n	800130c <__aeabi_dsub+0xc4>
 80016c8:	2200      	movs	r2, #0
 80016ca:	2500      	movs	r5, #0
 80016cc:	e753      	b.n	8001576 <__aeabi_dsub+0x32e>
 80016ce:	181c      	adds	r4, r3, r0
 80016d0:	429c      	cmp	r4, r3
 80016d2:	419b      	sbcs	r3, r3
 80016d4:	444f      	add	r7, r9
 80016d6:	46ba      	mov	sl, r7
 80016d8:	425b      	negs	r3, r3
 80016da:	449a      	add	sl, r3
 80016dc:	4653      	mov	r3, sl
 80016de:	2601      	movs	r6, #1
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	d400      	bmi.n	80016e6 <__aeabi_dsub+0x49e>
 80016e4:	e73a      	b.n	800155c <__aeabi_dsub+0x314>
 80016e6:	2602      	movs	r6, #2
 80016e8:	4652      	mov	r2, sl
 80016ea:	4b93      	ldr	r3, [pc, #588]	; (8001938 <__aeabi_dsub+0x6f0>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	401a      	ands	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	4021      	ands	r1, r4
 80016f4:	0862      	lsrs	r2, r4, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	07dc      	lsls	r4, r3, #31
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	469a      	mov	sl, r3
 80016fe:	4314      	orrs	r4, r2
 8001700:	e62c      	b.n	800135c <__aeabi_dsub+0x114>
 8001702:	0039      	movs	r1, r7
 8001704:	3a20      	subs	r2, #32
 8001706:	40d1      	lsrs	r1, r2
 8001708:	4662      	mov	r2, ip
 800170a:	2a20      	cmp	r2, #32
 800170c:	d006      	beq.n	800171c <__aeabi_dsub+0x4d4>
 800170e:	4664      	mov	r4, ip
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	1b12      	subs	r2, r2, r4
 8001714:	003c      	movs	r4, r7
 8001716:	4094      	lsls	r4, r2
 8001718:	4304      	orrs	r4, r0
 800171a:	9401      	str	r4, [sp, #4]
 800171c:	9c01      	ldr	r4, [sp, #4]
 800171e:	1e62      	subs	r2, r4, #1
 8001720:	4194      	sbcs	r4, r2
 8001722:	430c      	orrs	r4, r1
 8001724:	e5e3      	b.n	80012ee <__aeabi_dsub+0xa6>
 8001726:	4649      	mov	r1, r9
 8001728:	4319      	orrs	r1, r3
 800172a:	000b      	movs	r3, r1
 800172c:	1e5c      	subs	r4, r3, #1
 800172e:	41a3      	sbcs	r3, r4
 8001730:	1ac4      	subs	r4, r0, r3
 8001732:	42a0      	cmp	r0, r4
 8001734:	419b      	sbcs	r3, r3
 8001736:	425b      	negs	r3, r3
 8001738:	1afb      	subs	r3, r7, r3
 800173a:	469a      	mov	sl, r3
 800173c:	465d      	mov	r5, fp
 800173e:	0016      	movs	r6, r2
 8001740:	e5dc      	b.n	80012fc <__aeabi_dsub+0xb4>
 8001742:	4649      	mov	r1, r9
 8001744:	4319      	orrs	r1, r3
 8001746:	d100      	bne.n	800174a <__aeabi_dsub+0x502>
 8001748:	e0ae      	b.n	80018a8 <__aeabi_dsub+0x660>
 800174a:	4661      	mov	r1, ip
 800174c:	4664      	mov	r4, ip
 800174e:	3901      	subs	r1, #1
 8001750:	2c01      	cmp	r4, #1
 8001752:	d100      	bne.n	8001756 <__aeabi_dsub+0x50e>
 8001754:	e0e0      	b.n	8001918 <__aeabi_dsub+0x6d0>
 8001756:	4c77      	ldr	r4, [pc, #476]	; (8001934 <__aeabi_dsub+0x6ec>)
 8001758:	45a4      	cmp	ip, r4
 800175a:	d056      	beq.n	800180a <__aeabi_dsub+0x5c2>
 800175c:	468c      	mov	ip, r1
 800175e:	e69a      	b.n	8001496 <__aeabi_dsub+0x24e>
 8001760:	4661      	mov	r1, ip
 8001762:	2220      	movs	r2, #32
 8001764:	003c      	movs	r4, r7
 8001766:	1a52      	subs	r2, r2, r1
 8001768:	4094      	lsls	r4, r2
 800176a:	0001      	movs	r1, r0
 800176c:	4090      	lsls	r0, r2
 800176e:	46a0      	mov	r8, r4
 8001770:	4664      	mov	r4, ip
 8001772:	1e42      	subs	r2, r0, #1
 8001774:	4190      	sbcs	r0, r2
 8001776:	4662      	mov	r2, ip
 8001778:	40e1      	lsrs	r1, r4
 800177a:	4644      	mov	r4, r8
 800177c:	40d7      	lsrs	r7, r2
 800177e:	430c      	orrs	r4, r1
 8001780:	4304      	orrs	r4, r0
 8001782:	44b9      	add	r9, r7
 8001784:	e701      	b.n	800158a <__aeabi_dsub+0x342>
 8001786:	496b      	ldr	r1, [pc, #428]	; (8001934 <__aeabi_dsub+0x6ec>)
 8001788:	428a      	cmp	r2, r1
 800178a:	d100      	bne.n	800178e <__aeabi_dsub+0x546>
 800178c:	e70c      	b.n	80015a8 <__aeabi_dsub+0x360>
 800178e:	1818      	adds	r0, r3, r0
 8001790:	4298      	cmp	r0, r3
 8001792:	419b      	sbcs	r3, r3
 8001794:	444f      	add	r7, r9
 8001796:	425b      	negs	r3, r3
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	07dc      	lsls	r4, r3, #31
 800179c:	0840      	lsrs	r0, r0, #1
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	469a      	mov	sl, r3
 80017a2:	0016      	movs	r6, r2
 80017a4:	4304      	orrs	r4, r0
 80017a6:	e6d9      	b.n	800155c <__aeabi_dsub+0x314>
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d000      	beq.n	80017ae <__aeabi_dsub+0x566>
 80017ac:	e081      	b.n	80018b2 <__aeabi_dsub+0x66a>
 80017ae:	003b      	movs	r3, r7
 80017b0:	4303      	orrs	r3, r0
 80017b2:	d11d      	bne.n	80017f0 <__aeabi_dsub+0x5a8>
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	2500      	movs	r5, #0
 80017b8:	0312      	lsls	r2, r2, #12
 80017ba:	e70b      	b.n	80015d4 <__aeabi_dsub+0x38c>
 80017bc:	08c0      	lsrs	r0, r0, #3
 80017be:	077b      	lsls	r3, r7, #29
 80017c0:	465d      	mov	r5, fp
 80017c2:	4303      	orrs	r3, r0
 80017c4:	08fa      	lsrs	r2, r7, #3
 80017c6:	e6d3      	b.n	8001570 <__aeabi_dsub+0x328>
 80017c8:	1ac4      	subs	r4, r0, r3
 80017ca:	42a0      	cmp	r0, r4
 80017cc:	4180      	sbcs	r0, r0
 80017ce:	464b      	mov	r3, r9
 80017d0:	4240      	negs	r0, r0
 80017d2:	1aff      	subs	r7, r7, r3
 80017d4:	1a3b      	subs	r3, r7, r0
 80017d6:	469a      	mov	sl, r3
 80017d8:	465d      	mov	r5, fp
 80017da:	e597      	b.n	800130c <__aeabi_dsub+0xc4>
 80017dc:	1a1c      	subs	r4, r3, r0
 80017de:	464a      	mov	r2, r9
 80017e0:	42a3      	cmp	r3, r4
 80017e2:	419b      	sbcs	r3, r3
 80017e4:	1bd7      	subs	r7, r2, r7
 80017e6:	425b      	negs	r3, r3
 80017e8:	1afb      	subs	r3, r7, r3
 80017ea:	469a      	mov	sl, r3
 80017ec:	2601      	movs	r6, #1
 80017ee:	e585      	b.n	80012fc <__aeabi_dsub+0xb4>
 80017f0:	08c0      	lsrs	r0, r0, #3
 80017f2:	077b      	lsls	r3, r7, #29
 80017f4:	465d      	mov	r5, fp
 80017f6:	4303      	orrs	r3, r0
 80017f8:	08fa      	lsrs	r2, r7, #3
 80017fa:	e6e7      	b.n	80015cc <__aeabi_dsub+0x384>
 80017fc:	464a      	mov	r2, r9
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	0752      	lsls	r2, r2, #29
 8001802:	4313      	orrs	r3, r2
 8001804:	464a      	mov	r2, r9
 8001806:	08d2      	lsrs	r2, r2, #3
 8001808:	e6b5      	b.n	8001576 <__aeabi_dsub+0x32e>
 800180a:	08c0      	lsrs	r0, r0, #3
 800180c:	077b      	lsls	r3, r7, #29
 800180e:	4303      	orrs	r3, r0
 8001810:	08fa      	lsrs	r2, r7, #3
 8001812:	e6db      	b.n	80015cc <__aeabi_dsub+0x384>
 8001814:	4649      	mov	r1, r9
 8001816:	4319      	orrs	r1, r3
 8001818:	000b      	movs	r3, r1
 800181a:	1e59      	subs	r1, r3, #1
 800181c:	418b      	sbcs	r3, r1
 800181e:	001c      	movs	r4, r3
 8001820:	e653      	b.n	80014ca <__aeabi_dsub+0x282>
 8001822:	464d      	mov	r5, r9
 8001824:	3c20      	subs	r4, #32
 8001826:	40e5      	lsrs	r5, r4
 8001828:	2920      	cmp	r1, #32
 800182a:	d005      	beq.n	8001838 <__aeabi_dsub+0x5f0>
 800182c:	2440      	movs	r4, #64	; 0x40
 800182e:	1a64      	subs	r4, r4, r1
 8001830:	4649      	mov	r1, r9
 8001832:	40a1      	lsls	r1, r4
 8001834:	430b      	orrs	r3, r1
 8001836:	4698      	mov	r8, r3
 8001838:	4643      	mov	r3, r8
 800183a:	1e5c      	subs	r4, r3, #1
 800183c:	41a3      	sbcs	r3, r4
 800183e:	432b      	orrs	r3, r5
 8001840:	e776      	b.n	8001730 <__aeabi_dsub+0x4e8>
 8001842:	2a00      	cmp	r2, #0
 8001844:	d0e1      	beq.n	800180a <__aeabi_dsub+0x5c2>
 8001846:	003a      	movs	r2, r7
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	4302      	orrs	r2, r0
 800184c:	d100      	bne.n	8001850 <__aeabi_dsub+0x608>
 800184e:	e6b8      	b.n	80015c2 <__aeabi_dsub+0x37a>
 8001850:	464a      	mov	r2, r9
 8001852:	0752      	lsls	r2, r2, #29
 8001854:	2480      	movs	r4, #128	; 0x80
 8001856:	4313      	orrs	r3, r2
 8001858:	464a      	mov	r2, r9
 800185a:	0324      	lsls	r4, r4, #12
 800185c:	08d2      	lsrs	r2, r2, #3
 800185e:	4222      	tst	r2, r4
 8001860:	d007      	beq.n	8001872 <__aeabi_dsub+0x62a>
 8001862:	08fe      	lsrs	r6, r7, #3
 8001864:	4226      	tst	r6, r4
 8001866:	d104      	bne.n	8001872 <__aeabi_dsub+0x62a>
 8001868:	465d      	mov	r5, fp
 800186a:	0032      	movs	r2, r6
 800186c:	08c3      	lsrs	r3, r0, #3
 800186e:	077f      	lsls	r7, r7, #29
 8001870:	433b      	orrs	r3, r7
 8001872:	0f59      	lsrs	r1, r3, #29
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	0749      	lsls	r1, r1, #29
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	430b      	orrs	r3, r1
 800187c:	e6a6      	b.n	80015cc <__aeabi_dsub+0x384>
 800187e:	1ac4      	subs	r4, r0, r3
 8001880:	42a0      	cmp	r0, r4
 8001882:	4180      	sbcs	r0, r0
 8001884:	464b      	mov	r3, r9
 8001886:	4240      	negs	r0, r0
 8001888:	1aff      	subs	r7, r7, r3
 800188a:	1a3b      	subs	r3, r7, r0
 800188c:	469a      	mov	sl, r3
 800188e:	465d      	mov	r5, fp
 8001890:	2601      	movs	r6, #1
 8001892:	e533      	b.n	80012fc <__aeabi_dsub+0xb4>
 8001894:	003b      	movs	r3, r7
 8001896:	4303      	orrs	r3, r0
 8001898:	d100      	bne.n	800189c <__aeabi_dsub+0x654>
 800189a:	e715      	b.n	80016c8 <__aeabi_dsub+0x480>
 800189c:	08c0      	lsrs	r0, r0, #3
 800189e:	077b      	lsls	r3, r7, #29
 80018a0:	465d      	mov	r5, fp
 80018a2:	4303      	orrs	r3, r0
 80018a4:	08fa      	lsrs	r2, r7, #3
 80018a6:	e666      	b.n	8001576 <__aeabi_dsub+0x32e>
 80018a8:	08c0      	lsrs	r0, r0, #3
 80018aa:	077b      	lsls	r3, r7, #29
 80018ac:	4303      	orrs	r3, r0
 80018ae:	08fa      	lsrs	r2, r7, #3
 80018b0:	e65e      	b.n	8001570 <__aeabi_dsub+0x328>
 80018b2:	003a      	movs	r2, r7
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	4302      	orrs	r2, r0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x674>
 80018ba:	e682      	b.n	80015c2 <__aeabi_dsub+0x37a>
 80018bc:	464a      	mov	r2, r9
 80018be:	0752      	lsls	r2, r2, #29
 80018c0:	2480      	movs	r4, #128	; 0x80
 80018c2:	4313      	orrs	r3, r2
 80018c4:	464a      	mov	r2, r9
 80018c6:	0324      	lsls	r4, r4, #12
 80018c8:	08d2      	lsrs	r2, r2, #3
 80018ca:	4222      	tst	r2, r4
 80018cc:	d007      	beq.n	80018de <__aeabi_dsub+0x696>
 80018ce:	08fe      	lsrs	r6, r7, #3
 80018d0:	4226      	tst	r6, r4
 80018d2:	d104      	bne.n	80018de <__aeabi_dsub+0x696>
 80018d4:	465d      	mov	r5, fp
 80018d6:	0032      	movs	r2, r6
 80018d8:	08c3      	lsrs	r3, r0, #3
 80018da:	077f      	lsls	r7, r7, #29
 80018dc:	433b      	orrs	r3, r7
 80018de:	0f59      	lsrs	r1, r3, #29
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	08db      	lsrs	r3, r3, #3
 80018e4:	0749      	lsls	r1, r1, #29
 80018e6:	430b      	orrs	r3, r1
 80018e8:	e670      	b.n	80015cc <__aeabi_dsub+0x384>
 80018ea:	08c0      	lsrs	r0, r0, #3
 80018ec:	077b      	lsls	r3, r7, #29
 80018ee:	4303      	orrs	r3, r0
 80018f0:	08fa      	lsrs	r2, r7, #3
 80018f2:	e640      	b.n	8001576 <__aeabi_dsub+0x32e>
 80018f4:	464c      	mov	r4, r9
 80018f6:	3920      	subs	r1, #32
 80018f8:	40cc      	lsrs	r4, r1
 80018fa:	4661      	mov	r1, ip
 80018fc:	2920      	cmp	r1, #32
 80018fe:	d006      	beq.n	800190e <__aeabi_dsub+0x6c6>
 8001900:	4666      	mov	r6, ip
 8001902:	2140      	movs	r1, #64	; 0x40
 8001904:	1b89      	subs	r1, r1, r6
 8001906:	464e      	mov	r6, r9
 8001908:	408e      	lsls	r6, r1
 800190a:	4333      	orrs	r3, r6
 800190c:	4698      	mov	r8, r3
 800190e:	4643      	mov	r3, r8
 8001910:	1e59      	subs	r1, r3, #1
 8001912:	418b      	sbcs	r3, r1
 8001914:	431c      	orrs	r4, r3
 8001916:	e5d8      	b.n	80014ca <__aeabi_dsub+0x282>
 8001918:	181c      	adds	r4, r3, r0
 800191a:	4284      	cmp	r4, r0
 800191c:	4180      	sbcs	r0, r0
 800191e:	444f      	add	r7, r9
 8001920:	46ba      	mov	sl, r7
 8001922:	4240      	negs	r0, r0
 8001924:	4482      	add	sl, r0
 8001926:	e6d9      	b.n	80016dc <__aeabi_dsub+0x494>
 8001928:	4653      	mov	r3, sl
 800192a:	4323      	orrs	r3, r4
 800192c:	d100      	bne.n	8001930 <__aeabi_dsub+0x6e8>
 800192e:	e6cb      	b.n	80016c8 <__aeabi_dsub+0x480>
 8001930:	e614      	b.n	800155c <__aeabi_dsub+0x314>
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	000007ff 	.word	0x000007ff
 8001938:	ff7fffff 	.word	0xff7fffff
 800193c:	000007fe 	.word	0x000007fe
 8001940:	2300      	movs	r3, #0
 8001942:	4a01      	ldr	r2, [pc, #4]	; (8001948 <__aeabi_dsub+0x700>)
 8001944:	001c      	movs	r4, r3
 8001946:	e529      	b.n	800139c <__aeabi_dsub+0x154>
 8001948:	000007ff 	.word	0x000007ff

0800194c <__aeabi_d2iz>:
 800194c:	000a      	movs	r2, r1
 800194e:	b530      	push	{r4, r5, lr}
 8001950:	4c13      	ldr	r4, [pc, #76]	; (80019a0 <__aeabi_d2iz+0x54>)
 8001952:	0053      	lsls	r3, r2, #1
 8001954:	0309      	lsls	r1, r1, #12
 8001956:	0005      	movs	r5, r0
 8001958:	0b09      	lsrs	r1, r1, #12
 800195a:	2000      	movs	r0, #0
 800195c:	0d5b      	lsrs	r3, r3, #21
 800195e:	0fd2      	lsrs	r2, r2, #31
 8001960:	42a3      	cmp	r3, r4
 8001962:	dd04      	ble.n	800196e <__aeabi_d2iz+0x22>
 8001964:	480f      	ldr	r0, [pc, #60]	; (80019a4 <__aeabi_d2iz+0x58>)
 8001966:	4283      	cmp	r3, r0
 8001968:	dd02      	ble.n	8001970 <__aeabi_d2iz+0x24>
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <__aeabi_d2iz+0x5c>)
 800196c:	18d0      	adds	r0, r2, r3
 800196e:	bd30      	pop	{r4, r5, pc}
 8001970:	2080      	movs	r0, #128	; 0x80
 8001972:	0340      	lsls	r0, r0, #13
 8001974:	4301      	orrs	r1, r0
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <__aeabi_d2iz+0x60>)
 8001978:	1ac0      	subs	r0, r0, r3
 800197a:	281f      	cmp	r0, #31
 800197c:	dd08      	ble.n	8001990 <__aeabi_d2iz+0x44>
 800197e:	480c      	ldr	r0, [pc, #48]	; (80019b0 <__aeabi_d2iz+0x64>)
 8001980:	1ac3      	subs	r3, r0, r3
 8001982:	40d9      	lsrs	r1, r3
 8001984:	000b      	movs	r3, r1
 8001986:	4258      	negs	r0, r3
 8001988:	2a00      	cmp	r2, #0
 800198a:	d1f0      	bne.n	800196e <__aeabi_d2iz+0x22>
 800198c:	0018      	movs	r0, r3
 800198e:	e7ee      	b.n	800196e <__aeabi_d2iz+0x22>
 8001990:	4c08      	ldr	r4, [pc, #32]	; (80019b4 <__aeabi_d2iz+0x68>)
 8001992:	40c5      	lsrs	r5, r0
 8001994:	46a4      	mov	ip, r4
 8001996:	4463      	add	r3, ip
 8001998:	4099      	lsls	r1, r3
 800199a:	000b      	movs	r3, r1
 800199c:	432b      	orrs	r3, r5
 800199e:	e7f2      	b.n	8001986 <__aeabi_d2iz+0x3a>
 80019a0:	000003fe 	.word	0x000003fe
 80019a4:	0000041d 	.word	0x0000041d
 80019a8:	7fffffff 	.word	0x7fffffff
 80019ac:	00000433 	.word	0x00000433
 80019b0:	00000413 	.word	0x00000413
 80019b4:	fffffbed 	.word	0xfffffbed

080019b8 <__aeabi_i2d>:
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	2800      	cmp	r0, #0
 80019bc:	d016      	beq.n	80019ec <__aeabi_i2d+0x34>
 80019be:	17c3      	asrs	r3, r0, #31
 80019c0:	18c5      	adds	r5, r0, r3
 80019c2:	405d      	eors	r5, r3
 80019c4:	0fc4      	lsrs	r4, r0, #31
 80019c6:	0028      	movs	r0, r5
 80019c8:	f000 f88a 	bl	8001ae0 <__clzsi2>
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <__aeabi_i2d+0x5c>)
 80019ce:	1a1b      	subs	r3, r3, r0
 80019d0:	280a      	cmp	r0, #10
 80019d2:	dc16      	bgt.n	8001a02 <__aeabi_i2d+0x4a>
 80019d4:	0002      	movs	r2, r0
 80019d6:	002e      	movs	r6, r5
 80019d8:	3215      	adds	r2, #21
 80019da:	4096      	lsls	r6, r2
 80019dc:	220b      	movs	r2, #11
 80019de:	1a12      	subs	r2, r2, r0
 80019e0:	40d5      	lsrs	r5, r2
 80019e2:	055b      	lsls	r3, r3, #21
 80019e4:	032d      	lsls	r5, r5, #12
 80019e6:	0b2d      	lsrs	r5, r5, #12
 80019e8:	0d5b      	lsrs	r3, r3, #21
 80019ea:	e003      	b.n	80019f4 <__aeabi_i2d+0x3c>
 80019ec:	2400      	movs	r4, #0
 80019ee:	2300      	movs	r3, #0
 80019f0:	2500      	movs	r5, #0
 80019f2:	2600      	movs	r6, #0
 80019f4:	051b      	lsls	r3, r3, #20
 80019f6:	432b      	orrs	r3, r5
 80019f8:	07e4      	lsls	r4, r4, #31
 80019fa:	4323      	orrs	r3, r4
 80019fc:	0030      	movs	r0, r6
 80019fe:	0019      	movs	r1, r3
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	380b      	subs	r0, #11
 8001a04:	4085      	lsls	r5, r0
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	032d      	lsls	r5, r5, #12
 8001a0a:	2600      	movs	r6, #0
 8001a0c:	0b2d      	lsrs	r5, r5, #12
 8001a0e:	0d5b      	lsrs	r3, r3, #21
 8001a10:	e7f0      	b.n	80019f4 <__aeabi_i2d+0x3c>
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	0000041e 	.word	0x0000041e

08001a18 <__aeabi_ui2d>:
 8001a18:	b510      	push	{r4, lr}
 8001a1a:	1e04      	subs	r4, r0, #0
 8001a1c:	d010      	beq.n	8001a40 <__aeabi_ui2d+0x28>
 8001a1e:	f000 f85f 	bl	8001ae0 <__clzsi2>
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <__aeabi_ui2d+0x48>)
 8001a24:	1a1b      	subs	r3, r3, r0
 8001a26:	280a      	cmp	r0, #10
 8001a28:	dc11      	bgt.n	8001a4e <__aeabi_ui2d+0x36>
 8001a2a:	220b      	movs	r2, #11
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	1a12      	subs	r2, r2, r0
 8001a30:	40d1      	lsrs	r1, r2
 8001a32:	3015      	adds	r0, #21
 8001a34:	030a      	lsls	r2, r1, #12
 8001a36:	055b      	lsls	r3, r3, #21
 8001a38:	4084      	lsls	r4, r0
 8001a3a:	0b12      	lsrs	r2, r2, #12
 8001a3c:	0d5b      	lsrs	r3, r3, #21
 8001a3e:	e001      	b.n	8001a44 <__aeabi_ui2d+0x2c>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	051b      	lsls	r3, r3, #20
 8001a46:	4313      	orrs	r3, r2
 8001a48:	0020      	movs	r0, r4
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	bd10      	pop	{r4, pc}
 8001a4e:	0022      	movs	r2, r4
 8001a50:	380b      	subs	r0, #11
 8001a52:	4082      	lsls	r2, r0
 8001a54:	055b      	lsls	r3, r3, #21
 8001a56:	0312      	lsls	r2, r2, #12
 8001a58:	2400      	movs	r4, #0
 8001a5a:	0b12      	lsrs	r2, r2, #12
 8001a5c:	0d5b      	lsrs	r3, r3, #21
 8001a5e:	e7f1      	b.n	8001a44 <__aeabi_ui2d+0x2c>
 8001a60:	0000041e 	.word	0x0000041e

08001a64 <__aeabi_cdrcmple>:
 8001a64:	4684      	mov	ip, r0
 8001a66:	0010      	movs	r0, r2
 8001a68:	4662      	mov	r2, ip
 8001a6a:	468c      	mov	ip, r1
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	4663      	mov	r3, ip
 8001a70:	e000      	b.n	8001a74 <__aeabi_cdcmpeq>
 8001a72:	46c0      	nop			; (mov r8, r8)

08001a74 <__aeabi_cdcmpeq>:
 8001a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001a76:	f000 f905 	bl	8001c84 <__ledf2>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d401      	bmi.n	8001a82 <__aeabi_cdcmpeq+0xe>
 8001a7e:	2100      	movs	r1, #0
 8001a80:	42c8      	cmn	r0, r1
 8001a82:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001a84 <__aeabi_dcmpeq>:
 8001a84:	b510      	push	{r4, lr}
 8001a86:	f000 f855 	bl	8001b34 <__eqdf2>
 8001a8a:	4240      	negs	r0, r0
 8001a8c:	3001      	adds	r0, #1
 8001a8e:	bd10      	pop	{r4, pc}

08001a90 <__aeabi_dcmplt>:
 8001a90:	b510      	push	{r4, lr}
 8001a92:	f000 f8f7 	bl	8001c84 <__ledf2>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	db01      	blt.n	8001a9e <__aeabi_dcmplt+0xe>
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	bd10      	pop	{r4, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)

08001aa4 <__aeabi_dcmple>:
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	f000 f8ed 	bl	8001c84 <__ledf2>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	dd01      	ble.n	8001ab2 <__aeabi_dcmple+0xe>
 8001aae:	2000      	movs	r0, #0
 8001ab0:	bd10      	pop	{r4, pc}
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	bd10      	pop	{r4, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)

08001ab8 <__aeabi_dcmpgt>:
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	f000 f87d 	bl	8001bb8 <__gedf2>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	dc01      	bgt.n	8001ac6 <__aeabi_dcmpgt+0xe>
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	bd10      	pop	{r4, pc}
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)

08001acc <__aeabi_dcmpge>:
 8001acc:	b510      	push	{r4, lr}
 8001ace:	f000 f873 	bl	8001bb8 <__gedf2>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	da01      	bge.n	8001ada <__aeabi_dcmpge+0xe>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	bd10      	pop	{r4, pc}
 8001ada:	2001      	movs	r0, #1
 8001adc:	bd10      	pop	{r4, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)

08001ae0 <__clzsi2>:
 8001ae0:	211c      	movs	r1, #28
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	041b      	lsls	r3, r3, #16
 8001ae6:	4298      	cmp	r0, r3
 8001ae8:	d301      	bcc.n	8001aee <__clzsi2+0xe>
 8001aea:	0c00      	lsrs	r0, r0, #16
 8001aec:	3910      	subs	r1, #16
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	4298      	cmp	r0, r3
 8001af2:	d301      	bcc.n	8001af8 <__clzsi2+0x18>
 8001af4:	0a00      	lsrs	r0, r0, #8
 8001af6:	3908      	subs	r1, #8
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	4298      	cmp	r0, r3
 8001afc:	d301      	bcc.n	8001b02 <__clzsi2+0x22>
 8001afe:	0900      	lsrs	r0, r0, #4
 8001b00:	3904      	subs	r1, #4
 8001b02:	a202      	add	r2, pc, #8	; (adr r2, 8001b0c <__clzsi2+0x2c>)
 8001b04:	5c10      	ldrb	r0, [r2, r0]
 8001b06:	1840      	adds	r0, r0, r1
 8001b08:	4770      	bx	lr
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	02020304 	.word	0x02020304
 8001b10:	01010101 	.word	0x01010101
	...

08001b1c <__clzdi2>:
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	2900      	cmp	r1, #0
 8001b20:	d103      	bne.n	8001b2a <__clzdi2+0xe>
 8001b22:	f7ff ffdd 	bl	8001ae0 <__clzsi2>
 8001b26:	3020      	adds	r0, #32
 8001b28:	e002      	b.n	8001b30 <__clzdi2+0x14>
 8001b2a:	0008      	movs	r0, r1
 8001b2c:	f7ff ffd8 	bl	8001ae0 <__clzsi2>
 8001b30:	bd10      	pop	{r4, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)

08001b34 <__eqdf2>:
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	464e      	mov	r6, r9
 8001b38:	4645      	mov	r5, r8
 8001b3a:	46de      	mov	lr, fp
 8001b3c:	4657      	mov	r7, sl
 8001b3e:	4690      	mov	r8, r2
 8001b40:	b5e0      	push	{r5, r6, r7, lr}
 8001b42:	0017      	movs	r7, r2
 8001b44:	031a      	lsls	r2, r3, #12
 8001b46:	0b12      	lsrs	r2, r2, #12
 8001b48:	0005      	movs	r5, r0
 8001b4a:	4684      	mov	ip, r0
 8001b4c:	4819      	ldr	r0, [pc, #100]	; (8001bb4 <__eqdf2+0x80>)
 8001b4e:	030e      	lsls	r6, r1, #12
 8001b50:	004c      	lsls	r4, r1, #1
 8001b52:	4691      	mov	r9, r2
 8001b54:	005a      	lsls	r2, r3, #1
 8001b56:	0fdb      	lsrs	r3, r3, #31
 8001b58:	469b      	mov	fp, r3
 8001b5a:	0b36      	lsrs	r6, r6, #12
 8001b5c:	0d64      	lsrs	r4, r4, #21
 8001b5e:	0fc9      	lsrs	r1, r1, #31
 8001b60:	0d52      	lsrs	r2, r2, #21
 8001b62:	4284      	cmp	r4, r0
 8001b64:	d019      	beq.n	8001b9a <__eqdf2+0x66>
 8001b66:	4282      	cmp	r2, r0
 8001b68:	d010      	beq.n	8001b8c <__eqdf2+0x58>
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	4294      	cmp	r4, r2
 8001b6e:	d10e      	bne.n	8001b8e <__eqdf2+0x5a>
 8001b70:	454e      	cmp	r6, r9
 8001b72:	d10c      	bne.n	8001b8e <__eqdf2+0x5a>
 8001b74:	2001      	movs	r0, #1
 8001b76:	45c4      	cmp	ip, r8
 8001b78:	d109      	bne.n	8001b8e <__eqdf2+0x5a>
 8001b7a:	4559      	cmp	r1, fp
 8001b7c:	d017      	beq.n	8001bae <__eqdf2+0x7a>
 8001b7e:	2c00      	cmp	r4, #0
 8001b80:	d105      	bne.n	8001b8e <__eqdf2+0x5a>
 8001b82:	0030      	movs	r0, r6
 8001b84:	4328      	orrs	r0, r5
 8001b86:	1e43      	subs	r3, r0, #1
 8001b88:	4198      	sbcs	r0, r3
 8001b8a:	e000      	b.n	8001b8e <__eqdf2+0x5a>
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b90:	46bb      	mov	fp, r7
 8001b92:	46b2      	mov	sl, r6
 8001b94:	46a9      	mov	r9, r5
 8001b96:	46a0      	mov	r8, r4
 8001b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9a:	0033      	movs	r3, r6
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	432b      	orrs	r3, r5
 8001ba0:	d1f5      	bne.n	8001b8e <__eqdf2+0x5a>
 8001ba2:	42a2      	cmp	r2, r4
 8001ba4:	d1f3      	bne.n	8001b8e <__eqdf2+0x5a>
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	433b      	orrs	r3, r7
 8001baa:	d1f0      	bne.n	8001b8e <__eqdf2+0x5a>
 8001bac:	e7e2      	b.n	8001b74 <__eqdf2+0x40>
 8001bae:	2000      	movs	r0, #0
 8001bb0:	e7ed      	b.n	8001b8e <__eqdf2+0x5a>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	000007ff 	.word	0x000007ff

08001bb8 <__gedf2>:
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	4647      	mov	r7, r8
 8001bbc:	46ce      	mov	lr, r9
 8001bbe:	0004      	movs	r4, r0
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	0016      	movs	r6, r2
 8001bc4:	031b      	lsls	r3, r3, #12
 8001bc6:	0b1b      	lsrs	r3, r3, #12
 8001bc8:	4d2d      	ldr	r5, [pc, #180]	; (8001c80 <__gedf2+0xc8>)
 8001bca:	004a      	lsls	r2, r1, #1
 8001bcc:	4699      	mov	r9, r3
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	0043      	lsls	r3, r0, #1
 8001bd2:	030f      	lsls	r7, r1, #12
 8001bd4:	46a4      	mov	ip, r4
 8001bd6:	46b0      	mov	r8, r6
 8001bd8:	0b3f      	lsrs	r7, r7, #12
 8001bda:	0d52      	lsrs	r2, r2, #21
 8001bdc:	0fc9      	lsrs	r1, r1, #31
 8001bde:	0d5b      	lsrs	r3, r3, #21
 8001be0:	0fc0      	lsrs	r0, r0, #31
 8001be2:	42aa      	cmp	r2, r5
 8001be4:	d021      	beq.n	8001c2a <__gedf2+0x72>
 8001be6:	42ab      	cmp	r3, r5
 8001be8:	d013      	beq.n	8001c12 <__gedf2+0x5a>
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d122      	bne.n	8001c34 <__gedf2+0x7c>
 8001bee:	433c      	orrs	r4, r7
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <__gedf2+0x42>
 8001bf4:	464d      	mov	r5, r9
 8001bf6:	432e      	orrs	r6, r5
 8001bf8:	d022      	beq.n	8001c40 <__gedf2+0x88>
 8001bfa:	2c00      	cmp	r4, #0
 8001bfc:	d010      	beq.n	8001c20 <__gedf2+0x68>
 8001bfe:	4281      	cmp	r1, r0
 8001c00:	d022      	beq.n	8001c48 <__gedf2+0x90>
 8001c02:	2002      	movs	r0, #2
 8001c04:	3901      	subs	r1, #1
 8001c06:	4008      	ands	r0, r1
 8001c08:	3801      	subs	r0, #1
 8001c0a:	bcc0      	pop	{r6, r7}
 8001c0c:	46b9      	mov	r9, r7
 8001c0e:	46b0      	mov	r8, r6
 8001c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c12:	464d      	mov	r5, r9
 8001c14:	432e      	orrs	r6, r5
 8001c16:	d129      	bne.n	8001c6c <__gedf2+0xb4>
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	d1f0      	bne.n	8001bfe <__gedf2+0x46>
 8001c1c:	433c      	orrs	r4, r7
 8001c1e:	d1ee      	bne.n	8001bfe <__gedf2+0x46>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d1f2      	bne.n	8001c0a <__gedf2+0x52>
 8001c24:	2001      	movs	r0, #1
 8001c26:	4240      	negs	r0, r0
 8001c28:	e7ef      	b.n	8001c0a <__gedf2+0x52>
 8001c2a:	003d      	movs	r5, r7
 8001c2c:	4325      	orrs	r5, r4
 8001c2e:	d11d      	bne.n	8001c6c <__gedf2+0xb4>
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d0ee      	beq.n	8001c12 <__gedf2+0x5a>
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1e2      	bne.n	8001bfe <__gedf2+0x46>
 8001c38:	464c      	mov	r4, r9
 8001c3a:	4326      	orrs	r6, r4
 8001c3c:	d1df      	bne.n	8001bfe <__gedf2+0x46>
 8001c3e:	e7e0      	b.n	8001c02 <__gedf2+0x4a>
 8001c40:	2000      	movs	r0, #0
 8001c42:	2c00      	cmp	r4, #0
 8001c44:	d0e1      	beq.n	8001c0a <__gedf2+0x52>
 8001c46:	e7dc      	b.n	8001c02 <__gedf2+0x4a>
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dc0a      	bgt.n	8001c62 <__gedf2+0xaa>
 8001c4c:	dbe8      	blt.n	8001c20 <__gedf2+0x68>
 8001c4e:	454f      	cmp	r7, r9
 8001c50:	d8d7      	bhi.n	8001c02 <__gedf2+0x4a>
 8001c52:	d00e      	beq.n	8001c72 <__gedf2+0xba>
 8001c54:	2000      	movs	r0, #0
 8001c56:	454f      	cmp	r7, r9
 8001c58:	d2d7      	bcs.n	8001c0a <__gedf2+0x52>
 8001c5a:	2900      	cmp	r1, #0
 8001c5c:	d0e2      	beq.n	8001c24 <__gedf2+0x6c>
 8001c5e:	0008      	movs	r0, r1
 8001c60:	e7d3      	b.n	8001c0a <__gedf2+0x52>
 8001c62:	4243      	negs	r3, r0
 8001c64:	4158      	adcs	r0, r3
 8001c66:	0040      	lsls	r0, r0, #1
 8001c68:	3801      	subs	r0, #1
 8001c6a:	e7ce      	b.n	8001c0a <__gedf2+0x52>
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	4240      	negs	r0, r0
 8001c70:	e7cb      	b.n	8001c0a <__gedf2+0x52>
 8001c72:	45c4      	cmp	ip, r8
 8001c74:	d8c5      	bhi.n	8001c02 <__gedf2+0x4a>
 8001c76:	2000      	movs	r0, #0
 8001c78:	45c4      	cmp	ip, r8
 8001c7a:	d2c6      	bcs.n	8001c0a <__gedf2+0x52>
 8001c7c:	e7ed      	b.n	8001c5a <__gedf2+0xa2>
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	000007ff 	.word	0x000007ff

08001c84 <__ledf2>:
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	4647      	mov	r7, r8
 8001c88:	46ce      	mov	lr, r9
 8001c8a:	0004      	movs	r4, r0
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	0016      	movs	r6, r2
 8001c90:	031b      	lsls	r3, r3, #12
 8001c92:	0b1b      	lsrs	r3, r3, #12
 8001c94:	4d2c      	ldr	r5, [pc, #176]	; (8001d48 <__ledf2+0xc4>)
 8001c96:	004a      	lsls	r2, r1, #1
 8001c98:	4699      	mov	r9, r3
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	0043      	lsls	r3, r0, #1
 8001c9e:	030f      	lsls	r7, r1, #12
 8001ca0:	46a4      	mov	ip, r4
 8001ca2:	46b0      	mov	r8, r6
 8001ca4:	0b3f      	lsrs	r7, r7, #12
 8001ca6:	0d52      	lsrs	r2, r2, #21
 8001ca8:	0fc9      	lsrs	r1, r1, #31
 8001caa:	0d5b      	lsrs	r3, r3, #21
 8001cac:	0fc0      	lsrs	r0, r0, #31
 8001cae:	42aa      	cmp	r2, r5
 8001cb0:	d00d      	beq.n	8001cce <__ledf2+0x4a>
 8001cb2:	42ab      	cmp	r3, r5
 8001cb4:	d010      	beq.n	8001cd8 <__ledf2+0x54>
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d127      	bne.n	8001d0a <__ledf2+0x86>
 8001cba:	433c      	orrs	r4, r7
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d111      	bne.n	8001ce4 <__ledf2+0x60>
 8001cc0:	464d      	mov	r5, r9
 8001cc2:	432e      	orrs	r6, r5
 8001cc4:	d10e      	bne.n	8001ce4 <__ledf2+0x60>
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	2c00      	cmp	r4, #0
 8001cca:	d015      	beq.n	8001cf8 <__ledf2+0x74>
 8001ccc:	e00e      	b.n	8001cec <__ledf2+0x68>
 8001cce:	003d      	movs	r5, r7
 8001cd0:	4325      	orrs	r5, r4
 8001cd2:	d110      	bne.n	8001cf6 <__ledf2+0x72>
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d118      	bne.n	8001d0a <__ledf2+0x86>
 8001cd8:	464d      	mov	r5, r9
 8001cda:	432e      	orrs	r6, r5
 8001cdc:	d10b      	bne.n	8001cf6 <__ledf2+0x72>
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	d102      	bne.n	8001ce8 <__ledf2+0x64>
 8001ce2:	433c      	orrs	r4, r7
 8001ce4:	2c00      	cmp	r4, #0
 8001ce6:	d00b      	beq.n	8001d00 <__ledf2+0x7c>
 8001ce8:	4281      	cmp	r1, r0
 8001cea:	d014      	beq.n	8001d16 <__ledf2+0x92>
 8001cec:	2002      	movs	r0, #2
 8001cee:	3901      	subs	r1, #1
 8001cf0:	4008      	ands	r0, r1
 8001cf2:	3801      	subs	r0, #1
 8001cf4:	e000      	b.n	8001cf8 <__ledf2+0x74>
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	bcc0      	pop	{r6, r7}
 8001cfa:	46b9      	mov	r9, r7
 8001cfc:	46b0      	mov	r8, r6
 8001cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d1f9      	bne.n	8001cf8 <__ledf2+0x74>
 8001d04:	2001      	movs	r0, #1
 8001d06:	4240      	negs	r0, r0
 8001d08:	e7f6      	b.n	8001cf8 <__ledf2+0x74>
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ec      	bne.n	8001ce8 <__ledf2+0x64>
 8001d0e:	464c      	mov	r4, r9
 8001d10:	4326      	orrs	r6, r4
 8001d12:	d1e9      	bne.n	8001ce8 <__ledf2+0x64>
 8001d14:	e7ea      	b.n	8001cec <__ledf2+0x68>
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dd04      	ble.n	8001d24 <__ledf2+0xa0>
 8001d1a:	4243      	negs	r3, r0
 8001d1c:	4158      	adcs	r0, r3
 8001d1e:	0040      	lsls	r0, r0, #1
 8001d20:	3801      	subs	r0, #1
 8001d22:	e7e9      	b.n	8001cf8 <__ledf2+0x74>
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbeb      	blt.n	8001d00 <__ledf2+0x7c>
 8001d28:	454f      	cmp	r7, r9
 8001d2a:	d8df      	bhi.n	8001cec <__ledf2+0x68>
 8001d2c:	d006      	beq.n	8001d3c <__ledf2+0xb8>
 8001d2e:	2000      	movs	r0, #0
 8001d30:	454f      	cmp	r7, r9
 8001d32:	d2e1      	bcs.n	8001cf8 <__ledf2+0x74>
 8001d34:	2900      	cmp	r1, #0
 8001d36:	d0e5      	beq.n	8001d04 <__ledf2+0x80>
 8001d38:	0008      	movs	r0, r1
 8001d3a:	e7dd      	b.n	8001cf8 <__ledf2+0x74>
 8001d3c:	45c4      	cmp	ip, r8
 8001d3e:	d8d5      	bhi.n	8001cec <__ledf2+0x68>
 8001d40:	2000      	movs	r0, #0
 8001d42:	45c4      	cmp	ip, r8
 8001d44:	d2d8      	bcs.n	8001cf8 <__ledf2+0x74>
 8001d46:	e7f5      	b.n	8001d34 <__ledf2+0xb0>
 8001d48:	000007ff 	.word	0x000007ff

08001d4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	0018      	movs	r0, r3
 8001d56:	230c      	movs	r3, #12
 8001d58:	001a      	movs	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f005 fd3c 	bl	80077d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d60:	4b5c      	ldr	r3, [pc, #368]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d62:	4a5d      	ldr	r2, [pc, #372]	; (8001ed8 <MX_ADC1_Init+0x18c>)
 8001d64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d66:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	05d2      	lsls	r2, r2, #23
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d6e:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d74:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d7a:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	0392      	lsls	r2, r2, #14
 8001d80:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d82:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d84:	2208      	movs	r2, #8
 8001d86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d88:	4b52      	ldr	r3, [pc, #328]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001d8e:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 7;
 8001d9a:	4b4e      	ldr	r3, [pc, #312]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dac:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001dae:	222c      	movs	r2, #44	; 0x2c
 8001db0:	2100      	movs	r1, #0
 8001db2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001db4:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001dba:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001dc0:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001dc8:	223c      	movs	r2, #60	; 0x3c
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f001 f92e 	bl	8003038 <HAL_ADC_Init>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d001      	beq.n	8001de4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001de0:	f000 fb42 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4a3d      	ldr	r2, [pc, #244]	; (8001edc <MX_ADC1_Init+0x190>)
 8001de8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df6:	1d3a      	adds	r2, r7, #4
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f001 fb69 	bl	80034d4 <HAL_ADC_ConfigChannel>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d001      	beq.n	8001e0a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001e06:	f000 fb2f 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <MX_ADC1_Init+0x194>)
 8001e0e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2204      	movs	r2, #4
 8001e14:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e16:	1d3a      	adds	r2, r7, #4
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f001 fb59 	bl	80034d4 <HAL_ADC_ConfigChannel>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001e26:	f000 fb1f 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2208      	movs	r2, #8
 8001e34:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e36:	1d3a      	adds	r2, r7, #4
 8001e38:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f001 fb49 	bl	80034d4 <HAL_ADC_ConfigChannel>
 8001e42:	1e03      	subs	r3, r0, #0
 8001e44:	d001      	beq.n	8001e4a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001e46:	f000 fb0f 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <MX_ADC1_Init+0x198>)
 8001e4e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	220c      	movs	r2, #12
 8001e54:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e56:	1d3a      	adds	r2, r7, #4
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f001 fb39 	bl	80034d4 <HAL_ADC_ConfigChannel>
 8001e62:	1e03      	subs	r3, r0, #0
 8001e64:	d001      	beq.n	8001e6a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001e66:	f000 faff 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <MX_ADC1_Init+0x19c>)
 8001e6e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2210      	movs	r2, #16
 8001e74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e76:	1d3a      	adds	r2, r7, #4
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f001 fb29 	bl	80034d4 <HAL_ADC_ConfigChannel>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d001      	beq.n	8001e8a <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8001e86:	f000 faef 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <MX_ADC1_Init+0x1a0>)
 8001e8e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2214      	movs	r2, #20
 8001e94:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e96:	1d3a      	adds	r2, r7, #4
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001e9a:	0011      	movs	r1, r2
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f001 fb19 	bl	80034d4 <HAL_ADC_ConfigChannel>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001ea6:	f000 fadf 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <MX_ADC1_Init+0x1a4>)
 8001eae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2218      	movs	r2, #24
 8001eb4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb6:	1d3a      	adds	r2, r7, #4
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_ADC1_Init+0x188>)
 8001eba:	0011      	movs	r1, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f001 fb09 	bl	80034d4 <HAL_ADC_ConfigChannel>
 8001ec2:	1e03      	subs	r3, r0, #0
 8001ec4:	d001      	beq.n	8001eca <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8001ec6:	f000 facf 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000030 	.word	0x20000030
 8001ed8:	40012400 	.word	0x40012400
 8001edc:	18000040 	.word	0x18000040
 8001ee0:	1c000080 	.word	0x1c000080
 8001ee4:	04000002 	.word	0x04000002
 8001ee8:	20000100 	.word	0x20000100
 8001eec:	24000200 	.word	0x24000200
 8001ef0:	b0001000 	.word	0xb0001000

08001ef4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b08b      	sub	sp, #44	; 0x2c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	2414      	movs	r4, #20
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	0018      	movs	r0, r3
 8001f02:	2314      	movs	r3, #20
 8001f04:	001a      	movs	r2, r3
 8001f06:	2100      	movs	r1, #0
 8001f08:	f005 fc66 	bl	80077d8 <memset>
  if(adcHandle->Instance==ADC1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3b      	ldr	r2, [pc, #236]	; (8002000 <HAL_ADC_MspInit+0x10c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d16f      	bne.n	8001ff6 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0349      	lsls	r1, r1, #13
 8001f20:	430a      	orrs	r2, r1
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
 8001f24:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	035b      	lsls	r3, r3, #13
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f38:	2101      	movs	r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3e:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	2201      	movs	r2, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f50:	2102      	movs	r1, #2
 8001f52:	430a      	orrs	r2, r1
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_ADC_MspInit+0x110>)
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_IN0_GAIN_CO_Pin|ADC1_IN1_OFFSET_CO_Pin|ADC1_IN6_CO_Pin|ADC1_IN7_NO_Pin;
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	22c3      	movs	r2, #195	; 0xc3
 8001f66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f68:	193b      	adds	r3, r7, r4
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	193a      	adds	r2, r7, r4
 8001f76:	23a0      	movs	r3, #160	; 0xa0
 8001f78:	05db      	lsls	r3, r3, #23
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f002 f991 	bl	80042a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_GAIN_NO_Pin|ADC1_IN9_OFFSET_NO_Pin;
 8001f82:	193b      	adds	r3, r7, r4
 8001f84:	2203      	movs	r2, #3
 8001f86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f88:	193b      	adds	r3, r7, r4
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	193b      	adds	r3, r7, r4
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	193b      	adds	r3, r7, r4
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_ADC_MspInit+0x114>)
 8001f98:	0019      	movs	r1, r3
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	f002 f982 	bl	80042a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_ADC_MspInit+0x11c>)
 8001fa4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fa8:	2205      	movs	r2, #5
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f001 fe43 	bl	8003c68 <HAL_DMA_Init>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001fe6:	f000 fa3f 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001fee:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_ADC_MspInit+0x118>)
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b00b      	add	sp, #44	; 0x2c
 8001ffc:	bd90      	pop	{r4, r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40012400 	.word	0x40012400
 8002004:	40021000 	.word	0x40021000
 8002008:	50000400 	.word	0x50000400
 800200c:	20000094 	.word	0x20000094
 8002010:	40020008 	.word	0x40020008

08002014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <MX_DMA_Init+0x48>)
 800201c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_DMA_Init+0x48>)
 8002020:	2101      	movs	r1, #1
 8002022:	430a      	orrs	r2, r1
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <MX_DMA_Init+0x48>)
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	2201      	movs	r2, #1
 800202c:	4013      	ands	r3, r2
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2009      	movs	r0, #9
 8002038:	f001 fde4 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800203c:	2009      	movs	r0, #9
 800203e:	f001 fdf6 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	200a      	movs	r0, #10
 8002048:	f001 fddc 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800204c:	200a      	movs	r0, #10
 800204e:	f001 fdee 	bl	8003c2e <HAL_NVIC_EnableIRQ>

}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000

08002060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	240c      	movs	r4, #12
 8002068:	193b      	adds	r3, r7, r4
 800206a:	0018      	movs	r0, r3
 800206c:	2314      	movs	r3, #20
 800206e:	001a      	movs	r2, r3
 8002070:	2100      	movs	r1, #0
 8002072:	f005 fbb1 	bl	80077d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <MX_GPIO_Init+0xb8>)
 8002078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <MX_GPIO_Init+0xb8>)
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <MX_GPIO_Init+0xb8>)
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <MX_GPIO_Init+0xb8>)
 8002090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <MX_GPIO_Init+0xb8>)
 8002094:	2102      	movs	r1, #2
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <MX_GPIO_Init+0xb8>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <MX_GPIO_Init+0xb8>)
 80020a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <MX_GPIO_Init+0xb8>)
 80020ac:	2104      	movs	r1, #4
 80020ae:	430a      	orrs	r2, r1
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <MX_GPIO_Init+0xb8>)
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	2204      	movs	r2, #4
 80020b8:	4013      	ands	r3, r2
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_GPIO_Init+0xbc>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	0018      	movs	r0, r3
 80020c6:	f002 fa51 	bl	800456c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	193b      	adds	r3, r7, r4
 80020d2:	2201      	movs	r2, #1
 80020d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	4a0d      	ldr	r2, [pc, #52]	; (800211c <MX_GPIO_Init+0xbc>)
 80020e6:	0019      	movs	r1, r3
 80020e8:	0010      	movs	r0, r2
 80020ea:	f002 f8db 	bl	80042a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_IN_DIP5_Pin|GPIO_IN_DIP4_Pin|GPIO_IN_DIP3_Pin|GPIO_IN_DIP2_Pin
 80020ee:	0021      	movs	r1, r4
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	22fc      	movs	r2, #252	; 0xfc
 80020f4:	0052      	lsls	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
                          |GPIO_IN_DIP1_Pin|GPIO_IN_DIP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2200      	movs	r2, #0
 80020fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	187b      	adds	r3, r7, r1
 8002106:	4a06      	ldr	r2, [pc, #24]	; (8002120 <MX_GPIO_Init+0xc0>)
 8002108:	0019      	movs	r1, r3
 800210a:	0010      	movs	r0, r2
 800210c:	f002 f8ca 	bl	80042a4 <HAL_GPIO_Init>

}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b009      	add	sp, #36	; 0x24
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	50000800 	.word	0x50000800
 8002120:	50000400 	.word	0x50000400

08002124 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b08c      	sub	sp, #48	; 0x30
 8002128:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800212a:	f000 fdb7 	bl	8002c9c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800212e:	f000 f953 	bl	80023d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002132:	f7ff ff95 	bl	8002060 <MX_GPIO_Init>
	MX_DMA_Init();
 8002136:	f7ff ff6d 	bl	8002014 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800213a:	f000 fcaf 	bl	8002a9c <MX_USART2_UART_Init>
	MX_ADC1_Init(); //IC hangs after this init step
 800213e:	f7ff fe05 	bl	8001d4c <MX_ADC1_Init>
	MX_TIM1_Init();
 8002142:	f000 fa03 	bl	800254c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8002146:	f000 fc59 	bl	80029fc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 800214a:	f000 fac9 	bl	80026e0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	struct sensor Co, No, Temp;

	Co.input = &value_adc_DMA[0];
 800214e:	2120      	movs	r1, #32
 8002150:	187b      	adds	r3, r7, r1
 8002152:	4a8b      	ldr	r2, [pc, #556]	; (8002380 <main+0x25c>)
 8002154:	601a      	str	r2, [r3, #0]
	No.input = &value_adc_DMA[1];
 8002156:	2010      	movs	r0, #16
 8002158:	183b      	adds	r3, r7, r0
 800215a:	4a8a      	ldr	r2, [pc, #552]	; (8002384 <main+0x260>)
 800215c:	601a      	str	r2, [r3, #0]
	Co.gain = &value_adc_DMA[2];
 800215e:	187b      	adds	r3, r7, r1
 8002160:	4a89      	ldr	r2, [pc, #548]	; (8002388 <main+0x264>)
 8002162:	605a      	str	r2, [r3, #4]
	Co.offset = &value_adc_DMA[3];
 8002164:	187b      	adds	r3, r7, r1
 8002166:	4a89      	ldr	r2, [pc, #548]	; (800238c <main+0x268>)
 8002168:	609a      	str	r2, [r3, #8]
	No.gain = &value_adc_DMA[4];
 800216a:	183b      	adds	r3, r7, r0
 800216c:	4a88      	ldr	r2, [pc, #544]	; (8002390 <main+0x26c>)
 800216e:	605a      	str	r2, [r3, #4]
	No.offset = &value_adc_DMA[5];
 8002170:	183b      	adds	r3, r7, r0
 8002172:	4a88      	ldr	r2, [pc, #544]	; (8002394 <main+0x270>)
 8002174:	609a      	str	r2, [r3, #8]
	Temp.input = &value_adc_DMA[6];
 8002176:	003b      	movs	r3, r7
 8002178:	4a87      	ldr	r2, [pc, #540]	; (8002398 <main+0x274>)
 800217a:	601a      	str	r2, [r3, #0]
	Temp.gain = 0; //#TODO get this value from internal saved reference value
 800217c:	003b      	movs	r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
	Temp.offset = 0;
 8002182:	003b      	movs	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]



	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //start output PWM 1 CO
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <main+0x278>)
 800218a:	2100      	movs	r1, #0
 800218c:	0018      	movs	r0, r3
 800218e:	f003 f967 	bl	8005460 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //start output PWM 2 NO
 8002192:	4b83      	ldr	r3, [pc, #524]	; (80023a0 <main+0x27c>)
 8002194:	2100      	movs	r1, #0
 8002196:	0018      	movs	r0, r3
 8002198:	f003 f962 	bl	8005460 <HAL_TIM_PWM_Start>
	TIM1->CCR1 =0;
 800219c:	4b81      	ldr	r3, [pc, #516]	; (80023a4 <main+0x280>)
 800219e:	2200      	movs	r2, #0
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR1 =0;
 80021a2:	4b80      	ldr	r3, [pc, #512]	; (80023a4 <main+0x280>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_ADC_Start_DMA(&hadc1, value_adc_DMA, 7); //aquire date from all ADC
 80021a8:	4975      	ldr	r1, [pc, #468]	; (8002380 <main+0x25c>)
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <main+0x284>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	0018      	movs	r0, r3
 80021b0:	f001 f8ea 	bl	8003388 <HAL_ADC_Start_DMA>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_ADC_Start_DMA(&hadc1, value_adc_DMA, 7); //this step takes ca 50uS #TODO perhaps export to internal timer callback (trigger)
 80021b4:	4972      	ldr	r1, [pc, #456]	; (8002380 <main+0x25c>)
 80021b6:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <main+0x284>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	0018      	movs	r0, r3
 80021bc:	f001 f8e4 	bl	8003388 <HAL_ADC_Start_DMA>


		x= TIM1->ARR* *Co.input/4095;
 80021c0:	4b78      	ldr	r3, [pc, #480]	; (80023a4 <main+0x280>)
 80021c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c4:	2420      	movs	r4, #32
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4353      	muls	r3, r2
 80021ce:	4977      	ldr	r1, [pc, #476]	; (80023ac <main+0x288>)
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fd ff97 	bl	8000104 <__udivsi3>
 80021d6:	0003      	movs	r3, r0
 80021d8:	001a      	movs	r2, r3
 80021da:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <main+0x28c>)
 80021dc:	601a      	str	r2, [r3, #0]
		a= (*Co.gain/2048)*20+80; // pitch between 80 and 120 [in percent]
 80021de:	0021      	movs	r1, r4
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0ada      	lsrs	r2, r3, #11
 80021e8:	0013      	movs	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	189b      	adds	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3350      	adds	r3, #80	; 0x50
 80021f2:	001a      	movs	r2, r3
 80021f4:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <main+0x290>)
 80021f6:	601a      	str	r2, [r3, #0]
		b= *Co.offset*0.2-409; //between -409 and +409
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff fc0a 	bl	8001a18 <__aeabi_ui2d>
 8002204:	4a6c      	ldr	r2, [pc, #432]	; (80023b8 <main+0x294>)
 8002206:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <main+0x298>)
 8002208:	f7fe fd5c 	bl	8000cc4 <__aeabi_dmul>
 800220c:	0002      	movs	r2, r0
 800220e:	000b      	movs	r3, r1
 8002210:	0010      	movs	r0, r2
 8002212:	0019      	movs	r1, r3
 8002214:	2200      	movs	r2, #0
 8002216:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <main+0x29c>)
 8002218:	f7ff f816 	bl	8001248 <__aeabi_dsub>
 800221c:	0002      	movs	r2, r0
 800221e:	000b      	movs	r3, r1
 8002220:	0010      	movs	r0, r2
 8002222:	0019      	movs	r1, r3
 8002224:	f7ff fb92 	bl	800194c <__aeabi_d2iz>
 8002228:	0002      	movs	r2, r0
 800222a:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <main+0x2a0>)
 800222c:	601a      	str	r2, [r3, #0]
		y=a*x*0.01+b;  // #TODO add sanity chack that CCR cannot be negative
 800222e:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <main+0x290>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <main+0x28c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4353      	muls	r3, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff fbbd 	bl	80019b8 <__aeabi_i2d>
 800223e:	4a62      	ldr	r2, [pc, #392]	; (80023c8 <main+0x2a4>)
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <main+0x2a8>)
 8002242:	f7fe fd3f 	bl	8000cc4 <__aeabi_dmul>
 8002246:	0002      	movs	r2, r0
 8002248:	000b      	movs	r3, r1
 800224a:	0014      	movs	r4, r2
 800224c:	001d      	movs	r5, r3
 800224e:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <main+0x2a0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff fbb0 	bl	80019b8 <__aeabi_i2d>
 8002258:	0002      	movs	r2, r0
 800225a:	000b      	movs	r3, r1
 800225c:	0020      	movs	r0, r4
 800225e:	0029      	movs	r1, r5
 8002260:	f7fe f9d0 	bl	8000604 <__aeabi_dadd>
 8002264:	0002      	movs	r2, r0
 8002266:	000b      	movs	r3, r1
 8002268:	0010      	movs	r0, r2
 800226a:	0019      	movs	r1, r3
 800226c:	f7ff fb6e 	bl	800194c <__aeabi_d2iz>
 8002270:	0002      	movs	r2, r0
 8002272:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <main+0x2ac>)
 8002274:	601a      	str	r2, [r3, #0]
		if (y<0) {y=0;}
 8002276:	4b56      	ldr	r3, [pc, #344]	; (80023d0 <main+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	da02      	bge.n	8002284 <main+0x160>
 800227e:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <main+0x2ac>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
		if (y>TIM1->ARR) {y=TIM1->ARR;}
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <main+0x280>)
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <main+0x2ac>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d204      	bcs.n	800229a <main+0x176>
 8002290:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <main+0x280>)
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	001a      	movs	r2, r3
 8002296:	4b4e      	ldr	r3, [pc, #312]	; (80023d0 <main+0x2ac>)
 8002298:	601a      	str	r2, [r3, #0]

		TIM1->CCR1 =y ; // #TODO adjust sensitivity of gain and offset
 800229a:	4b4d      	ldr	r3, [pc, #308]	; (80023d0 <main+0x2ac>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <main+0x280>)
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34

		x= TIM2->ARR* *No.input/4095;
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	05db      	lsls	r3, r3, #23
 80022a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a8:	2410      	movs	r4, #16
 80022aa:	193b      	adds	r3, r7, r4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4353      	muls	r3, r2
 80022b2:	493e      	ldr	r1, [pc, #248]	; (80023ac <main+0x288>)
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fd ff25 	bl	8000104 <__udivsi3>
 80022ba:	0003      	movs	r3, r0
 80022bc:	001a      	movs	r2, r3
 80022be:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <main+0x28c>)
 80022c0:	601a      	str	r2, [r3, #0]
		a= (*No.gain/2048)*20+80;
 80022c2:	0021      	movs	r1, r4
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	0ada      	lsrs	r2, r3, #11
 80022cc:	0013      	movs	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	189b      	adds	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	3350      	adds	r3, #80	; 0x50
 80022d6:	001a      	movs	r2, r3
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <main+0x290>)
 80022da:	601a      	str	r2, [r3, #0]
		b= *No.offset*0.2-409;
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7ff fb98 	bl	8001a18 <__aeabi_ui2d>
 80022e8:	4a33      	ldr	r2, [pc, #204]	; (80023b8 <main+0x294>)
 80022ea:	4b34      	ldr	r3, [pc, #208]	; (80023bc <main+0x298>)
 80022ec:	f7fe fcea 	bl	8000cc4 <__aeabi_dmul>
 80022f0:	0002      	movs	r2, r0
 80022f2:	000b      	movs	r3, r1
 80022f4:	0010      	movs	r0, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	2200      	movs	r2, #0
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <main+0x29c>)
 80022fc:	f7fe ffa4 	bl	8001248 <__aeabi_dsub>
 8002300:	0002      	movs	r2, r0
 8002302:	000b      	movs	r3, r1
 8002304:	0010      	movs	r0, r2
 8002306:	0019      	movs	r1, r3
 8002308:	f7ff fb20 	bl	800194c <__aeabi_d2iz>
 800230c:	0002      	movs	r2, r0
 800230e:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <main+0x2a0>)
 8002310:	601a      	str	r2, [r3, #0]
		TIM2->CCR1 = a*0.01*x+b;
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <main+0x290>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff fb4e 	bl	80019b8 <__aeabi_i2d>
 800231c:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <main+0x2a4>)
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <main+0x2a8>)
 8002320:	f7fe fcd0 	bl	8000cc4 <__aeabi_dmul>
 8002324:	0002      	movs	r2, r0
 8002326:	000b      	movs	r3, r1
 8002328:	0014      	movs	r4, r2
 800232a:	001d      	movs	r5, r3
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <main+0x28c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff fb41 	bl	80019b8 <__aeabi_i2d>
 8002336:	0002      	movs	r2, r0
 8002338:	000b      	movs	r3, r1
 800233a:	0020      	movs	r0, r4
 800233c:	0029      	movs	r1, r5
 800233e:	f7fe fcc1 	bl	8000cc4 <__aeabi_dmul>
 8002342:	0002      	movs	r2, r0
 8002344:	000b      	movs	r3, r1
 8002346:	0014      	movs	r4, r2
 8002348:	001d      	movs	r5, r3
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <main+0x2a0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff fb32 	bl	80019b8 <__aeabi_i2d>
 8002354:	0002      	movs	r2, r0
 8002356:	000b      	movs	r3, r1
 8002358:	0020      	movs	r0, r4
 800235a:	0029      	movs	r1, r5
 800235c:	f7fe f952 	bl	8000604 <__aeabi_dadd>
 8002360:	0002      	movs	r2, r0
 8002362:	000b      	movs	r3, r1
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	05cc      	lsls	r4, r1, #23
 8002368:	0010      	movs	r0, r2
 800236a:	0019      	movs	r1, r3
 800236c:	f7fe f860 	bl	8000430 <__aeabi_d2uiz>
 8002370:	0003      	movs	r3, r0
 8002372:	6363      	str	r3, [r4, #52]	; 0x34
		//ideal start values: ail: 2048, offset 4090
		//use y=ax+b
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <main+0x2b0>)
 8002376:	2140      	movs	r1, #64	; 0x40
 8002378:	0018      	movs	r0, r3
 800237a:	f002 f914 	bl	80045a6 <HAL_GPIO_TogglePin>
		HAL_ADC_Start_DMA(&hadc1, value_adc_DMA, 7); //this step takes ca 50uS #TODO perhaps export to internal timer callback (trigger)
 800237e:	e719      	b.n	80021b4 <main+0x90>
 8002380:	200000f0 	.word	0x200000f0
 8002384:	200000f4 	.word	0x200000f4
 8002388:	200000f8 	.word	0x200000f8
 800238c:	200000fc 	.word	0x200000fc
 8002390:	20000100 	.word	0x20000100
 8002394:	20000104 	.word	0x20000104
 8002398:	20000108 	.word	0x20000108
 800239c:	20000114 	.word	0x20000114
 80023a0:	20000160 	.word	0x20000160
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	20000030 	.word	0x20000030
 80023ac:	00000fff 	.word	0x00000fff
 80023b0:	20000004 	.word	0x20000004
 80023b4:	20000000 	.word	0x20000000
 80023b8:	9999999a 	.word	0x9999999a
 80023bc:	3fc99999 	.word	0x3fc99999
 80023c0:	40799000 	.word	0x40799000
 80023c4:	20000110 	.word	0x20000110
 80023c8:	47ae147b 	.word	0x47ae147b
 80023cc:	3f847ae1 	.word	0x3f847ae1
 80023d0:	2000010c 	.word	0x2000010c
 80023d4:	50000800 	.word	0x50000800

080023d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b093      	sub	sp, #76	; 0x4c
 80023dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023de:	2410      	movs	r4, #16
 80023e0:	193b      	adds	r3, r7, r4
 80023e2:	0018      	movs	r0, r3
 80023e4:	2338      	movs	r3, #56	; 0x38
 80023e6:	001a      	movs	r2, r3
 80023e8:	2100      	movs	r1, #0
 80023ea:	f005 f9f5 	bl	80077d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ee:	003b      	movs	r3, r7
 80023f0:	0018      	movs	r0, r3
 80023f2:	2310      	movs	r3, #16
 80023f4:	001a      	movs	r2, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	f005 f9ee 	bl	80077d8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	0018      	movs	r0, r3
 8002402:	f002 f8eb 	bl	80045dc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002406:	193b      	adds	r3, r7, r4
 8002408:	2202      	movs	r2, #2
 800240a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800240c:	193b      	adds	r3, r7, r4
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	0052      	lsls	r2, r2, #1
 8002412:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002414:	193b      	adds	r3, r7, r4
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800241a:	193b      	adds	r3, r7, r4
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002420:	193b      	adds	r3, r7, r4
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002426:	193b      	adds	r3, r7, r4
 8002428:	0018      	movs	r0, r3
 800242a:	f002 f923 	bl	8004674 <HAL_RCC_OscConfig>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0x5e>
	{
		Error_Handler();
 8002432:	f000 f819 	bl	8002468 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002436:	003b      	movs	r3, r7
 8002438:	2207      	movs	r2, #7
 800243a:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800243c:	003b      	movs	r3, r7
 800243e:	2200      	movs	r2, #0
 8002440:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002442:	003b      	movs	r3, r7
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002448:	003b      	movs	r3, r7
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800244e:	003b      	movs	r3, r7
 8002450:	2100      	movs	r1, #0
 8002452:	0018      	movs	r0, r3
 8002454:	f002 fc28 	bl	8004ca8 <HAL_RCC_ClockConfig>
 8002458:	1e03      	subs	r3, r0, #0
 800245a:	d001      	beq.n	8002460 <SystemClock_Config+0x88>
	{
		Error_Handler();
 800245c:	f000 f804 	bl	8002468 <Error_Handler>
	}
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b013      	add	sp, #76	; 0x4c
 8002466:	bd90      	pop	{r4, r7, pc}

08002468 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
}
 800246e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002470:	e7fe      	b.n	8002470 <Error_Handler+0x8>
	...

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_MspInit+0x44>)
 800247c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_MspInit+0x44>)
 8002480:	2101      	movs	r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_MspInit+0x44>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2201      	movs	r2, #1
 800248c:	4013      	ands	r3, r2
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_MspInit+0x44>)
 8002494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_MspInit+0x44>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0549      	lsls	r1, r1, #21
 800249c:	430a      	orrs	r2, r1
 800249e:	63da      	str	r2, [r3, #60]	; 0x3c
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_MspInit+0x44>)
 80024a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	055b      	lsls	r3, r3, #21
 80024a8:	4013      	ands	r3, r2
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b002      	add	sp, #8
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	40021000 	.word	0x40021000

080024bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <NMI_Handler+0x4>

080024c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <HardFault_Handler+0x4>

080024c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e0:	f000 fc46 	bl	8002d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <DMA1_Channel1_IRQHandler+0x14>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f001 fd94 	bl	8004020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	20000094 	.word	0x20000094

08002504 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800250a:	0018      	movs	r0, r3
 800250c:	f001 fd88 	bl	8004020 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002512:	0018      	movs	r0, r3
 8002514:	f001 fd84 	bl	8004020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	200001ac 	.word	0x200001ac
 8002524:	20000208 	.word	0x20000208

08002528 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <USART1_IRQHandler+0x14>)
 800252e:	0018      	movs	r0, r3
 8002530:	f003 ff80 	bl	8006434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	20000264 	.word	0x20000264

08002540 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b09c      	sub	sp, #112	; 0x70
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	2360      	movs	r3, #96	; 0x60
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	0018      	movs	r0, r3
 8002558:	2310      	movs	r3, #16
 800255a:	001a      	movs	r2, r3
 800255c:	2100      	movs	r1, #0
 800255e:	f005 f93b 	bl	80077d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002562:	2354      	movs	r3, #84	; 0x54
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	0018      	movs	r0, r3
 8002568:	230c      	movs	r3, #12
 800256a:	001a      	movs	r2, r3
 800256c:	2100      	movs	r1, #0
 800256e:	f005 f933 	bl	80077d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002572:	2338      	movs	r3, #56	; 0x38
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	0018      	movs	r0, r3
 8002578:	231c      	movs	r3, #28
 800257a:	001a      	movs	r2, r3
 800257c:	2100      	movs	r1, #0
 800257e:	f005 f92b 	bl	80077d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	0018      	movs	r0, r3
 8002586:	2334      	movs	r3, #52	; 0x34
 8002588:	001a      	movs	r2, r3
 800258a:	2100      	movs	r1, #0
 800258c:	f005 f924 	bl	80077d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002590:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <MX_TIM1_Init+0x18c>)
 8002592:	4a52      	ldr	r2, [pc, #328]	; (80026dc <MX_TIM1_Init+0x190>)
 8002594:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002596:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <MX_TIM1_Init+0x18c>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <MX_TIM1_Init+0x18c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 80025a2:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ae:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80025bc:	0018      	movs	r0, r3
 80025be:	f002 fe97 	bl	80052f0 <HAL_TIM_Base_Init>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80025c6:	f7ff ff4f 	bl	8002468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ca:	2160      	movs	r1, #96	; 0x60
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	0152      	lsls	r2, r2, #5
 80025d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025d4:	187a      	adds	r2, r7, r1
 80025d6:	4b40      	ldr	r3, [pc, #256]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80025d8:	0011      	movs	r1, r2
 80025da:	0018      	movs	r0, r3
 80025dc:	f003 f91e 	bl	800581c <HAL_TIM_ConfigClockSource>
 80025e0:	1e03      	subs	r3, r0, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80025e4:	f7ff ff40 	bl	8002468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f002 fed8 	bl	80053a0 <HAL_TIM_PWM_Init>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80025f4:	f7ff ff38 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f8:	2154      	movs	r1, #84	; 0x54
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800260c:	187a      	adds	r2, r7, r1
 800260e:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <MX_TIM1_Init+0x18c>)
 8002610:	0011      	movs	r1, r2
 8002612:	0018      	movs	r0, r3
 8002614:	f003 fdaa 	bl	800616c <HAL_TIMEx_MasterConfigSynchronization>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800261c:	f7ff ff24 	bl	8002468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002620:	2138      	movs	r1, #56	; 0x38
 8002622:	187b      	adds	r3, r7, r1
 8002624:	2260      	movs	r2, #96	; 0x60
 8002626:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002628:	187b      	adds	r3, r7, r1
 800262a:	2200      	movs	r2, #0
 800262c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002634:	187b      	adds	r3, r7, r1
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800263a:	187b      	adds	r3, r7, r1
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002640:	187b      	adds	r3, r7, r1
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002646:	187b      	adds	r3, r7, r1
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800264c:	1879      	adds	r1, r7, r1
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <MX_TIM1_Init+0x18c>)
 8002650:	2200      	movs	r2, #0
 8002652:	0018      	movs	r0, r3
 8002654:	f002 ffe2 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800265c:	f7ff ff04 	bl	8002468 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	0192      	lsls	r2, r2, #6
 8002684:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2200      	movs	r2, #0
 8002696:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	0492      	lsls	r2, r2, #18
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026b2:	1d3a      	adds	r2, r7, #4
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f003 fdbf 	bl	800623c <HAL_TIMEx_ConfigBreakDeadTime>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80026c2:	f7ff fed1 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <MX_TIM1_Init+0x18c>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f92f 	bl	800292c <HAL_TIM_MspPostInit>

}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b01c      	add	sp, #112	; 0x70
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	20000114 	.word	0x20000114
 80026dc:	40012c00 	.word	0x40012c00

080026e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e6:	2328      	movs	r3, #40	; 0x28
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	0018      	movs	r0, r3
 80026ec:	2310      	movs	r3, #16
 80026ee:	001a      	movs	r2, r3
 80026f0:	2100      	movs	r1, #0
 80026f2:	f005 f871 	bl	80077d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f6:	231c      	movs	r3, #28
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	0018      	movs	r0, r3
 80026fc:	230c      	movs	r3, #12
 80026fe:	001a      	movs	r2, r3
 8002700:	2100      	movs	r1, #0
 8002702:	f005 f869 	bl	80077d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002706:	003b      	movs	r3, r7
 8002708:	0018      	movs	r0, r3
 800270a:	231c      	movs	r3, #28
 800270c:	001a      	movs	r2, r3
 800270e:	2100      	movs	r1, #0
 8002710:	f005 f862 	bl	80077d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <MX_TIM2_Init+0xf8>)
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	05d2      	lsls	r2, r2, #23
 800271a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <MX_TIM2_Init+0xf8>)
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <MX_TIM2_Init+0xf8>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256-1;
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <MX_TIM2_Init+0xf8>)
 800272a:	22ff      	movs	r2, #255	; 0xff
 800272c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <MX_TIM2_Init+0xf8>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002734:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <MX_TIM2_Init+0xf8>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <MX_TIM2_Init+0xf8>)
 800273c:	0018      	movs	r0, r3
 800273e:	f002 fdd7 	bl	80052f0 <HAL_TIM_Base_Init>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d001      	beq.n	800274a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002746:	f7ff fe8f 	bl	8002468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274a:	2128      	movs	r1, #40	; 0x28
 800274c:	187b      	adds	r3, r7, r1
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	0152      	lsls	r2, r2, #5
 8002752:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002754:	187a      	adds	r2, r7, r1
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <MX_TIM2_Init+0xf8>)
 8002758:	0011      	movs	r1, r2
 800275a:	0018      	movs	r0, r3
 800275c:	f003 f85e 	bl	800581c <HAL_TIM_ConfigClockSource>
 8002760:	1e03      	subs	r3, r0, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002764:	f7ff fe80 	bl	8002468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <MX_TIM2_Init+0xf8>)
 800276a:	0018      	movs	r0, r3
 800276c:	f002 fe18 	bl	80053a0 <HAL_TIM_PWM_Init>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002774:	f7ff fe78 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002778:	211c      	movs	r1, #28
 800277a:	187b      	adds	r3, r7, r1
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002786:	187a      	adds	r2, r7, r1
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_TIM2_Init+0xf8>)
 800278a:	0011      	movs	r1, r2
 800278c:	0018      	movs	r0, r3
 800278e:	f003 fced 	bl	800616c <HAL_TIMEx_MasterConfigSynchronization>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d001      	beq.n	800279a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8002796:	f7ff fe67 	bl	8002468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800279a:	003b      	movs	r3, r7
 800279c:	2260      	movs	r2, #96	; 0x60
 800279e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027a0:	003b      	movs	r3, r7
 80027a2:	2200      	movs	r2, #0
 80027a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027a6:	003b      	movs	r3, r7
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ac:	003b      	movs	r3, r7
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027b2:	0039      	movs	r1, r7
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_TIM2_Init+0xf8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	0018      	movs	r0, r3
 80027ba:	f002 ff2f 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80027c2:	f7ff fe51 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <MX_TIM2_Init+0xf8>)
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 f8af 	bl	800292c <HAL_TIM_MspPostInit>

}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b00e      	add	sp, #56	; 0x38
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	20000160 	.word	0x20000160

080027dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b08f      	sub	sp, #60	; 0x3c
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e4:	2410      	movs	r4, #16
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	0018      	movs	r0, r3
 80027ea:	2328      	movs	r3, #40	; 0x28
 80027ec:	001a      	movs	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f004 fff2 	bl	80077d8 <memset>
  if(tim_baseHandle->Instance==TIM1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a46      	ldr	r2, [pc, #280]	; (8002914 <HAL_TIM_Base_MspInit+0x138>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d148      	bne.n	8002890 <HAL_TIM_Base_MspInit+0xb4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	0392      	lsls	r2, r2, #14
 8002804:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002806:	193b      	adds	r3, r7, r4
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800280c:	193b      	adds	r3, r7, r4
 800280e:	0018      	movs	r0, r3
 8002810:	f002 fbf4 	bl	8004ffc <HAL_RCCEx_PeriphCLKConfig>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d001      	beq.n	800281c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8002818:	f7ff fe26 	bl	8002468 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_TIM_Base_MspInit+0x13c>)
 800281e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002820:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_TIM_Base_MspInit+0x13c>)
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	0109      	lsls	r1, r1, #4
 8002826:	430a      	orrs	r2, r1
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
 800282a:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_TIM_Base_MspInit+0x13c>)
 800282c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002838:	4b38      	ldr	r3, [pc, #224]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 800283a:	4a39      	ldr	r2, [pc, #228]	; (8002920 <HAL_TIM_Base_MspInit+0x144>)
 800283c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800283e:	4b37      	ldr	r3, [pc, #220]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 8002840:	2214      	movs	r2, #20
 8002842:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002844:	4b35      	ldr	r3, [pc, #212]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 8002846:	2210      	movs	r2, #16
 8002848:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800284a:	4b34      	ldr	r3, [pc, #208]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002856:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	0052      	lsls	r2, r2, #1
 800285c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	00d2      	lsls	r2, r2, #3
 8002864:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 8002868:	2200      	movs	r2, #0
 800286a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002872:	4b2a      	ldr	r3, [pc, #168]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 8002874:	0018      	movs	r0, r3
 8002876:	f001 f9f7 	bl	8003c68 <HAL_DMA_Init>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d001      	beq.n	8002882 <HAL_TIM_Base_MspInit+0xa6>
    {
      Error_Handler();
 800287e:	f7ff fdf3 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a25      	ldr	r2, [pc, #148]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_TIM_Base_MspInit+0x140>)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800288e:	e03c      	b.n	800290a <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	05db      	lsls	r3, r3, #23
 8002898:	429a      	cmp	r2, r3
 800289a:	d136      	bne.n	800290a <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800289c:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_TIM_Base_MspInit+0x13c>)
 800289e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_TIM_Base_MspInit+0x13c>)
 80028a2:	2101      	movs	r1, #1
 80028a4:	430a      	orrs	r2, r1
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_TIM_Base_MspInit+0x13c>)
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel3;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_TIM_Base_MspInit+0x14c>)
 80028b8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028bc:	221a      	movs	r2, #26
 80028be:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028c2:	2210      	movs	r2, #16
 80028c4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	0052      	lsls	r2, r2, #1
 80028d8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	00d2      	lsls	r2, r2, #3
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 80028f0:	0018      	movs	r0, r3
 80028f2:	f001 f9b9 	bl	8003c68 <HAL_DMA_Init>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d001      	beq.n	80028fe <HAL_TIM_Base_MspInit+0x122>
      Error_Handler();
 80028fa:	f7ff fdb5 	bl	8002468 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_TIM_Base_MspInit+0x148>)
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b00f      	add	sp, #60	; 0x3c
 8002910:	bd90      	pop	{r4, r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40021000 	.word	0x40021000
 800291c:	200001ac 	.word	0x200001ac
 8002920:	4002001c 	.word	0x4002001c
 8002924:	20000208 	.word	0x20000208
 8002928:	40020030 	.word	0x40020030

0800292c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b08b      	sub	sp, #44	; 0x2c
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	2414      	movs	r4, #20
 8002936:	193b      	adds	r3, r7, r4
 8002938:	0018      	movs	r0, r3
 800293a:	2314      	movs	r3, #20
 800293c:	001a      	movs	r2, r3
 800293e:	2100      	movs	r1, #0
 8002940:	f004 ff4a 	bl	80077d8 <memset>
  if(timHandle->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_TIM_MspPostInit+0xc8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d124      	bne.n	8002998 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_TIM_MspPostInit+0xcc>)
 8002950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002952:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_TIM_MspPostInit+0xcc>)
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_TIM_MspPostInit+0xcc>)
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	2201      	movs	r2, #1
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_PWM_CO_Pin;
 8002966:	193b      	adds	r3, r7, r4
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	0052      	lsls	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	0021      	movs	r1, r4
 8002970:	187b      	adds	r3, r7, r1
 8002972:	2202      	movs	r2, #2
 8002974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	187b      	adds	r3, r7, r1
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	187b      	adds	r3, r7, r1
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002982:	187b      	adds	r3, r7, r1
 8002984:	2202      	movs	r2, #2
 8002986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_CH1_PWM_CO_GPIO_Port, &GPIO_InitStruct);
 8002988:	187a      	adds	r2, r7, r1
 800298a:	23a0      	movs	r3, #160	; 0xa0
 800298c:	05db      	lsls	r3, r3, #23
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f001 fc87 	bl	80042a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002996:	e028      	b.n	80029ea <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	05db      	lsls	r3, r3, #23
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d122      	bne.n	80029ea <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_TIM_MspPostInit+0xcc>)
 80029a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_TIM_MspPostInit+0xcc>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_TIM_MspPostInit+0xcc>)
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	2201      	movs	r2, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM2_CH1_PWM_NO_Pin;
 80029bc:	2114      	movs	r1, #20
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2220      	movs	r2, #32
 80029c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	187b      	adds	r3, r7, r1
 80029c6:	2202      	movs	r2, #2
 80029c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	2202      	movs	r2, #2
 80029da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM2_CH1_PWM_NO_GPIO_Port, &GPIO_InitStruct);
 80029dc:	187a      	adds	r2, r7, r1
 80029de:	23a0      	movs	r3, #160	; 0xa0
 80029e0:	05db      	lsls	r3, r3, #23
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f001 fc5d 	bl	80042a4 <HAL_GPIO_Init>
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b00b      	add	sp, #44	; 0x2c
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40021000 	.word	0x40021000

080029fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a02:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <MX_USART1_UART_Init+0x9c>)
 8002a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a08:	22e1      	movs	r2, #225	; 0xe1
 8002a0a:	0252      	lsls	r2, r2, #9
 8002a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a14:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a22:	220c      	movs	r2, #12
 8002a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a38:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002a44:	4813      	ldr	r0, [pc, #76]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a46:	2300      	movs	r3, #0
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f004 fd20 	bl	8007490 <HAL_RS485Ex_Init>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002a54:	f7ff fd08 	bl	8002468 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f004 fddb 	bl	8007618 <HAL_UARTEx_SetTxFifoThreshold>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d001      	beq.n	8002a6a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8002a66:	f7ff fcff 	bl	8002468 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f004 fe12 	bl	8007698 <HAL_UARTEx_SetRxFifoThreshold>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d001      	beq.n	8002a7c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002a78:	f7ff fcf6 	bl	8002468 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <MX_USART1_UART_Init+0x98>)
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f004 fd90 	bl	80075a4 <HAL_UARTEx_DisableFifoMode>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d001      	beq.n	8002a8c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002a88:	f7ff fcee 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	20000264 	.word	0x20000264
 8002a98:	40013800 	.word	0x40013800

08002a9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aa0:	4b16      	ldr	r3, [pc, #88]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <MX_USART2_UART_Init+0x64>)
 8002aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002aa8:	22e1      	movs	r2, #225	; 0xe1
 8002aaa:	0252      	lsls	r2, r2, #9
 8002aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <MX_USART2_UART_Init+0x60>)
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f003 fc4e 	bl	8006388 <HAL_UART_Init>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d001      	beq.n	8002af4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002af0:	f7ff fcba 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	200002f8 	.word	0x200002f8
 8002b00:	40004400 	.word	0x40004400

08002b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b097      	sub	sp, #92	; 0x5c
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	2344      	movs	r3, #68	; 0x44
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	0018      	movs	r0, r3
 8002b12:	2314      	movs	r3, #20
 8002b14:	001a      	movs	r2, r3
 8002b16:	2100      	movs	r1, #0
 8002b18:	f004 fe5e 	bl	80077d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b1c:	241c      	movs	r4, #28
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	0018      	movs	r0, r3
 8002b22:	2328      	movs	r3, #40	; 0x28
 8002b24:	001a      	movs	r2, r3
 8002b26:	2100      	movs	r1, #0
 8002b28:	f004 fe56 	bl	80077d8 <memset>
  if(uartHandle->Instance==USART1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a42      	ldr	r2, [pc, #264]	; (8002c3c <HAL_UART_MspInit+0x138>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d148      	bne.n	8002bc8 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	0018      	movs	r0, r3
 8002b46:	f002 fa59 	bl	8004ffc <HAL_RCCEx_PeriphCLKConfig>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b4e:	f7ff fc8b 	bl	8002468 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b56:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	01c9      	lsls	r1, r1, #7
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	01db      	lsls	r3, r3, #7
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002b74:	2101      	movs	r1, #1
 8002b76:	430a      	orrs	r2, r1
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8002b86:	2144      	movs	r1, #68	; 0x44
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	22b0      	movs	r2, #176	; 0xb0
 8002b8c:	0152      	lsls	r2, r2, #5
 8002b8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2202      	movs	r2, #2
 8002b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	187a      	adds	r2, r7, r1
 8002baa:	23a0      	movs	r3, #160	; 0xa0
 8002bac:	05db      	lsls	r3, r3, #23
 8002bae:	0011      	movs	r1, r2
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f001 fb77 	bl	80042a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	201b      	movs	r0, #27
 8002bbc:	f001 f822 	bl	8003c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bc0:	201b      	movs	r0, #27
 8002bc2:	f001 f834 	bl	8003c2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bc6:	e035      	b.n	8002c34 <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_UART_MspInit+0x140>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d130      	bne.n	8002c34 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	0289      	lsls	r1, r1, #10
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	029b      	lsls	r3, r3, #10
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_UART_MspInit+0x13c>)
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8002c06:	2144      	movs	r1, #68	; 0x44
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2202      	movs	r2, #2
 8002c12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2201      	movs	r2, #1
 8002c18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2201      	movs	r2, #1
 8002c24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	187a      	adds	r2, r7, r1
 8002c28:	23a0      	movs	r3, #160	; 0xa0
 8002c2a:	05db      	lsls	r3, r3, #23
 8002c2c:	0011      	movs	r1, r2
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f001 fb38 	bl	80042a4 <HAL_GPIO_Init>
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b017      	add	sp, #92	; 0x5c
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40004400 	.word	0x40004400

08002c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c48:	480d      	ldr	r0, [pc, #52]	; (8002c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c4c:	f7ff fc78 	bl	8002540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <LoopForever+0xe>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <LoopForever+0x16>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c76:	f004 fdb7 	bl	80077e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c7a:	f7ff fa53 	bl	8002124 <main>

08002c7e <LoopForever>:

LoopForever:
  b LoopForever
 8002c7e:	e7fe      	b.n	8002c7e <LoopForever>
  ldr   r0, =_estack
 8002c80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002c8c:	08007934 	.word	0x08007934
  ldr r2, =_sbss
 8002c90:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002c94:	20000390 	.word	0x20000390

08002c98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC1_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ca2:	1dfb      	adds	r3, r7, #7
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_Init+0x3c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_Init+0x3c>)
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	0049      	lsls	r1, r1, #1
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f000 f810 	bl	8002cdc <HAL_InitTick>
 8002cbc:	1e03      	subs	r3, r0, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e001      	b.n	8002ccc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002cc8:	f7ff fbd4 	bl	8002474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ccc:	1dfb      	adds	r3, r7, #7
 8002cce:	781b      	ldrb	r3, [r3, #0]
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_InitTick+0x88>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02b      	beq.n	8002d4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_InitTick+0x8c>)
 8002cf6:	681c      	ldr	r4, [r3, #0]
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_InitTick+0x88>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	23fa      	movs	r3, #250	; 0xfa
 8002d00:	0098      	lsls	r0, r3, #2
 8002d02:	f7fd f9ff 	bl	8000104 <__udivsi3>
 8002d06:	0003      	movs	r3, r0
 8002d08:	0019      	movs	r1, r3
 8002d0a:	0020      	movs	r0, r4
 8002d0c:	f7fd f9fa 	bl	8000104 <__udivsi3>
 8002d10:	0003      	movs	r3, r0
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 ff9b 	bl	8003c4e <HAL_SYSTICK_Config>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d112      	bne.n	8002d42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d80a      	bhi.n	8002d38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	2301      	movs	r3, #1
 8002d26:	425b      	negs	r3, r3
 8002d28:	2200      	movs	r2, #0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 ff6a 	bl	8003c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_InitTick+0x90>)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e00d      	b.n	8002d54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002d38:	230f      	movs	r3, #15
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e008      	b.n	8002d54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d42:	230f      	movs	r3, #15
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e003      	b.n	8002d54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d4c:	230f      	movs	r3, #15
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b005      	add	sp, #20
 8002d60:	bd90      	pop	{r4, r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	20000010 	.word	0x20000010
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	2000000c 	.word	0x2000000c

08002d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_IncTick+0x1c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	001a      	movs	r2, r3
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_IncTick+0x20>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	18d2      	adds	r2, r2, r3
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_IncTick+0x20>)
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	20000010 	.word	0x20000010
 8002d90:	2000038c 	.word	0x2000038c

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <HAL_GetTick+0x10>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	2000038c 	.word	0x2000038c

08002da8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002db8:	401a      	ands	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b002      	add	sp, #8
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	fe3fffff 	.word	0xfe3fffff

08002dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	23e0      	movs	r3, #224	; 0xe0
 8002dde:	045b      	lsls	r3, r3, #17
 8002de0:	4013      	ands	r3, r2
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b002      	add	sp, #8
 8002de8:	bd80      	pop	{r7, pc}

08002dea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	2104      	movs	r1, #4
 8002dfe:	400a      	ands	r2, r1
 8002e00:	2107      	movs	r1, #7
 8002e02:	4091      	lsls	r1, r2
 8002e04:	000a      	movs	r2, r1
 8002e06:	43d2      	mvns	r2, r2
 8002e08:	401a      	ands	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	400b      	ands	r3, r1
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4099      	lsls	r1, r3
 8002e14:	000b      	movs	r3, r1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b004      	add	sp, #16
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	2104      	movs	r1, #4
 8002e36:	400a      	ands	r2, r1
 8002e38:	2107      	movs	r1, #7
 8002e3a:	4091      	lsls	r1, r2
 8002e3c:	000a      	movs	r2, r1
 8002e3e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2104      	movs	r1, #4
 8002e44:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002e46:	40da      	lsrs	r2, r3
 8002e48:	0013      	movs	r3, r2
}
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b002      	add	sp, #8
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	23c0      	movs	r3, #192	; 0xc0
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	4013      	ands	r3, r2
 8002e64:	d101      	bne.n	8002e6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	211f      	movs	r1, #31
 8002e88:	400a      	ands	r2, r1
 8002e8a:	210f      	movs	r1, #15
 8002e8c:	4091      	lsls	r1, r2
 8002e8e:	000a      	movs	r2, r1
 8002e90:	43d2      	mvns	r2, r2
 8002e92:	401a      	ands	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	210f      	movs	r1, #15
 8002e9a:	4019      	ands	r1, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	201f      	movs	r0, #31
 8002ea0:	4003      	ands	r3, r0
 8002ea2:	4099      	lsls	r1, r3
 8002ea4:	000b      	movs	r3, r1
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	035b      	lsls	r3, r3, #13
 8002ec6:	0b5b      	lsrs	r3, r3, #13
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b002      	add	sp, #8
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	0352      	lsls	r2, r2, #13
 8002ee8:	0b52      	lsrs	r2, r2, #13
 8002eea:	43d2      	mvns	r2, r2
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	0212      	lsls	r2, r2, #8
 8002f10:	43d2      	mvns	r2, r2
 8002f12:	401a      	ands	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	400b      	ands	r3, r1
 8002f1c:	4904      	ldr	r1, [pc, #16]	; (8002f30 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002f1e:	400b      	ands	r3, r1
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b004      	add	sp, #16
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	07ffff00 	.word	0x07ffff00

08002f34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a05      	ldr	r2, [pc, #20]	; (8002f58 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	0552      	lsls	r2, r2, #21
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	6fffffe8 	.word	0x6fffffe8

08002f5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	055b      	lsls	r3, r3, #21
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	055b      	lsls	r3, r3, #21
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d101      	bne.n	8002f7a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <LL_ADC_Enable+0x20>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	2201      	movs	r2, #1
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	7fffffe8 	.word	0x7fffffe8

08002fa8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <LL_ADC_Disable+0x20>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2202      	movs	r2, #2
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	7fffffe8 	.word	0x7fffffe8

08002fcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <LL_ADC_IsEnabled+0x18>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_ADC_IsEnabled+0x1a>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b002      	add	sp, #8
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <LL_ADC_REG_StartConversion+0x20>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	2204      	movs	r2, #4
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}
 8003010:	7fffffe8 	.word	0x7fffffe8

08003014 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2204      	movs	r2, #4
 8003022:	4013      	ands	r3, r2
 8003024:	2b04      	cmp	r3, #4
 8003026:	d101      	bne.n	800302c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800302c:	2300      	movs	r3, #0
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b002      	add	sp, #8
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003040:	231f      	movs	r3, #31
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e17f      	b.n	800335e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fe ff43 	bl	8001ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2254      	movs	r2, #84	; 0x54
 8003078:	2100      	movs	r1, #0
 800307a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff ff6b 	bl	8002f5c <LL_ADC_IsInternalRegulatorEnabled>
 8003086:	1e03      	subs	r3, r0, #0
 8003088:	d115      	bne.n	80030b6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	0018      	movs	r0, r3
 8003090:	f7ff ff50 	bl	8002f34 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003094:	4bb4      	ldr	r3, [pc, #720]	; (8003368 <HAL_ADC_Init+0x330>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	49b4      	ldr	r1, [pc, #720]	; (800336c <HAL_ADC_Init+0x334>)
 800309a:	0018      	movs	r0, r3
 800309c:	f7fd f832 	bl	8000104 <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030a8:	e002      	b.n	80030b0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f9      	bne.n	80030aa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7ff ff4e 	bl	8002f5c <LL_ADC_IsInternalRegulatorEnabled>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d10f      	bne.n	80030e4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	2210      	movs	r2, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	2201      	movs	r2, #1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030dc:	231f      	movs	r3, #31
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff ff93 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 80030ee:	0003      	movs	r3, r0
 80030f0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	2210      	movs	r2, #16
 80030f8:	4013      	ands	r3, r2
 80030fa:	d000      	beq.n	80030fe <HAL_ADC_Init+0xc6>
 80030fc:	e122      	b.n	8003344 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d000      	beq.n	8003106 <HAL_ADC_Init+0xce>
 8003104:	e11e      	b.n	8003344 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a99      	ldr	r2, [pc, #612]	; (8003370 <HAL_ADC_Init+0x338>)
 800310c:	4013      	ands	r3, r2
 800310e:	2202      	movs	r2, #2
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff ff56 	bl	8002fcc <LL_ADC_IsEnabled>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d000      	beq.n	8003126 <HAL_ADC_Init+0xee>
 8003124:	e0ad      	b.n	8003282 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7e1b      	ldrb	r3, [r3, #24]
 800312e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003130:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7e5b      	ldrb	r3, [r3, #25]
 8003136:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003138:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7e9b      	ldrb	r3, [r3, #26]
 800313e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003140:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_ADC_Init+0x118>
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	015b      	lsls	r3, r3, #5
 800314e:	e000      	b.n	8003152 <HAL_ADC_Init+0x11a>
 8003150:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003152:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003158:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da04      	bge.n	800316c <HAL_ADC_Init+0x134>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	e001      	b.n	8003170 <HAL_ADC_Init+0x138>
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003170:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	5c5b      	ldrb	r3, [r3, r1]
 8003178:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800317a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	5c9b      	ldrb	r3, [r3, r2]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d115      	bne.n	80031b8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7e9b      	ldrb	r3, [r3, #26]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	0252      	lsls	r2, r2, #9
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	e00b      	b.n	80031b8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	2220      	movs	r2, #32
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	2201      	movs	r2, #1
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c4:	23e0      	movs	r3, #224	; 0xe0
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031ce:	4313      	orrs	r3, r2
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_ADC_Init+0x33c>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	0f9b      	lsrs	r3, r3, #30
 80031f2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031f8:	4313      	orrs	r3, r2
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	223c      	movs	r2, #60	; 0x3c
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d111      	bne.n	800322e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0f9b      	lsrs	r3, r3, #30
 8003210:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003216:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800321c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003222:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	2201      	movs	r2, #1
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4a50      	ldr	r2, [pc, #320]	; (8003378 <HAL_ADC_Init+0x340>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	430a      	orrs	r2, r1
 8003242:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	23c0      	movs	r3, #192	; 0xc0
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	429a      	cmp	r2, r3
 800324e:	d018      	beq.n	8003282 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	05db      	lsls	r3, r3, #23
 8003258:	429a      	cmp	r2, r3
 800325a:	d012      	beq.n	8003282 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	429a      	cmp	r2, r3
 8003266:	d00c      	beq.n	8003282 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003268:	4b44      	ldr	r3, [pc, #272]	; (800337c <HAL_ADC_Init+0x344>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a44      	ldr	r2, [pc, #272]	; (8003380 <HAL_ADC_Init+0x348>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	23f0      	movs	r3, #240	; 0xf0
 8003278:	039b      	lsls	r3, r3, #14
 800327a:	401a      	ands	r2, r3
 800327c:	4b3f      	ldr	r3, [pc, #252]	; (800337c <HAL_ADC_Init+0x344>)
 800327e:	430a      	orrs	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	001a      	movs	r2, r3
 800328c:	2100      	movs	r1, #0
 800328e:	f7ff fdac 	bl	8002dea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	493a      	ldr	r1, [pc, #232]	; (8003384 <HAL_ADC_Init+0x34c>)
 800329c:	001a      	movs	r2, r3
 800329e:	f7ff fda4 	bl	8002dea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2110      	movs	r1, #16
 80032b6:	4249      	negs	r1, r1
 80032b8:	430a      	orrs	r2, r1
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
 80032bc:	e018      	b.n	80032f0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	039b      	lsls	r3, r3, #14
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d112      	bne.n	80032f0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	221c      	movs	r2, #28
 80032da:	4013      	ands	r3, r2
 80032dc:	2210      	movs	r2, #16
 80032de:	4252      	negs	r2, r2
 80032e0:	409a      	lsls	r2, r3
 80032e2:	0011      	movs	r1, r2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2100      	movs	r1, #0
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff fd94 	bl	8002e24 <LL_ADC_GetSamplingTimeCommonChannels>
 80032fc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003302:	429a      	cmp	r2, r3
 8003304:	d10b      	bne.n	800331e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	2203      	movs	r2, #3
 8003312:	4393      	bics	r3, r2
 8003314:	2201      	movs	r2, #1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800331c:	e01c      	b.n	8003358 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	2212      	movs	r2, #18
 8003324:	4393      	bics	r3, r2
 8003326:	2210      	movs	r2, #16
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	2201      	movs	r2, #1
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800333a:	231f      	movs	r3, #31
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003342:	e009      	b.n	8003358 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	2210      	movs	r2, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003350:	231f      	movs	r3, #31
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003358:	231f      	movs	r3, #31
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	781b      	ldrb	r3, [r3, #0]
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b008      	add	sp, #32
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	20000008 	.word	0x20000008
 800336c:	00030d40 	.word	0x00030d40
 8003370:	fffffefd 	.word	0xfffffefd
 8003374:	fffe0201 	.word	0xfffe0201
 8003378:	1ffffc02 	.word	0x1ffffc02
 800337c:	40012708 	.word	0x40012708
 8003380:	ffc3ffff 	.word	0xffc3ffff
 8003384:	07ffff04 	.word	0x07ffff04

08003388 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0018      	movs	r0, r3
 800339a:	f7ff fe3b 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d16c      	bne.n	800347c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2254      	movs	r2, #84	; 0x54
 80033a6:	5c9b      	ldrb	r3, [r3, r2]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_Start_DMA+0x28>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e06c      	b.n	800348a <HAL_ADC_Start_DMA+0x102>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2254      	movs	r2, #84	; 0x54
 80033b4:	2101      	movs	r1, #1
 80033b6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	4013      	ands	r3, r2
 80033c2:	d113      	bne.n	80033ec <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff fdff 	bl	8002fcc <LL_ADC_IsEnabled>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d004      	beq.n	80033dc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7ff fde6 	bl	8002fa8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	430a      	orrs	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033ec:	2517      	movs	r5, #23
 80033ee:	197c      	adds	r4, r7, r5
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 fa46 	bl	8003884 <ADC_Enable>
 80033f8:	0003      	movs	r3, r0
 80033fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033fc:	002c      	movs	r4, r5
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d13e      	bne.n	8003484 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	4a22      	ldr	r2, [pc, #136]	; (8003494 <HAL_ADC_Start_DMA+0x10c>)
 800340c:	4013      	ands	r3, r2
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	0052      	lsls	r2, r2, #1
 8003412:	431a      	orrs	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_ADC_Start_DMA+0x110>)
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342a:	4a1c      	ldr	r2, [pc, #112]	; (800349c <HAL_ADC_Start_DMA+0x114>)
 800342c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003432:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_ADC_Start_DMA+0x118>)
 8003434:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	221c      	movs	r2, #28
 800343c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2254      	movs	r2, #84	; 0x54
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2110      	movs	r1, #16
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3340      	adds	r3, #64	; 0x40
 8003460:	0019      	movs	r1, r3
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	193c      	adds	r4, r7, r4
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f000 fc88 	bl	8003d7c <HAL_DMA_Start_IT>
 800346c:	0003      	movs	r3, r0
 800346e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff fdbb 	bl	8002ff0 <LL_ADC_REG_StartConversion>
 800347a:	e003      	b.n	8003484 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800347c:	2317      	movs	r3, #23
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	2202      	movs	r2, #2
 8003482:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003484:	2317      	movs	r3, #23
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b006      	add	sp, #24
 8003490:	bdb0      	pop	{r4, r5, r7, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	fffff0fe 	.word	0xfffff0fe
 8003498:	08003991 	.word	0x08003991
 800349c:	08003a59 	.word	0x08003a59
 80034a0:	08003a77 	.word	0x08003a77

080034a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034de:	2317      	movs	r3, #23
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2254      	movs	r2, #84	; 0x54
 80034ee:	5c9b      	ldrb	r3, [r3, r2]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x24>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e1c0      	b.n	800387a <HAL_ADC_ConfigChannel+0x3a6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2254      	movs	r2, #84	; 0x54
 80034fc:	2101      	movs	r1, #1
 80034fe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff fd85 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d000      	beq.n	8003510 <HAL_ADC_ConfigChannel+0x3c>
 800350e:	e1a3      	b.n	8003858 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d100      	bne.n	800351a <HAL_ADC_ConfigChannel+0x46>
 8003518:	e143      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	429a      	cmp	r2, r3
 8003524:	d004      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800352a:	4ac1      	ldr	r2, [pc, #772]	; (8003830 <HAL_ADC_ConfigChannel+0x35c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d108      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0019      	movs	r1, r3
 800353a:	0010      	movs	r0, r2
 800353c:	f7ff fcba 	bl	8002eb4 <LL_ADC_REG_SetSequencerChAdd>
 8003540:	e0c9      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	211f      	movs	r1, #31
 800354c:	400b      	ands	r3, r1
 800354e:	210f      	movs	r1, #15
 8003550:	4099      	lsls	r1, r3
 8003552:	000b      	movs	r3, r1
 8003554:	43db      	mvns	r3, r3
 8003556:	4013      	ands	r3, r2
 8003558:	0019      	movs	r1, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	035b      	lsls	r3, r3, #13
 8003560:	0b5b      	lsrs	r3, r3, #13
 8003562:	d105      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x9c>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	221f      	movs	r2, #31
 800356c:	4013      	ands	r3, r2
 800356e:	e098      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	d000      	beq.n	800357c <HAL_ADC_ConfigChannel+0xa8>
 800357a:	e091      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x1cc>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d000      	beq.n	8003588 <HAL_ADC_ConfigChannel+0xb4>
 8003586:	e089      	b.n	800369c <HAL_ADC_ConfigChannel+0x1c8>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2204      	movs	r2, #4
 800358e:	4013      	ands	r3, r2
 8003590:	d000      	beq.n	8003594 <HAL_ADC_ConfigChannel+0xc0>
 8003592:	e081      	b.n	8003698 <HAL_ADC_ConfigChannel+0x1c4>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2208      	movs	r2, #8
 800359a:	4013      	ands	r3, r2
 800359c:	d000      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0xcc>
 800359e:	e079      	b.n	8003694 <HAL_ADC_ConfigChannel+0x1c0>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2210      	movs	r2, #16
 80035a6:	4013      	ands	r3, r2
 80035a8:	d000      	beq.n	80035ac <HAL_ADC_ConfigChannel+0xd8>
 80035aa:	e071      	b.n	8003690 <HAL_ADC_ConfigChannel+0x1bc>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2220      	movs	r2, #32
 80035b2:	4013      	ands	r3, r2
 80035b4:	d000      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0xe4>
 80035b6:	e069      	b.n	800368c <HAL_ADC_ConfigChannel+0x1b8>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2240      	movs	r2, #64	; 0x40
 80035be:	4013      	ands	r3, r2
 80035c0:	d000      	beq.n	80035c4 <HAL_ADC_ConfigChannel+0xf0>
 80035c2:	e061      	b.n	8003688 <HAL_ADC_ConfigChannel+0x1b4>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	4013      	ands	r3, r2
 80035cc:	d000      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0xfc>
 80035ce:	e059      	b.n	8003684 <HAL_ADC_ConfigChannel+0x1b0>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4013      	ands	r3, r2
 80035da:	d151      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x1ac>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4013      	ands	r3, r2
 80035e6:	d149      	bne.n	800367c <HAL_ADC_ConfigChannel+0x1a8>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4013      	ands	r3, r2
 80035f2:	d141      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x1a4>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	4013      	ands	r3, r2
 80035fe:	d139      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1a0>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	015b      	lsls	r3, r3, #5
 8003608:	4013      	ands	r3, r2
 800360a:	d131      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x19c>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	019b      	lsls	r3, r3, #6
 8003614:	4013      	ands	r3, r2
 8003616:	d129      	bne.n	800366c <HAL_ADC_ConfigChannel+0x198>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	01db      	lsls	r3, r3, #7
 8003620:	4013      	ands	r3, r2
 8003622:	d121      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x194>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	4013      	ands	r3, r2
 800362e:	d119      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x190>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	025b      	lsls	r3, r3, #9
 8003638:	4013      	ands	r3, r2
 800363a:	d111      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x18c>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	029b      	lsls	r3, r3, #10
 8003644:	4013      	ands	r3, r2
 8003646:	d109      	bne.n	800365c <HAL_ADC_ConfigChannel+0x188>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	02db      	lsls	r3, r3, #11
 8003650:	4013      	ands	r3, r2
 8003652:	d001      	beq.n	8003658 <HAL_ADC_ConfigChannel+0x184>
 8003654:	2312      	movs	r3, #18
 8003656:	e024      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003658:	2300      	movs	r3, #0
 800365a:	e022      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 800365c:	2311      	movs	r3, #17
 800365e:	e020      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003660:	2310      	movs	r3, #16
 8003662:	e01e      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003664:	230f      	movs	r3, #15
 8003666:	e01c      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003668:	230e      	movs	r3, #14
 800366a:	e01a      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 800366c:	230d      	movs	r3, #13
 800366e:	e018      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003670:	230c      	movs	r3, #12
 8003672:	e016      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003674:	230b      	movs	r3, #11
 8003676:	e014      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003678:	230a      	movs	r3, #10
 800367a:	e012      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 800367c:	2309      	movs	r3, #9
 800367e:	e010      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003680:	2308      	movs	r3, #8
 8003682:	e00e      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003684:	2307      	movs	r3, #7
 8003686:	e00c      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003688:	2306      	movs	r3, #6
 800368a:	e00a      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 800368c:	2305      	movs	r3, #5
 800368e:	e008      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003690:	2304      	movs	r3, #4
 8003692:	e006      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003694:	2303      	movs	r3, #3
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 8003698:	2302      	movs	r3, #2
 800369a:	e002      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1ce>
 80036a0:	2300      	movs	r3, #0
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	6852      	ldr	r2, [r2, #4]
 80036a6:	201f      	movs	r0, #31
 80036a8:	4002      	ands	r2, r0
 80036aa:	4093      	lsls	r3, r2
 80036ac:	000a      	movs	r2, r1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d808      	bhi.n	80036d6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	001a      	movs	r2, r3
 80036d2:	f7ff fbcf 	bl	8002e74 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6819      	ldr	r1, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	001a      	movs	r2, r3
 80036e4:	f7ff fc0a 	bl	8002efc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db00      	blt.n	80036f2 <HAL_ADC_ConfigChannel+0x21e>
 80036f0:	e0bc      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036f2:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_ADC_ConfigChannel+0x360>)
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff fb6b 	bl	8002dd0 <LL_ADC_GetCommonPathInternalCh>
 80036fa:	0003      	movs	r3, r0
 80036fc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4d      	ldr	r2, [pc, #308]	; (8003838 <HAL_ADC_ConfigChannel+0x364>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d122      	bne.n	800374e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003710:	d11d      	bne.n	800374e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	0412      	lsls	r2, r2, #16
 8003718:	4313      	orrs	r3, r2
 800371a:	4a46      	ldr	r2, [pc, #280]	; (8003834 <HAL_ADC_ConfigChannel+0x360>)
 800371c:	0019      	movs	r1, r3
 800371e:	0010      	movs	r0, r2
 8003720:	f7ff fb42 	bl	8002da8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003724:	4b45      	ldr	r3, [pc, #276]	; (800383c <HAL_ADC_ConfigChannel+0x368>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4945      	ldr	r1, [pc, #276]	; (8003840 <HAL_ADC_ConfigChannel+0x36c>)
 800372a:	0018      	movs	r0, r3
 800372c:	f7fc fcea 	bl	8000104 <__udivsi3>
 8003730:	0003      	movs	r3, r0
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	0013      	movs	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	189b      	adds	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800373e:	e002      	b.n	8003746 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3b01      	subs	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f9      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800374c:	e08e      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <HAL_ADC_ConfigChannel+0x370>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d10e      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	045b      	lsls	r3, r3, #17
 800375e:	4013      	ands	r3, r2
 8003760:	d109      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	0452      	lsls	r2, r2, #17
 8003768:	4313      	orrs	r3, r2
 800376a:	4a32      	ldr	r2, [pc, #200]	; (8003834 <HAL_ADC_ConfigChannel+0x360>)
 800376c:	0019      	movs	r1, r3
 800376e:	0010      	movs	r0, r2
 8003770:	f7ff fb1a 	bl	8002da8 <LL_ADC_SetCommonPathInternalCh>
 8003774:	e07a      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a33      	ldr	r2, [pc, #204]	; (8003848 <HAL_ADC_ConfigChannel+0x374>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d000      	beq.n	8003782 <HAL_ADC_ConfigChannel+0x2ae>
 8003780:	e074      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	03db      	lsls	r3, r3, #15
 8003788:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800378a:	d000      	beq.n	800378e <HAL_ADC_ConfigChannel+0x2ba>
 800378c:	e06e      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2280      	movs	r2, #128	; 0x80
 8003792:	03d2      	lsls	r2, r2, #15
 8003794:	4313      	orrs	r3, r2
 8003796:	4a27      	ldr	r2, [pc, #156]	; (8003834 <HAL_ADC_ConfigChannel+0x360>)
 8003798:	0019      	movs	r1, r3
 800379a:	0010      	movs	r0, r2
 800379c:	f7ff fb04 	bl	8002da8 <LL_ADC_SetCommonPathInternalCh>
 80037a0:	e064      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d004      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037b2:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_ADC_ConfigChannel+0x35c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d107      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0019      	movs	r1, r3
 80037c2:	0010      	movs	r0, r2
 80037c4:	f7ff fb87 	bl	8002ed6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da4d      	bge.n	800386c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037d0:	4b18      	ldr	r3, [pc, #96]	; (8003834 <HAL_ADC_ConfigChannel+0x360>)
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7ff fafc 	bl	8002dd0 <LL_ADC_GetCommonPathInternalCh>
 80037d8:	0003      	movs	r3, r0
 80037da:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a15      	ldr	r2, [pc, #84]	; (8003838 <HAL_ADC_ConfigChannel+0x364>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d108      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_ADC_ConfigChannel+0x378>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	4a11      	ldr	r2, [pc, #68]	; (8003834 <HAL_ADC_ConfigChannel+0x360>)
 80037ee:	0019      	movs	r1, r3
 80037f0:	0010      	movs	r0, r2
 80037f2:	f7ff fad9 	bl	8002da8 <LL_ADC_SetCommonPathInternalCh>
 80037f6:	e039      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a11      	ldr	r2, [pc, #68]	; (8003844 <HAL_ADC_ConfigChannel+0x370>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4a12      	ldr	r2, [pc, #72]	; (8003850 <HAL_ADC_ConfigChannel+0x37c>)
 8003806:	4013      	ands	r3, r2
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <HAL_ADC_ConfigChannel+0x360>)
 800380a:	0019      	movs	r1, r3
 800380c:	0010      	movs	r0, r2
 800380e:	f7ff facb 	bl	8002da8 <LL_ADC_SetCommonPathInternalCh>
 8003812:	e02b      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <HAL_ADC_ConfigChannel+0x374>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d126      	bne.n	800386c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <HAL_ADC_ConfigChannel+0x380>)
 8003822:	4013      	ands	r3, r2
 8003824:	4a03      	ldr	r2, [pc, #12]	; (8003834 <HAL_ADC_ConfigChannel+0x360>)
 8003826:	0019      	movs	r1, r3
 8003828:	0010      	movs	r0, r2
 800382a:	f7ff fabd 	bl	8002da8 <LL_ADC_SetCommonPathInternalCh>
 800382e:	e01d      	b.n	800386c <HAL_ADC_ConfigChannel+0x398>
 8003830:	80000004 	.word	0x80000004
 8003834:	40012708 	.word	0x40012708
 8003838:	b0001000 	.word	0xb0001000
 800383c:	20000008 	.word	0x20000008
 8003840:	00030d40 	.word	0x00030d40
 8003844:	b8004000 	.word	0xb8004000
 8003848:	b4002000 	.word	0xb4002000
 800384c:	ff7fffff 	.word	0xff7fffff
 8003850:	feffffff 	.word	0xfeffffff
 8003854:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	2220      	movs	r2, #32
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003864:	2317      	movs	r3, #23
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2254      	movs	r2, #84	; 0x54
 8003870:	2100      	movs	r1, #0
 8003872:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003874:	2317      	movs	r3, #23
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	781b      	ldrb	r3, [r3, #0]
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b006      	add	sp, #24
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)

08003884 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0018      	movs	r0, r3
 8003896:	f7ff fb99 	bl	8002fcc <LL_ADC_IsEnabled>
 800389a:	1e03      	subs	r3, r0, #0
 800389c:	d000      	beq.n	80038a0 <ADC_Enable+0x1c>
 800389e:	e069      	b.n	8003974 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4a36      	ldr	r2, [pc, #216]	; (8003980 <ADC_Enable+0xfc>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	d00d      	beq.n	80038c8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	2210      	movs	r2, #16
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	2201      	movs	r2, #1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e056      	b.n	8003976 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff fb59 	bl	8002f84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80038d2:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <ADC_Enable+0x100>)
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7ff fa7b 	bl	8002dd0 <LL_ADC_GetCommonPathInternalCh>
 80038da:	0002      	movs	r2, r0
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	041b      	lsls	r3, r3, #16
 80038e0:	4013      	ands	r3, r2
 80038e2:	d00f      	beq.n	8003904 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e4:	4b28      	ldr	r3, [pc, #160]	; (8003988 <ADC_Enable+0x104>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4928      	ldr	r1, [pc, #160]	; (800398c <ADC_Enable+0x108>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7fc fc0a 	bl	8000104 <__udivsi3>
 80038f0:	0003      	movs	r3, r0
 80038f2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80038f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038f6:	e002      	b.n	80038fe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f9      	bne.n	80038f8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7e5b      	ldrb	r3, [r3, #25]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d033      	beq.n	8003974 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800390c:	f7ff fa42 	bl	8002d94 <HAL_GetTick>
 8003910:	0003      	movs	r3, r0
 8003912:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003914:	e027      	b.n	8003966 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	0018      	movs	r0, r3
 800391c:	f7ff fb56 	bl	8002fcc <LL_ADC_IsEnabled>
 8003920:	1e03      	subs	r3, r0, #0
 8003922:	d104      	bne.n	800392e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0018      	movs	r0, r3
 800392a:	f7ff fb2b 	bl	8002f84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800392e:	f7ff fa31 	bl	8002d94 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d914      	bls.n	8003966 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2201      	movs	r2, #1
 8003944:	4013      	ands	r3, r2
 8003946:	2b01      	cmp	r3, #1
 8003948:	d00d      	beq.n	8003966 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	2210      	movs	r2, #16
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	2201      	movs	r2, #1
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e007      	b.n	8003976 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	2b01      	cmp	r3, #1
 8003972:	d1d0      	bne.n	8003916 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	80000017 	.word	0x80000017
 8003984:	40012708 	.word	0x40012708
 8003988:	20000008 	.word	0x20000008
 800398c:	00030d40 	.word	0x00030d40

08003990 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	2250      	movs	r2, #80	; 0x50
 80039a4:	4013      	ands	r3, r2
 80039a6:	d141      	bne.n	8003a2c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	0092      	lsls	r2, r2, #2
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff fa49 	bl	8002e52 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039c0:	1e03      	subs	r3, r0, #0
 80039c2:	d02e      	beq.n	8003a22 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	7e9b      	ldrb	r3, [r3, #26]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d12a      	bne.n	8003a22 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2208      	movs	r2, #8
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d123      	bne.n	8003a22 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	0018      	movs	r0, r3
 80039e0:	f7ff fb18 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	d110      	bne.n	8003a0a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	210c      	movs	r1, #12
 80039f4:	438a      	bics	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <ADC_DMAConvCplt+0xc4>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	2201      	movs	r2, #1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	659a      	str	r2, [r3, #88]	; 0x58
 8003a08:	e00b      	b.n	8003a22 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	2220      	movs	r2, #32
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff fd3d 	bl	80034a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a2a:	e00f      	b.n	8003a4c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	2210      	movs	r2, #16
 8003a32:	4013      	ands	r3, r2
 8003a34:	d004      	beq.n	8003a40 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7ff fd43 	bl	80034c4 <HAL_ADC_ErrorCallback>
}
 8003a3e:	e005      	b.n	8003a4c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	0010      	movs	r0, r2
 8003a4a:	4798      	blx	r3
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	fffffefe 	.word	0xfffffefe

08003a58 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff fd23 	bl	80034b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	2240      	movs	r2, #64	; 0x40
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2204      	movs	r2, #4
 8003a96:	431a      	orrs	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7ff fd10 	bl	80034c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b004      	add	sp, #16
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	0002      	movs	r2, r0
 8003ab4:	1dfb      	adds	r3, r7, #7
 8003ab6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b7f      	cmp	r3, #127	; 0x7f
 8003abe:	d809      	bhi.n	8003ad4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	231f      	movs	r3, #31
 8003ac8:	401a      	ands	r2, r3
 8003aca:	4b04      	ldr	r3, [pc, #16]	; (8003adc <__NVIC_EnableIRQ+0x30>)
 8003acc:	2101      	movs	r1, #1
 8003ace:	4091      	lsls	r1, r2
 8003ad0:	000a      	movs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003aee:	1dfb      	adds	r3, r7, #7
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b7f      	cmp	r3, #127	; 0x7f
 8003af4:	d828      	bhi.n	8003b48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003af6:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <__NVIC_SetPriority+0xd4>)
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b25b      	sxtb	r3, r3
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	33c0      	adds	r3, #192	; 0xc0
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	589b      	ldr	r3, [r3, r2]
 8003b06:	1dfa      	adds	r2, r7, #7
 8003b08:	7812      	ldrb	r2, [r2, #0]
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	400a      	ands	r2, r1
 8003b10:	00d2      	lsls	r2, r2, #3
 8003b12:	21ff      	movs	r1, #255	; 0xff
 8003b14:	4091      	lsls	r1, r2
 8003b16:	000a      	movs	r2, r1
 8003b18:	43d2      	mvns	r2, r2
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	019b      	lsls	r3, r3, #6
 8003b22:	22ff      	movs	r2, #255	; 0xff
 8003b24:	401a      	ands	r2, r3
 8003b26:	1dfb      	adds	r3, r7, #7
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	4003      	ands	r3, r0
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b34:	481f      	ldr	r0, [pc, #124]	; (8003bb4 <__NVIC_SetPriority+0xd4>)
 8003b36:	1dfb      	adds	r3, r7, #7
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	33c0      	adds	r3, #192	; 0xc0
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003b46:	e031      	b.n	8003bac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b48:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <__NVIC_SetPriority+0xd8>)
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	0019      	movs	r1, r3
 8003b50:	230f      	movs	r3, #15
 8003b52:	400b      	ands	r3, r1
 8003b54:	3b08      	subs	r3, #8
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	3306      	adds	r3, #6
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	18d3      	adds	r3, r2, r3
 8003b5e:	3304      	adds	r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	1dfa      	adds	r2, r7, #7
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	0011      	movs	r1, r2
 8003b68:	2203      	movs	r2, #3
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	00d2      	lsls	r2, r2, #3
 8003b6e:	21ff      	movs	r1, #255	; 0xff
 8003b70:	4091      	lsls	r1, r2
 8003b72:	000a      	movs	r2, r1
 8003b74:	43d2      	mvns	r2, r2
 8003b76:	401a      	ands	r2, r3
 8003b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	019b      	lsls	r3, r3, #6
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	401a      	ands	r2, r3
 8003b82:	1dfb      	adds	r3, r7, #7
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	0018      	movs	r0, r3
 8003b88:	2303      	movs	r3, #3
 8003b8a:	4003      	ands	r3, r0
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b90:	4809      	ldr	r0, [pc, #36]	; (8003bb8 <__NVIC_SetPriority+0xd8>)
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	001c      	movs	r4, r3
 8003b98:	230f      	movs	r3, #15
 8003b9a:	4023      	ands	r3, r4
 8003b9c:	3b08      	subs	r3, #8
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	3306      	adds	r3, #6
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	18c3      	adds	r3, r0, r3
 8003ba8:	3304      	adds	r3, #4
 8003baa:	601a      	str	r2, [r3, #0]
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b003      	add	sp, #12
 8003bb2:	bd90      	pop	{r4, r7, pc}
 8003bb4:	e000e100 	.word	0xe000e100
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	045b      	lsls	r3, r3, #17
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d301      	bcc.n	8003bd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e010      	b.n	8003bf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <SysTick_Config+0x44>)
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	3a01      	subs	r2, #1
 8003bda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bdc:	2301      	movs	r3, #1
 8003bde:	425b      	negs	r3, r3
 8003be0:	2103      	movs	r1, #3
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7ff ff7c 	bl	8003ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <SysTick_Config+0x44>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <SysTick_Config+0x44>)
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b002      	add	sp, #8
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	e000e010 	.word	0xe000e010

08003c04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	210f      	movs	r1, #15
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	1c02      	adds	r2, r0, #0
 8003c14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b25b      	sxtb	r3, r3
 8003c1e:	0011      	movs	r1, r2
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7ff ff5d 	bl	8003ae0 <__NVIC_SetPriority>
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	0002      	movs	r2, r0
 8003c36:	1dfb      	adds	r3, r7, #7
 8003c38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b25b      	sxtb	r3, r3
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7ff ff33 	bl	8003aac <__NVIC_EnableIRQ>
}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b002      	add	sp, #8
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7ff ffaf 	bl	8003bbc <SysTick_Config>
 8003c5e:	0003      	movs	r3, r0
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e077      	b.n	8003d6a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3d      	ldr	r2, [pc, #244]	; (8003d74 <HAL_DMA_Init+0x10c>)
 8003c80:	4694      	mov	ip, r2
 8003c82:	4463      	add	r3, ip
 8003c84:	2114      	movs	r1, #20
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7fc fa3c 	bl	8000104 <__udivsi3>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	009a      	lsls	r2, r3, #2
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2225      	movs	r2, #37	; 0x25
 8003c98:	2102      	movs	r1, #2
 8003c9a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4934      	ldr	r1, [pc, #208]	; (8003d78 <HAL_DMA_Init+0x110>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 fa8d 	bl	8004204 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	01db      	lsls	r3, r3, #7
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d102      	bne.n	8003cfc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	213f      	movs	r1, #63	; 0x3f
 8003d06:	400a      	ands	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d12:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d011      	beq.n	8003d40 <HAL_DMA_Init+0xd8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d80d      	bhi.n	8003d40 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 fa98 	bl	800425c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	e008      	b.n	8003d52 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2225      	movs	r2, #37	; 0x25
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	2100      	movs	r1, #0
 8003d66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	bffdfff8 	.word	0xbffdfff8
 8003d78:	ffff800f 	.word	0xffff800f

08003d7c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2317      	movs	r3, #23
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2224      	movs	r2, #36	; 0x24
 8003d96:	5c9b      	ldrb	r3, [r3, r2]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_DMA_Start_IT+0x24>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e06f      	b.n	8003e80 <HAL_DMA_Start_IT+0x104>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2224      	movs	r2, #36	; 0x24
 8003da4:	2101      	movs	r1, #1
 8003da6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2225      	movs	r2, #37	; 0x25
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d157      	bne.n	8003e64 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2225      	movs	r2, #37	; 0x25
 8003db8:	2102      	movs	r1, #2
 8003dba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	438a      	bics	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f9d3 	bl	8004184 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	210e      	movs	r1, #14
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e00f      	b.n	8003e18 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2104      	movs	r1, #4
 8003e04:	438a      	bics	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	210a      	movs	r1, #10
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	025b      	lsls	r3, r3, #9
 8003e22:	4013      	ands	r3, r2
 8003e24:	d008      	beq.n	8003e38 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	0049      	lsls	r1, r1, #1
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	0049      	lsls	r1, r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e00a      	b.n	8003e7a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2224      	movs	r2, #36	; 0x24
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003e72:	2317      	movs	r3, #23
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003e7a:	2317      	movs	r3, #23
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	781b      	ldrb	r3, [r3, #0]
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b006      	add	sp, #24
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e050      	b.n	8003f3c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2225      	movs	r2, #37	; 0x25
 8003e9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d008      	beq.n	8003eb8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e041      	b.n	8003f3c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	210e      	movs	r1, #14
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	491c      	ldr	r1, [pc, #112]	; (8003f44 <HAL_DMA_Abort+0xbc>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_DMA_Abort+0xc0>)
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	221c      	movs	r2, #28
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_DMA_Abort+0xc0>)
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f06:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00c      	beq.n	8003f2a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	490a      	ldr	r1, [pc, #40]	; (8003f44 <HAL_DMA_Abort+0xbc>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003f28:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2225      	movs	r2, #37	; 0x25
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2224      	movs	r2, #36	; 0x24
 8003f36:	2100      	movs	r1, #0
 8003f38:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	fffffeff 	.word	0xfffffeff
 8003f48:	40020000 	.word	0x40020000

08003f4c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	210f      	movs	r1, #15
 8003f56:	187b      	adds	r3, r7, r1
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2225      	movs	r2, #37	; 0x25
 8003f60:	5c9b      	ldrb	r3, [r3, r2]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d006      	beq.n	8003f76 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	e049      	b.n	800400a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	210e      	movs	r1, #14
 8003f82:	438a      	bics	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	438a      	bics	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	491d      	ldr	r1, [pc, #116]	; (8004018 <HAL_DMA_Abort_IT+0xcc>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_DMA_Abort_IT+0xd0>)
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	221c      	movs	r2, #28
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	4b19      	ldr	r3, [pc, #100]	; (800401c <HAL_DMA_Abort_IT+0xd0>)
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003fc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd8:	490f      	ldr	r1, [pc, #60]	; (8004018 <HAL_DMA_Abort_IT+0xcc>)
 8003fda:	400a      	ands	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003fe6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2225      	movs	r2, #37	; 0x25
 8003fec:	2101      	movs	r1, #1
 8003fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	0010      	movs	r0, r2
 8004008:	4798      	blx	r3
    }
  }
  return status;
 800400a:	230f      	movs	r3, #15
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	781b      	ldrb	r3, [r3, #0]
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b004      	add	sp, #16
 8004016:	bd80      	pop	{r7, pc}
 8004018:	fffffeff 	.word	0xfffffeff
 800401c:	40020000 	.word	0x40020000

08004020 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004028:	4b55      	ldr	r3, [pc, #340]	; (8004180 <HAL_DMA_IRQHandler+0x160>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	221c      	movs	r2, #28
 800403c:	4013      	ands	r3, r2
 800403e:	2204      	movs	r2, #4
 8004040:	409a      	lsls	r2, r3
 8004042:	0013      	movs	r3, r2
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	d027      	beq.n	800409a <HAL_DMA_IRQHandler+0x7a>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2204      	movs	r2, #4
 800404e:	4013      	ands	r3, r2
 8004050:	d023      	beq.n	800409a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2220      	movs	r2, #32
 800405a:	4013      	ands	r3, r2
 800405c:	d107      	bne.n	800406e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2104      	movs	r1, #4
 800406a:	438a      	bics	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <HAL_DMA_IRQHandler+0x160>)
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	221c      	movs	r2, #28
 8004078:	4013      	ands	r3, r2
 800407a:	2204      	movs	r2, #4
 800407c:	409a      	lsls	r2, r3
 800407e:	4b40      	ldr	r3, [pc, #256]	; (8004180 <HAL_DMA_IRQHandler+0x160>)
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	2b00      	cmp	r3, #0
 800408a:	d100      	bne.n	800408e <HAL_DMA_IRQHandler+0x6e>
 800408c:	e073      	b.n	8004176 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	0010      	movs	r0, r2
 8004096:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004098:	e06d      	b.n	8004176 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	221c      	movs	r2, #28
 80040a0:	4013      	ands	r3, r2
 80040a2:	2202      	movs	r2, #2
 80040a4:	409a      	lsls	r2, r3
 80040a6:	0013      	movs	r3, r2
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	d02e      	beq.n	800410c <HAL_DMA_IRQHandler+0xec>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2202      	movs	r2, #2
 80040b2:	4013      	ands	r3, r2
 80040b4:	d02a      	beq.n	800410c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2220      	movs	r2, #32
 80040be:	4013      	ands	r3, r2
 80040c0:	d10b      	bne.n	80040da <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	210a      	movs	r1, #10
 80040ce:	438a      	bics	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2225      	movs	r2, #37	; 0x25
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80040da:	4b29      	ldr	r3, [pc, #164]	; (8004180 <HAL_DMA_IRQHandler+0x160>)
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	221c      	movs	r2, #28
 80040e4:	4013      	ands	r3, r2
 80040e6:	2202      	movs	r2, #2
 80040e8:	409a      	lsls	r2, r3
 80040ea:	4b25      	ldr	r3, [pc, #148]	; (8004180 <HAL_DMA_IRQHandler+0x160>)
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	; 0x24
 80040f4:	2100      	movs	r1, #0
 80040f6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d03a      	beq.n	8004176 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	0010      	movs	r0, r2
 8004108:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800410a:	e034      	b.n	8004176 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	221c      	movs	r2, #28
 8004112:	4013      	ands	r3, r2
 8004114:	2208      	movs	r2, #8
 8004116:	409a      	lsls	r2, r3
 8004118:	0013      	movs	r3, r2
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4013      	ands	r3, r2
 800411e:	d02b      	beq.n	8004178 <HAL_DMA_IRQHandler+0x158>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2208      	movs	r2, #8
 8004124:	4013      	ands	r3, r2
 8004126:	d027      	beq.n	8004178 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	210e      	movs	r1, #14
 8004134:	438a      	bics	r2, r1
 8004136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_DMA_IRQHandler+0x160>)
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	221c      	movs	r2, #28
 8004142:	4013      	ands	r3, r2
 8004144:	2201      	movs	r2, #1
 8004146:	409a      	lsls	r2, r3
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <HAL_DMA_IRQHandler+0x160>)
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2225      	movs	r2, #37	; 0x25
 8004158:	2101      	movs	r1, #1
 800415a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	0010      	movs	r0, r2
 8004174:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	46c0      	nop			; (mov r8, r8)
}
 800417a:	46bd      	mov	sp, r7
 800417c:	b004      	add	sp, #16
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40020000 	.word	0x40020000

08004184 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800419a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80041ac:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <DMA_SetConfig+0x7c>)
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	221c      	movs	r2, #28
 80041b8:	4013      	ands	r3, r2
 80041ba:	2201      	movs	r2, #1
 80041bc:	409a      	lsls	r2, r3
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <DMA_SetConfig+0x7c>)
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d108      	bne.n	80041e6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041e4:	e007      	b.n	80041f6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	60da      	str	r2, [r3, #12]
}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	40020000 	.word	0x40020000

08004204 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	4a10      	ldr	r2, [pc, #64]	; (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004214:	4694      	mov	ip, r2
 8004216:	4463      	add	r3, ip
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	001a      	movs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	001a      	movs	r2, r3
 8004226:	23ff      	movs	r3, #255	; 0xff
 8004228:	4013      	ands	r3, r2
 800422a:	3b08      	subs	r3, #8
 800422c:	2114      	movs	r1, #20
 800422e:	0018      	movs	r0, r3
 8004230:	f7fb ff68 	bl	8000104 <__udivsi3>
 8004234:	0003      	movs	r3, r0
 8004236:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800423c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	221f      	movs	r2, #31
 8004242:	4013      	ands	r3, r2
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b004      	add	sp, #16
 8004252:	bd80      	pop	{r7, pc}
 8004254:	10008200 	.word	0x10008200
 8004258:	40020880 	.word	0x40020880

0800425c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	223f      	movs	r2, #63	; 0x3f
 800426a:	4013      	ands	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a0a      	ldr	r2, [pc, #40]	; (800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004272:	4694      	mov	ip, r2
 8004274:	4463      	add	r3, ip
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	001a      	movs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a07      	ldr	r2, [pc, #28]	; (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004282:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3b01      	subs	r3, #1
 8004288:	2203      	movs	r2, #3
 800428a:	4013      	ands	r3, r2
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b004      	add	sp, #16
 800429a:	bd80      	pop	{r7, pc}
 800429c:	1000823f 	.word	0x1000823f
 80042a0:	40020940 	.word	0x40020940

080042a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b2:	e147      	b.n	8004544 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2101      	movs	r1, #1
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4091      	lsls	r1, r2
 80042be:	000a      	movs	r2, r1
 80042c0:	4013      	ands	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d100      	bne.n	80042cc <HAL_GPIO_Init+0x28>
 80042ca:	e138      	b.n	800453e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2203      	movs	r2, #3
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d005      	beq.n	80042e4 <HAL_GPIO_Init+0x40>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2203      	movs	r2, #3
 80042de:	4013      	ands	r3, r2
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d130      	bne.n	8004346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	2203      	movs	r2, #3
 80042f0:	409a      	lsls	r2, r3
 80042f2:	0013      	movs	r3, r2
 80042f4:	43da      	mvns	r2, r3
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	0013      	movs	r3, r2
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800431a:	2201      	movs	r2, #1
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	409a      	lsls	r2, r3
 8004320:	0013      	movs	r3, r2
 8004322:	43da      	mvns	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	2201      	movs	r2, #1
 8004332:	401a      	ands	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	409a      	lsls	r2, r3
 8004338:	0013      	movs	r3, r2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2203      	movs	r2, #3
 800434c:	4013      	ands	r3, r2
 800434e:	2b03      	cmp	r3, #3
 8004350:	d017      	beq.n	8004382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	2203      	movs	r2, #3
 800435e:	409a      	lsls	r2, r3
 8004360:	0013      	movs	r3, r2
 8004362:	43da      	mvns	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	409a      	lsls	r2, r3
 8004374:	0013      	movs	r3, r2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2203      	movs	r2, #3
 8004388:	4013      	ands	r3, r2
 800438a:	2b02      	cmp	r3, #2
 800438c:	d123      	bne.n	80043d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	08da      	lsrs	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3208      	adds	r2, #8
 8004396:	0092      	lsls	r2, r2, #2
 8004398:	58d3      	ldr	r3, [r2, r3]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2207      	movs	r2, #7
 80043a0:	4013      	ands	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	220f      	movs	r2, #15
 80043a6:	409a      	lsls	r2, r3
 80043a8:	0013      	movs	r3, r2
 80043aa:	43da      	mvns	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2107      	movs	r1, #7
 80043ba:	400b      	ands	r3, r1
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	409a      	lsls	r2, r3
 80043c0:	0013      	movs	r3, r2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	08da      	lsrs	r2, r3, #3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3208      	adds	r2, #8
 80043d0:	0092      	lsls	r2, r2, #2
 80043d2:	6939      	ldr	r1, [r7, #16]
 80043d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	2203      	movs	r2, #3
 80043e2:	409a      	lsls	r2, r3
 80043e4:	0013      	movs	r3, r2
 80043e6:	43da      	mvns	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4013      	ands	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2203      	movs	r2, #3
 80043f4:	401a      	ands	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	409a      	lsls	r2, r3
 80043fc:	0013      	movs	r3, r2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	23c0      	movs	r3, #192	; 0xc0
 8004410:	029b      	lsls	r3, r3, #10
 8004412:	4013      	ands	r3, r2
 8004414:	d100      	bne.n	8004418 <HAL_GPIO_Init+0x174>
 8004416:	e092      	b.n	800453e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004418:	4a50      	ldr	r2, [pc, #320]	; (800455c <HAL_GPIO_Init+0x2b8>)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	3318      	adds	r3, #24
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	589b      	ldr	r3, [r3, r2]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2203      	movs	r2, #3
 800442a:	4013      	ands	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	220f      	movs	r2, #15
 8004430:	409a      	lsls	r2, r3
 8004432:	0013      	movs	r3, r2
 8004434:	43da      	mvns	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	23a0      	movs	r3, #160	; 0xa0
 8004440:	05db      	lsls	r3, r3, #23
 8004442:	429a      	cmp	r2, r3
 8004444:	d013      	beq.n	800446e <HAL_GPIO_Init+0x1ca>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a45      	ldr	r2, [pc, #276]	; (8004560 <HAL_GPIO_Init+0x2bc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00d      	beq.n	800446a <HAL_GPIO_Init+0x1c6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a44      	ldr	r2, [pc, #272]	; (8004564 <HAL_GPIO_Init+0x2c0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d007      	beq.n	8004466 <HAL_GPIO_Init+0x1c2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a43      	ldr	r2, [pc, #268]	; (8004568 <HAL_GPIO_Init+0x2c4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_GPIO_Init+0x1be>
 800445e:	2303      	movs	r3, #3
 8004460:	e006      	b.n	8004470 <HAL_GPIO_Init+0x1cc>
 8004462:	2305      	movs	r3, #5
 8004464:	e004      	b.n	8004470 <HAL_GPIO_Init+0x1cc>
 8004466:	2302      	movs	r3, #2
 8004468:	e002      	b.n	8004470 <HAL_GPIO_Init+0x1cc>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <HAL_GPIO_Init+0x1cc>
 800446e:	2300      	movs	r3, #0
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	2103      	movs	r1, #3
 8004474:	400a      	ands	r2, r1
 8004476:	00d2      	lsls	r2, r2, #3
 8004478:	4093      	lsls	r3, r2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004480:	4936      	ldr	r1, [pc, #216]	; (800455c <HAL_GPIO_Init+0x2b8>)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	3318      	adds	r3, #24
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800448e:	4b33      	ldr	r3, [pc, #204]	; (800455c <HAL_GPIO_Init+0x2b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	43da      	mvns	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	035b      	lsls	r3, r3, #13
 80044a6:	4013      	ands	r3, r2
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044b2:	4b2a      	ldr	r3, [pc, #168]	; (800455c <HAL_GPIO_Init+0x2b8>)
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80044b8:	4b28      	ldr	r3, [pc, #160]	; (800455c <HAL_GPIO_Init+0x2b8>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	43da      	mvns	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	039b      	lsls	r3, r3, #14
 80044d0:	4013      	ands	r3, r2
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044dc:	4b1f      	ldr	r3, [pc, #124]	; (800455c <HAL_GPIO_Init+0x2b8>)
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044e2:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_GPIO_Init+0x2b8>)
 80044e4:	2384      	movs	r3, #132	; 0x84
 80044e6:	58d3      	ldr	r3, [r2, r3]
 80044e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	43da      	mvns	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	029b      	lsls	r3, r3, #10
 80044fc:	4013      	ands	r3, r2
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004508:	4914      	ldr	r1, [pc, #80]	; (800455c <HAL_GPIO_Init+0x2b8>)
 800450a:	2284      	movs	r2, #132	; 0x84
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004510:	4a12      	ldr	r2, [pc, #72]	; (800455c <HAL_GPIO_Init+0x2b8>)
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	58d3      	ldr	r3, [r2, r3]
 8004516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	43da      	mvns	r2, r3
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	025b      	lsls	r3, r3, #9
 800452a:	4013      	ands	r3, r2
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004536:	4909      	ldr	r1, [pc, #36]	; (800455c <HAL_GPIO_Init+0x2b8>)
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	3301      	adds	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	40da      	lsrs	r2, r3
 800454c:	1e13      	subs	r3, r2, #0
 800454e:	d000      	beq.n	8004552 <HAL_GPIO_Init+0x2ae>
 8004550:	e6b0      	b.n	80042b4 <HAL_GPIO_Init+0x10>
  }
}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b006      	add	sp, #24
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021800 	.word	0x40021800
 8004560:	50000400 	.word	0x50000400
 8004564:	50000800 	.word	0x50000800
 8004568:	50000c00 	.word	0x50000c00

0800456c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	0008      	movs	r0, r1
 8004576:	0011      	movs	r1, r2
 8004578:	1cbb      	adds	r3, r7, #2
 800457a:	1c02      	adds	r2, r0, #0
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	1c7b      	adds	r3, r7, #1
 8004580:	1c0a      	adds	r2, r1, #0
 8004582:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004584:	1c7b      	adds	r3, r7, #1
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800458c:	1cbb      	adds	r3, r7, #2
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004594:	e003      	b.n	800459e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004596:	1cbb      	adds	r3, r7, #2
 8004598:	881a      	ldrh	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	000a      	movs	r2, r1
 80045b0:	1cbb      	adds	r3, r7, #2
 80045b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045ba:	1cbb      	adds	r3, r7, #2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	041a      	lsls	r2, r3, #16
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	1cb9      	adds	r1, r7, #2
 80045ca:	8809      	ldrh	r1, [r1, #0]
 80045cc:	400b      	ands	r3, r1
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	619a      	str	r2, [r3, #24]
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	0019      	movs	r1, r3
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d11f      	bne.n	8004640 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004600:	4b14      	ldr	r3, [pc, #80]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	0013      	movs	r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	189b      	adds	r3, r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4912      	ldr	r1, [pc, #72]	; (8004658 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800460e:	0018      	movs	r0, r3
 8004610:	f7fb fd78 	bl	8000104 <__udivsi3>
 8004614:	0003      	movs	r3, r0
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800461a:	e008      	b.n	800462e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3b01      	subs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e001      	b.n	800462e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e009      	b.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	401a      	ands	r2, r3
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	429a      	cmp	r2, r3
 800463e:	d0ed      	beq.n	800461c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b004      	add	sp, #16
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	40007000 	.word	0x40007000
 8004650:	fffff9ff 	.word	0xfffff9ff
 8004654:	20000008 	.word	0x20000008
 8004658:	000f4240 	.word	0x000f4240

0800465c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	23e0      	movs	r3, #224	; 0xe0
 8004666:	01db      	lsls	r3, r3, #7
 8004668:	4013      	ands	r3, r2
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000

08004674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e2fe      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2201      	movs	r2, #1
 800468c:	4013      	ands	r3, r2
 800468e:	d100      	bne.n	8004692 <HAL_RCC_OscConfig+0x1e>
 8004690:	e07c      	b.n	800478c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004692:	4bc3      	ldr	r3, [pc, #780]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2238      	movs	r2, #56	; 0x38
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800469c:	4bc0      	ldr	r3, [pc, #768]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2203      	movs	r2, #3
 80046a2:	4013      	ands	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_OscConfig+0x3e>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d002      	beq.n	80046b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d10b      	bne.n	80046d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	4bb9      	ldr	r3, [pc, #740]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	029b      	lsls	r3, r3, #10
 80046c0:	4013      	ands	r3, r2
 80046c2:	d062      	beq.n	800478a <HAL_RCC_OscConfig+0x116>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d15e      	bne.n	800478a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e2d9      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	025b      	lsls	r3, r3, #9
 80046d8:	429a      	cmp	r2, r3
 80046da:	d107      	bne.n	80046ec <HAL_RCC_OscConfig+0x78>
 80046dc:	4bb0      	ldr	r3, [pc, #704]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4baf      	ldr	r3, [pc, #700]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	0249      	lsls	r1, r1, #9
 80046e6:	430a      	orrs	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e020      	b.n	800472e <HAL_RCC_OscConfig+0xba>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	23a0      	movs	r3, #160	; 0xa0
 80046f2:	02db      	lsls	r3, r3, #11
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d10e      	bne.n	8004716 <HAL_RCC_OscConfig+0xa2>
 80046f8:	4ba9      	ldr	r3, [pc, #676]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4ba8      	ldr	r3, [pc, #672]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80046fe:	2180      	movs	r1, #128	; 0x80
 8004700:	02c9      	lsls	r1, r1, #11
 8004702:	430a      	orrs	r2, r1
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	4ba6      	ldr	r3, [pc, #664]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4ba5      	ldr	r3, [pc, #660]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	0249      	lsls	r1, r1, #9
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e00b      	b.n	800472e <HAL_RCC_OscConfig+0xba>
 8004716:	4ba2      	ldr	r3, [pc, #648]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4ba1      	ldr	r3, [pc, #644]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800471c:	49a1      	ldr	r1, [pc, #644]	; (80049a4 <HAL_RCC_OscConfig+0x330>)
 800471e:	400a      	ands	r2, r1
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	4b9f      	ldr	r3, [pc, #636]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b9e      	ldr	r3, [pc, #632]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004728:	499f      	ldr	r1, [pc, #636]	; (80049a8 <HAL_RCC_OscConfig+0x334>)
 800472a:	400a      	ands	r2, r1
 800472c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d014      	beq.n	8004760 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fe fb2d 	bl	8002d94 <HAL_GetTick>
 800473a:	0003      	movs	r3, r0
 800473c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7fe fb28 	bl	8002d94 <HAL_GetTick>
 8004744:	0002      	movs	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e298      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004752:	4b93      	ldr	r3, [pc, #588]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	029b      	lsls	r3, r3, #10
 800475a:	4013      	ands	r3, r2
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0xcc>
 800475e:	e015      	b.n	800478c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fe fb18 	bl	8002d94 <HAL_GetTick>
 8004764:	0003      	movs	r3, r0
 8004766:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476a:	f7fe fb13 	bl	8002d94 <HAL_GetTick>
 800476e:	0002      	movs	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b64      	cmp	r3, #100	; 0x64
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e283      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800477c:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	4013      	ands	r3, r2
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0xf6>
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2202      	movs	r2, #2
 8004792:	4013      	ands	r3, r2
 8004794:	d100      	bne.n	8004798 <HAL_RCC_OscConfig+0x124>
 8004796:	e099      	b.n	80048cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004798:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2238      	movs	r2, #56	; 0x38
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a2:	4b7f      	ldr	r3, [pc, #508]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2203      	movs	r2, #3
 80047a8:	4013      	ands	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d102      	bne.n	80047b8 <HAL_RCC_OscConfig+0x144>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d002      	beq.n	80047be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d135      	bne.n	800482a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047be:	4b78      	ldr	r3, [pc, #480]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4013      	ands	r3, r2
 80047c8:	d005      	beq.n	80047d6 <HAL_RCC_OscConfig+0x162>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e256      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d6:	4b72      	ldr	r3, [pc, #456]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4a74      	ldr	r2, [pc, #464]	; (80049ac <HAL_RCC_OscConfig+0x338>)
 80047dc:	4013      	ands	r3, r2
 80047de:	0019      	movs	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	021a      	lsls	r2, r3, #8
 80047e6:	4b6e      	ldr	r3, [pc, #440]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d112      	bne.n	8004818 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80047f2:	4b6b      	ldr	r3, [pc, #428]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a6e      	ldr	r2, [pc, #440]	; (80049b0 <HAL_RCC_OscConfig+0x33c>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	4b67      	ldr	r3, [pc, #412]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004802:	430a      	orrs	r2, r1
 8004804:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004806:	4b66      	ldr	r3, [pc, #408]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0adb      	lsrs	r3, r3, #11
 800480c:	2207      	movs	r2, #7
 800480e:	4013      	ands	r3, r2
 8004810:	4a68      	ldr	r2, [pc, #416]	; (80049b4 <HAL_RCC_OscConfig+0x340>)
 8004812:	40da      	lsrs	r2, r3
 8004814:	4b68      	ldr	r3, [pc, #416]	; (80049b8 <HAL_RCC_OscConfig+0x344>)
 8004816:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004818:	4b68      	ldr	r3, [pc, #416]	; (80049bc <HAL_RCC_OscConfig+0x348>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	0018      	movs	r0, r3
 800481e:	f7fe fa5d 	bl	8002cdc <HAL_InitTick>
 8004822:	1e03      	subs	r3, r0, #0
 8004824:	d051      	beq.n	80048ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e22c      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d030      	beq.n	8004894 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004832:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a5e      	ldr	r2, [pc, #376]	; (80049b0 <HAL_RCC_OscConfig+0x33c>)
 8004838:	4013      	ands	r3, r2
 800483a:	0019      	movs	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	4b57      	ldr	r3, [pc, #348]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004842:	430a      	orrs	r2, r1
 8004844:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004846:	4b56      	ldr	r3, [pc, #344]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b55      	ldr	r3, [pc, #340]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	0049      	lsls	r1, r1, #1
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fe fa9e 	bl	8002d94 <HAL_GetTick>
 8004858:	0003      	movs	r3, r0
 800485a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485e:	f7fe fa99 	bl	8002d94 <HAL_GetTick>
 8004862:	0002      	movs	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e209      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004870:	4b4b      	ldr	r3, [pc, #300]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4013      	ands	r3, r2
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487c:	4b48      	ldr	r3, [pc, #288]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a4a      	ldr	r2, [pc, #296]	; (80049ac <HAL_RCC_OscConfig+0x338>)
 8004882:	4013      	ands	r3, r2
 8004884:	0019      	movs	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	4b44      	ldr	r3, [pc, #272]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	e01b      	b.n	80048cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004894:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800489a:	4949      	ldr	r1, [pc, #292]	; (80049c0 <HAL_RCC_OscConfig+0x34c>)
 800489c:	400a      	ands	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe fa78 	bl	8002d94 <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fe fa73 	bl	8002d94 <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e1e3      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048bc:	4b38      	ldr	r3, [pc, #224]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4013      	ands	r3, r2
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0x236>
 80048c8:	e000      	b.n	80048cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2208      	movs	r2, #8
 80048d2:	4013      	ands	r3, r2
 80048d4:	d047      	beq.n	8004966 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80048d6:	4b32      	ldr	r3, [pc, #200]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2238      	movs	r2, #56	; 0x38
 80048dc:	4013      	ands	r3, r2
 80048de:	2b18      	cmp	r3, #24
 80048e0:	d10a      	bne.n	80048f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80048e2:	4b2f      	ldr	r3, [pc, #188]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	2202      	movs	r2, #2
 80048e8:	4013      	ands	r3, r2
 80048ea:	d03c      	beq.n	8004966 <HAL_RCC_OscConfig+0x2f2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d138      	bne.n	8004966 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e1c5      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d019      	beq.n	8004934 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004902:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004904:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004906:	2101      	movs	r1, #1
 8004908:	430a      	orrs	r2, r1
 800490a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fe fa42 	bl	8002d94 <HAL_GetTick>
 8004910:	0003      	movs	r3, r0
 8004912:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004916:	f7fe fa3d 	bl	8002d94 <HAL_GetTick>
 800491a:	0002      	movs	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e1ad      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800492a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492c:	2202      	movs	r2, #2
 800492e:	4013      	ands	r3, r2
 8004930:	d0f1      	beq.n	8004916 <HAL_RCC_OscConfig+0x2a2>
 8004932:	e018      	b.n	8004966 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004934:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800493a:	2101      	movs	r1, #1
 800493c:	438a      	bics	r2, r1
 800493e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fe fa28 	bl	8002d94 <HAL_GetTick>
 8004944:	0003      	movs	r3, r0
 8004946:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494a:	f7fe fa23 	bl	8002d94 <HAL_GetTick>
 800494e:	0002      	movs	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e193      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800495e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004960:	2202      	movs	r2, #2
 8004962:	4013      	ands	r3, r2
 8004964:	d1f1      	bne.n	800494a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2204      	movs	r2, #4
 800496c:	4013      	ands	r3, r2
 800496e:	d100      	bne.n	8004972 <HAL_RCC_OscConfig+0x2fe>
 8004970:	e0c6      	b.n	8004b00 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004972:	231f      	movs	r3, #31
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2238      	movs	r2, #56	; 0x38
 8004980:	4013      	ands	r3, r2
 8004982:	2b20      	cmp	r3, #32
 8004984:	d11e      	bne.n	80049c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_OscConfig+0x32c>)
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	2202      	movs	r2, #2
 800498c:	4013      	ands	r3, r2
 800498e:	d100      	bne.n	8004992 <HAL_RCC_OscConfig+0x31e>
 8004990:	e0b6      	b.n	8004b00 <HAL_RCC_OscConfig+0x48c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d000      	beq.n	800499c <HAL_RCC_OscConfig+0x328>
 800499a:	e0b1      	b.n	8004b00 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e171      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	fffeffff 	.word	0xfffeffff
 80049a8:	fffbffff 	.word	0xfffbffff
 80049ac:	ffff80ff 	.word	0xffff80ff
 80049b0:	ffffc7ff 	.word	0xffffc7ff
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	20000008 	.word	0x20000008
 80049bc:	2000000c 	.word	0x2000000c
 80049c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049c4:	4bb1      	ldr	r3, [pc, #708]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 80049c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	055b      	lsls	r3, r3, #21
 80049cc:	4013      	ands	r3, r2
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_OscConfig+0x360>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x362>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d011      	beq.n	80049fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80049da:	4bac      	ldr	r3, [pc, #688]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 80049dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049de:	4bab      	ldr	r3, [pc, #684]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	0549      	lsls	r1, r1, #21
 80049e4:	430a      	orrs	r2, r1
 80049e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80049e8:	4ba8      	ldr	r3, [pc, #672]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 80049ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	055b      	lsls	r3, r3, #21
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80049f6:	231f      	movs	r3, #31
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049fe:	4ba4      	ldr	r3, [pc, #656]	; (8004c90 <HAL_RCC_OscConfig+0x61c>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4013      	ands	r3, r2
 8004a08:	d11a      	bne.n	8004a40 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a0a:	4ba1      	ldr	r3, [pc, #644]	; (8004c90 <HAL_RCC_OscConfig+0x61c>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4ba0      	ldr	r3, [pc, #640]	; (8004c90 <HAL_RCC_OscConfig+0x61c>)
 8004a10:	2180      	movs	r1, #128	; 0x80
 8004a12:	0049      	lsls	r1, r1, #1
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004a18:	f7fe f9bc 	bl	8002d94 <HAL_GetTick>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a22:	f7fe f9b7 	bl	8002d94 <HAL_GetTick>
 8004a26:	0002      	movs	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e127      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a34:	4b96      	ldr	r3, [pc, #600]	; (8004c90 <HAL_RCC_OscConfig+0x61c>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3e2>
 8004a48:	4b90      	ldr	r3, [pc, #576]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a4c:	4b8f      	ldr	r3, [pc, #572]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a4e:	2101      	movs	r1, #1
 8004a50:	430a      	orrs	r2, r1
 8004a52:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a54:	e01c      	b.n	8004a90 <HAL_RCC_OscConfig+0x41c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b05      	cmp	r3, #5
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x404>
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a62:	4b8a      	ldr	r3, [pc, #552]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a64:	2104      	movs	r1, #4
 8004a66:	430a      	orrs	r2, r1
 8004a68:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a6a:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a6e:	4b87      	ldr	r3, [pc, #540]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a70:	2101      	movs	r1, #1
 8004a72:	430a      	orrs	r2, r1
 8004a74:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0x41c>
 8004a78:	4b84      	ldr	r3, [pc, #528]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a7c:	4b83      	ldr	r3, [pc, #524]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a7e:	2101      	movs	r1, #1
 8004a80:	438a      	bics	r2, r1
 8004a82:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a84:	4b81      	ldr	r3, [pc, #516]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a88:	4b80      	ldr	r3, [pc, #512]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004a8a:	2104      	movs	r1, #4
 8004a8c:	438a      	bics	r2, r1
 8004a8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d014      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fe f97c 	bl	8002d94 <HAL_GetTick>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa0:	e009      	b.n	8004ab6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fe f977 	bl	8002d94 <HAL_GetTick>
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	4a79      	ldr	r2, [pc, #484]	; (8004c94 <HAL_RCC_OscConfig+0x620>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e0e6      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab6:	4b75      	ldr	r3, [pc, #468]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aba:	2202      	movs	r2, #2
 8004abc:	4013      	ands	r3, r2
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x42e>
 8004ac0:	e013      	b.n	8004aea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac2:	f7fe f967 	bl	8002d94 <HAL_GetTick>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aca:	e009      	b.n	8004ae0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004acc:	f7fe f962 	bl	8002d94 <HAL_GetTick>
 8004ad0:	0002      	movs	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	4a6f      	ldr	r2, [pc, #444]	; (8004c94 <HAL_RCC_OscConfig+0x620>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0d1      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ae0:	4b6a      	ldr	r3, [pc, #424]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004aea:	231f      	movs	r3, #31
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004af4:	4b65      	ldr	r3, [pc, #404]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af8:	4b64      	ldr	r3, [pc, #400]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004afa:	4967      	ldr	r1, [pc, #412]	; (8004c98 <HAL_RCC_OscConfig+0x624>)
 8004afc:	400a      	ands	r2, r1
 8004afe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d100      	bne.n	8004b0a <HAL_RCC_OscConfig+0x496>
 8004b08:	e0bb      	b.n	8004c82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b0a:	4b60      	ldr	r3, [pc, #384]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2238      	movs	r2, #56	; 0x38
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d100      	bne.n	8004b18 <HAL_RCC_OscConfig+0x4a4>
 8004b16:	e07b      	b.n	8004c10 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d156      	bne.n	8004bce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b20:	4b5a      	ldr	r3, [pc, #360]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b26:	495d      	ldr	r1, [pc, #372]	; (8004c9c <HAL_RCC_OscConfig+0x628>)
 8004b28:	400a      	ands	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fe f932 	bl	8002d94 <HAL_GetTick>
 8004b30:	0003      	movs	r3, r0
 8004b32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fe f92d 	bl	8002d94 <HAL_GetTick>
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e09d      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b48:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	049b      	lsls	r3, r3, #18
 8004b50:	4013      	ands	r3, r2
 8004b52:	d1f0      	bne.n	8004b36 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b54:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a51      	ldr	r2, [pc, #324]	; (8004ca0 <HAL_RCC_OscConfig+0x62c>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	021b      	lsls	r3, r3, #8
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	431a      	orrs	r2, r3
 8004b82:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b84:	430a      	orrs	r2, r1
 8004b86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b8e:	2180      	movs	r1, #128	; 0x80
 8004b90:	0449      	lsls	r1, r1, #17
 8004b92:	430a      	orrs	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004b96:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	4b3c      	ldr	r3, [pc, #240]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004b9c:	2180      	movs	r1, #128	; 0x80
 8004b9e:	0549      	lsls	r1, r1, #21
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fe f8f6 	bl	8002d94 <HAL_GetTick>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bae:	f7fe f8f1 	bl	8002d94 <HAL_GetTick>
 8004bb2:	0002      	movs	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e061      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc0:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	049b      	lsls	r3, r3, #18
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCC_OscConfig+0x53a>
 8004bcc:	e059      	b.n	8004c82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bce:	4b2f      	ldr	r3, [pc, #188]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bd4:	4931      	ldr	r1, [pc, #196]	; (8004c9c <HAL_RCC_OscConfig+0x628>)
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fe f8db 	bl	8002d94 <HAL_GetTick>
 8004bde:	0003      	movs	r3, r0
 8004be0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fe f8d6 	bl	8002d94 <HAL_GetTick>
 8004be8:	0002      	movs	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e046      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf6:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	049b      	lsls	r3, r3, #18
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004c02:	4b22      	ldr	r3, [pc, #136]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004c08:	4926      	ldr	r1, [pc, #152]	; (8004ca4 <HAL_RCC_OscConfig+0x630>)
 8004c0a:	400a      	ands	r2, r1
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	e038      	b.n	8004c82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e033      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <HAL_RCC_OscConfig+0x618>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2203      	movs	r2, #3
 8004c26:	401a      	ands	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d126      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2270      	movs	r2, #112	; 0x70
 8004c34:	401a      	ands	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d11f      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	23fe      	movs	r3, #254	; 0xfe
 8004c42:	01db      	lsls	r3, r3, #7
 8004c44:	401a      	ands	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d116      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	23f8      	movs	r3, #248	; 0xf8
 8004c54:	039b      	lsls	r3, r3, #14
 8004c56:	401a      	ands	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d10e      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	23e0      	movs	r3, #224	; 0xe0
 8004c64:	051b      	lsls	r3, r3, #20
 8004c66:	401a      	ands	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d106      	bne.n	8004c7e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	0f5b      	lsrs	r3, r3, #29
 8004c74:	075a      	lsls	r2, r3, #29
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b008      	add	sp, #32
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40007000 	.word	0x40007000
 8004c94:	00001388 	.word	0x00001388
 8004c98:	efffffff 	.word	0xefffffff
 8004c9c:	feffffff 	.word	0xfeffffff
 8004ca0:	11c1808c 	.word	0x11c1808c
 8004ca4:	eefefffc 	.word	0xeefefffc

08004ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0e9      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b76      	ldr	r3, [pc, #472]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d91e      	bls.n	8004d08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b73      	ldr	r3, [pc, #460]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2207      	movs	r2, #7
 8004cd0:	4393      	bics	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	4b70      	ldr	r3, [pc, #448]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cdc:	f7fe f85a 	bl	8002d94 <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ce4:	e009      	b.n	8004cfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce6:	f7fe f855 	bl	8002d94 <HAL_GetTick>
 8004cea:	0002      	movs	r2, r0
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	4a6a      	ldr	r2, [pc, #424]	; (8004e9c <HAL_RCC_ClockConfig+0x1f4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0ca      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cfa:	4b67      	ldr	r3, [pc, #412]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2207      	movs	r2, #7
 8004d00:	4013      	ands	r3, r2
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d1ee      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d015      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2204      	movs	r2, #4
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d006      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d1c:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	4b5f      	ldr	r3, [pc, #380]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d22:	21e0      	movs	r1, #224	; 0xe0
 8004d24:	01c9      	lsls	r1, r1, #7
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2201      	movs	r2, #1
 8004d44:	4013      	ands	r3, r2
 8004d46:	d057      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d50:	4b53      	ldr	r3, [pc, #332]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	029b      	lsls	r3, r3, #10
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d12b      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e097      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d68:	4b4d      	ldr	r3, [pc, #308]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	049b      	lsls	r3, r3, #18
 8004d70:	4013      	ands	r3, r2
 8004d72:	d11f      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e08b      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d80:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d113      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e07f      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d98:	4b41      	ldr	r3, [pc, #260]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d108      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e074      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da6:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004daa:	2202      	movs	r2, #2
 8004dac:	4013      	ands	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e06d      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004db4:	4b3a      	ldr	r3, [pc, #232]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2207      	movs	r2, #7
 8004dba:	4393      	bics	r3, r2
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fd ffe4 	bl	8002d94 <HAL_GetTick>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd0:	e009      	b.n	8004de6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd2:	f7fd ffdf 	bl	8002d94 <HAL_GetTick>
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	4a2f      	ldr	r2, [pc, #188]	; (8004e9c <HAL_RCC_ClockConfig+0x1f4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e054      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2238      	movs	r2, #56	; 0x38
 8004dec:	401a      	ands	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d1ec      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2207      	movs	r2, #7
 8004dfe:	4013      	ands	r3, r2
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d21e      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2207      	movs	r2, #7
 8004e0c:	4393      	bics	r3, r2
 8004e0e:	0019      	movs	r1, r3
 8004e10:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e18:	f7fd ffbc 	bl	8002d94 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e20:	e009      	b.n	8004e36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e22:	f7fd ffb7 	bl	8002d94 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <HAL_RCC_ClockConfig+0x1f4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e02c      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e36:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <HAL_RCC_ClockConfig+0x1f0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2207      	movs	r2, #7
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d1ee      	bne.n	8004e22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4e:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <HAL_RCC_ClockConfig+0x200>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	0019      	movs	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004e62:	f000 f829 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8004e66:	0001      	movs	r1, r0
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	0a1b      	lsrs	r3, r3, #8
 8004e6e:	220f      	movs	r2, #15
 8004e70:	401a      	ands	r2, r3
 8004e72:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <HAL_RCC_ClockConfig+0x204>)
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	58d3      	ldr	r3, [r2, r3]
 8004e78:	221f      	movs	r2, #31
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	000a      	movs	r2, r1
 8004e7e:	40da      	lsrs	r2, r3
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_ClockConfig+0x208>)
 8004e82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_ClockConfig+0x20c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fd ff27 	bl	8002cdc <HAL_InitTick>
 8004e8e:	0003      	movs	r3, r0
}
 8004e90:	0018      	movs	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b004      	add	sp, #16
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40022000 	.word	0x40022000
 8004e9c:	00001388 	.word	0x00001388
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	fffff0ff 	.word	0xfffff0ff
 8004ea8:	ffff8fff 	.word	0xffff8fff
 8004eac:	08007848 	.word	0x08007848
 8004eb0:	20000008 	.word	0x20000008
 8004eb4:	2000000c 	.word	0x2000000c

08004eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ebe:	4b3c      	ldr	r3, [pc, #240]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2238      	movs	r2, #56	; 0x38
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d10f      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004ec8:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	0adb      	lsrs	r3, r3, #11
 8004ece:	2207      	movs	r2, #7
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	0013      	movs	r3, r2
 8004ed8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	4835      	ldr	r0, [pc, #212]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ede:	f7fb f911 	bl	8000104 <__udivsi3>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	e05d      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ee8:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2238      	movs	r2, #56	; 0x38
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d102      	bne.n	8004efa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	e054      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004efa:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2238      	movs	r2, #56	; 0x38
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d138      	bne.n	8004f78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004f06:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	2207      	movs	r2, #7
 8004f18:	4013      	ands	r3, r2
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d10d      	bne.n	8004f40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4824      	ldr	r0, [pc, #144]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004f28:	f7fb f8ec 	bl	8000104 <__udivsi3>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	0019      	movs	r1, r3
 8004f30:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	227f      	movs	r2, #127	; 0x7f
 8004f38:	4013      	ands	r3, r2
 8004f3a:	434b      	muls	r3, r1
 8004f3c:	617b      	str	r3, [r7, #20]
        break;
 8004f3e:	e00d      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	481c      	ldr	r0, [pc, #112]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f44:	f7fb f8de 	bl	8000104 <__udivsi3>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	0a1b      	lsrs	r3, r3, #8
 8004f52:	227f      	movs	r2, #127	; 0x7f
 8004f54:	4013      	ands	r3, r2
 8004f56:	434b      	muls	r3, r1
 8004f58:	617b      	str	r3, [r7, #20]
        break;
 8004f5a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	0f5b      	lsrs	r3, r3, #29
 8004f62:	2207      	movs	r2, #7
 8004f64:	4013      	ands	r3, r2
 8004f66:	3301      	adds	r3, #1
 8004f68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f7fb f8c9 	bl	8000104 <__udivsi3>
 8004f72:	0003      	movs	r3, r0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e015      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2238      	movs	r2, #56	; 0x38
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d103      	bne.n	8004f8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2238      	movs	r2, #56	; 0x38
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b18      	cmp	r3, #24
 8004f96:	d103      	bne.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004f98:	23fa      	movs	r3, #250	; 0xfa
 8004f9a:	01db      	lsls	r3, r3, #7
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	e001      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fa4:	693b      	ldr	r3, [r7, #16]
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b006      	add	sp, #24
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	00f42400 	.word	0x00f42400
 8004fb8:	007a1200 	.word	0x007a1200

08004fbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc0:	4b02      	ldr	r3, [pc, #8]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	20000008 	.word	0x20000008

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004fd4:	f7ff fff2 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8004fd8:	0004      	movs	r4, r0
 8004fda:	f7ff fb3f 	bl	800465c <LL_RCC_GetAPB1Prescaler>
 8004fde:	0003      	movs	r3, r0
 8004fe0:	0b1a      	lsrs	r2, r3, #12
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fe4:	0092      	lsls	r2, r2, #2
 8004fe6:	58d3      	ldr	r3, [r2, r3]
 8004fe8:	221f      	movs	r2, #31
 8004fea:	4013      	ands	r3, r2
 8004fec:	40dc      	lsrs	r4, r3
 8004fee:	0023      	movs	r3, r4
}
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	08007888 	.word	0x08007888

08004ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005004:	2313      	movs	r3, #19
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800500c:	2312      	movs	r3, #18
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	029b      	lsls	r3, r3, #10
 800501c:	4013      	ands	r3, r2
 800501e:	d100      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005020:	e0a3      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005022:	2011      	movs	r0, #17
 8005024:	183b      	adds	r3, r7, r0
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800502a:	4ba5      	ldr	r3, [pc, #660]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800502c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	055b      	lsls	r3, r3, #21
 8005032:	4013      	ands	r3, r2
 8005034:	d110      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005036:	4ba2      	ldr	r3, [pc, #648]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800503a:	4ba1      	ldr	r3, [pc, #644]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800503c:	2180      	movs	r1, #128	; 0x80
 800503e:	0549      	lsls	r1, r1, #21
 8005040:	430a      	orrs	r2, r1
 8005042:	63da      	str	r2, [r3, #60]	; 0x3c
 8005044:	4b9e      	ldr	r3, [pc, #632]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	055b      	lsls	r3, r3, #21
 800504c:	4013      	ands	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005052:	183b      	adds	r3, r7, r0
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005058:	4b9a      	ldr	r3, [pc, #616]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b99      	ldr	r3, [pc, #612]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	0049      	lsls	r1, r1, #1
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005066:	f7fd fe95 	bl	8002d94 <HAL_GetTick>
 800506a:	0003      	movs	r3, r0
 800506c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800506e:	e00b      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005070:	f7fd fe90 	bl	8002d94 <HAL_GetTick>
 8005074:	0002      	movs	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d904      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800507e:	2313      	movs	r3, #19
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	2203      	movs	r2, #3
 8005084:	701a      	strb	r2, [r3, #0]
        break;
 8005086:	e005      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005088:	4b8e      	ldr	r3, [pc, #568]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	4013      	ands	r3, r2
 8005092:	d0ed      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005094:	2313      	movs	r3, #19
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d154      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800509e:	4b88      	ldr	r3, [pc, #544]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050a2:	23c0      	movs	r3, #192	; 0xc0
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4013      	ands	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d019      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d014      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050ba:	4b81      	ldr	r3, [pc, #516]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050be:	4a82      	ldr	r2, [pc, #520]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c4:	4b7e      	ldr	r3, [pc, #504]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050c8:	4b7d      	ldr	r3, [pc, #500]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	0249      	lsls	r1, r1, #9
 80050ce:	430a      	orrs	r2, r1
 80050d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d2:	4b7b      	ldr	r3, [pc, #492]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050d6:	4b7a      	ldr	r3, [pc, #488]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050d8:	497c      	ldr	r1, [pc, #496]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80050da:	400a      	ands	r2, r1
 80050dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050de:	4b78      	ldr	r3, [pc, #480]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2201      	movs	r2, #1
 80050e8:	4013      	ands	r3, r2
 80050ea:	d016      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd fe52 	bl	8002d94 <HAL_GetTick>
 80050f0:	0003      	movs	r3, r0
 80050f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f4:	e00c      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fd fe4d 	bl	8002d94 <HAL_GetTick>
 80050fa:	0002      	movs	r2, r0
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	4a73      	ldr	r2, [pc, #460]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d904      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005106:	2313      	movs	r3, #19
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	2203      	movs	r2, #3
 800510c:	701a      	strb	r2, [r3, #0]
            break;
 800510e:	e004      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005110:	4b6b      	ldr	r3, [pc, #428]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	2202      	movs	r2, #2
 8005116:	4013      	ands	r3, r2
 8005118:	d0ed      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800511a:	2313      	movs	r3, #19
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005124:	4b66      	ldr	r3, [pc, #408]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005128:	4a67      	ldr	r2, [pc, #412]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800512a:	4013      	ands	r3, r2
 800512c:	0019      	movs	r1, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005132:	4b63      	ldr	r3, [pc, #396]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005134:	430a      	orrs	r2, r1
 8005136:	65da      	str	r2, [r3, #92]	; 0x5c
 8005138:	e00c      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800513a:	2312      	movs	r3, #18
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	2213      	movs	r2, #19
 8005140:	18ba      	adds	r2, r7, r2
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e005      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	2312      	movs	r3, #18
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	2213      	movs	r2, #19
 800514e:	18ba      	adds	r2, r7, r2
 8005150:	7812      	ldrb	r2, [r2, #0]
 8005152:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005154:	2311      	movs	r3, #17
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d105      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515e:	4b58      	ldr	r3, [pc, #352]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005162:	4b57      	ldr	r3, [pc, #348]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005164:	495b      	ldr	r1, [pc, #364]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005166:	400a      	ands	r2, r1
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	4013      	ands	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005174:	4b52      	ldr	r3, [pc, #328]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	2203      	movs	r2, #3
 800517a:	4393      	bics	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	4b4f      	ldr	r3, [pc, #316]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005184:	430a      	orrs	r2, r1
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2210      	movs	r2, #16
 800518e:	4013      	ands	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005192:	4b4b      	ldr	r3, [pc, #300]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	4a50      	ldr	r2, [pc, #320]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005198:	4013      	ands	r3, r2
 800519a:	0019      	movs	r1, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051a2:	430a      	orrs	r2, r1
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4013      	ands	r3, r2
 80051b0:	d009      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051b2:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	4a49      	ldr	r2, [pc, #292]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	4b3f      	ldr	r3, [pc, #252]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051c2:	430a      	orrs	r2, r1
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4013      	ands	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051d2:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	4a42      	ldr	r2, [pc, #264]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051d8:	4013      	ands	r3, r2
 80051da:	0019      	movs	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051e2:	430a      	orrs	r2, r1
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2220      	movs	r2, #32
 80051ec:	4013      	ands	r3, r2
 80051ee:	d009      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051f0:	4b33      	ldr	r3, [pc, #204]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f4:	4a3b      	ldr	r2, [pc, #236]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005200:	430a      	orrs	r2, r1
 8005202:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	01db      	lsls	r3, r3, #7
 800520c:	4013      	ands	r3, r2
 800520e:	d015      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005210:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	0899      	lsrs	r1, r3, #2
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800521e:	430a      	orrs	r2, r1
 8005220:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69da      	ldr	r2, [r3, #28]
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	05db      	lsls	r3, r3, #23
 800522a:	429a      	cmp	r2, r3
 800522c:	d106      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800522e:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005234:	2180      	movs	r1, #128	; 0x80
 8005236:	0249      	lsls	r1, r1, #9
 8005238:	430a      	orrs	r2, r1
 800523a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	039b      	lsls	r3, r3, #14
 8005244:	4013      	ands	r3, r2
 8005246:	d016      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005248:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800524e:	4013      	ands	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1a      	ldr	r2, [r3, #32]
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005258:	430a      	orrs	r2, r1
 800525a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	03db      	lsls	r3, r3, #15
 8005264:	429a      	cmp	r2, r3
 8005266:	d106      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	0449      	lsls	r1, r1, #17
 8005272:	430a      	orrs	r2, r1
 8005274:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	2380      	movs	r3, #128	; 0x80
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	4013      	ands	r3, r2
 8005280:	d016      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005282:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	4a19      	ldr	r2, [pc, #100]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005288:	4013      	ands	r3, r2
 800528a:	0019      	movs	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005292:	430a      	orrs	r2, r1
 8005294:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	01db      	lsls	r3, r3, #7
 800529e:	429a      	cmp	r2, r3
 80052a0:	d106      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	0249      	lsls	r1, r1, #9
 80052ac:	430a      	orrs	r2, r1
 80052ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80052b0:	2312      	movs	r3, #18
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	781b      	ldrb	r3, [r3, #0]
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b006      	add	sp, #24
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40007000 	.word	0x40007000
 80052c8:	fffffcff 	.word	0xfffffcff
 80052cc:	fffeffff 	.word	0xfffeffff
 80052d0:	00001388 	.word	0x00001388
 80052d4:	efffffff 	.word	0xefffffff
 80052d8:	fffff3ff 	.word	0xfffff3ff
 80052dc:	fff3ffff 	.word	0xfff3ffff
 80052e0:	ffcfffff 	.word	0xffcfffff
 80052e4:	ffffcfff 	.word	0xffffcfff
 80052e8:	ffbfffff 	.word	0xffbfffff
 80052ec:	ffff3fff 	.word	0xffff3fff

080052f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e04a      	b.n	8005398 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	223d      	movs	r2, #61	; 0x3d
 8005306:	5c9b      	ldrb	r3, [r3, r2]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d107      	bne.n	800531e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	223c      	movs	r2, #60	; 0x3c
 8005312:	2100      	movs	r1, #0
 8005314:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	0018      	movs	r0, r3
 800531a:	f7fd fa5f 	bl	80027dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	223d      	movs	r2, #61	; 0x3d
 8005322:	2102      	movs	r1, #2
 8005324:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	0019      	movs	r1, r3
 8005330:	0010      	movs	r0, r2
 8005332:	f000 fb49 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2248      	movs	r2, #72	; 0x48
 800533a:	2101      	movs	r1, #1
 800533c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	223e      	movs	r2, #62	; 0x3e
 8005342:	2101      	movs	r1, #1
 8005344:	5499      	strb	r1, [r3, r2]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	223f      	movs	r2, #63	; 0x3f
 800534a:	2101      	movs	r1, #1
 800534c:	5499      	strb	r1, [r3, r2]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2240      	movs	r2, #64	; 0x40
 8005352:	2101      	movs	r1, #1
 8005354:	5499      	strb	r1, [r3, r2]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2241      	movs	r2, #65	; 0x41
 800535a:	2101      	movs	r1, #1
 800535c:	5499      	strb	r1, [r3, r2]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2242      	movs	r2, #66	; 0x42
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2243      	movs	r2, #67	; 0x43
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2244      	movs	r2, #68	; 0x44
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2245      	movs	r2, #69	; 0x45
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2246      	movs	r2, #70	; 0x46
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2247      	movs	r2, #71	; 0x47
 800538a:	2101      	movs	r1, #1
 800538c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	223d      	movs	r2, #61	; 0x3d
 8005392:	2101      	movs	r1, #1
 8005394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b002      	add	sp, #8
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e04a      	b.n	8005448 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	223d      	movs	r2, #61	; 0x3d
 80053b6:	5c9b      	ldrb	r3, [r3, r2]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d107      	bne.n	80053ce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	223c      	movs	r2, #60	; 0x3c
 80053c2:	2100      	movs	r1, #0
 80053c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f000 f841 	bl	8005450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	223d      	movs	r2, #61	; 0x3d
 80053d2:	2102      	movs	r1, #2
 80053d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	0019      	movs	r1, r3
 80053e0:	0010      	movs	r0, r2
 80053e2:	f000 faf1 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2248      	movs	r2, #72	; 0x48
 80053ea:	2101      	movs	r1, #1
 80053ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	223e      	movs	r2, #62	; 0x3e
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	223f      	movs	r2, #63	; 0x3f
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2240      	movs	r2, #64	; 0x40
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2241      	movs	r2, #65	; 0x41
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2242      	movs	r2, #66	; 0x42
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2243      	movs	r2, #67	; 0x43
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2244      	movs	r2, #68	; 0x44
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2245      	movs	r2, #69	; 0x45
 800542a:	2101      	movs	r1, #1
 800542c:	5499      	strb	r1, [r3, r2]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2246      	movs	r2, #70	; 0x46
 8005432:	2101      	movs	r1, #1
 8005434:	5499      	strb	r1, [r3, r2]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2247      	movs	r2, #71	; 0x47
 800543a:	2101      	movs	r1, #1
 800543c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	223d      	movs	r2, #61	; 0x3d
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b002      	add	sp, #8
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <HAL_TIM_PWM_Start+0x22>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	223e      	movs	r2, #62	; 0x3e
 8005474:	5c9b      	ldrb	r3, [r3, r2]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	4193      	sbcs	r3, r2
 800547e:	b2db      	uxtb	r3, r3
 8005480:	e037      	b.n	80054f2 <HAL_TIM_PWM_Start+0x92>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d108      	bne.n	800549a <HAL_TIM_PWM_Start+0x3a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	223f      	movs	r2, #63	; 0x3f
 800548c:	5c9b      	ldrb	r3, [r3, r2]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	1e5a      	subs	r2, r3, #1
 8005494:	4193      	sbcs	r3, r2
 8005496:	b2db      	uxtb	r3, r3
 8005498:	e02b      	b.n	80054f2 <HAL_TIM_PWM_Start+0x92>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d108      	bne.n	80054b2 <HAL_TIM_PWM_Start+0x52>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	5c9b      	ldrb	r3, [r3, r2]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	4193      	sbcs	r3, r2
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	e01f      	b.n	80054f2 <HAL_TIM_PWM_Start+0x92>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	d108      	bne.n	80054ca <HAL_TIM_PWM_Start+0x6a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2241      	movs	r2, #65	; 0x41
 80054bc:	5c9b      	ldrb	r3, [r3, r2]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	1e5a      	subs	r2, r3, #1
 80054c4:	4193      	sbcs	r3, r2
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	e013      	b.n	80054f2 <HAL_TIM_PWM_Start+0x92>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d108      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x82>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2242      	movs	r2, #66	; 0x42
 80054d4:	5c9b      	ldrb	r3, [r3, r2]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	1e5a      	subs	r2, r3, #1
 80054dc:	4193      	sbcs	r3, r2
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e007      	b.n	80054f2 <HAL_TIM_PWM_Start+0x92>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2243      	movs	r2, #67	; 0x43
 80054e6:	5c9b      	ldrb	r3, [r3, r2]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	1e5a      	subs	r2, r3, #1
 80054ee:	4193      	sbcs	r3, r2
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e081      	b.n	80055fe <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start+0xaa>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	223e      	movs	r2, #62	; 0x3e
 8005504:	2102      	movs	r1, #2
 8005506:	5499      	strb	r1, [r3, r2]
 8005508:	e023      	b.n	8005552 <HAL_TIM_PWM_Start+0xf2>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b04      	cmp	r3, #4
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Start+0xba>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	223f      	movs	r2, #63	; 0x3f
 8005514:	2102      	movs	r1, #2
 8005516:	5499      	strb	r1, [r3, r2]
 8005518:	e01b      	b.n	8005552 <HAL_TIM_PWM_Start+0xf2>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d104      	bne.n	800552a <HAL_TIM_PWM_Start+0xca>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2240      	movs	r2, #64	; 0x40
 8005524:	2102      	movs	r1, #2
 8005526:	5499      	strb	r1, [r3, r2]
 8005528:	e013      	b.n	8005552 <HAL_TIM_PWM_Start+0xf2>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0xda>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2241      	movs	r2, #65	; 0x41
 8005534:	2102      	movs	r1, #2
 8005536:	5499      	strb	r1, [r3, r2]
 8005538:	e00b      	b.n	8005552 <HAL_TIM_PWM_Start+0xf2>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b10      	cmp	r3, #16
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0xea>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2242      	movs	r2, #66	; 0x42
 8005544:	2102      	movs	r1, #2
 8005546:	5499      	strb	r1, [r3, r2]
 8005548:	e003      	b.n	8005552 <HAL_TIM_PWM_Start+0xf2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2243      	movs	r2, #67	; 0x43
 800554e:	2102      	movs	r1, #2
 8005550:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	2201      	movs	r2, #1
 800555a:	0018      	movs	r0, r3
 800555c:	f000 fde2 	bl	8006124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a28      	ldr	r2, [pc, #160]	; (8005608 <HAL_TIM_PWM_Start+0x1a8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_TIM_PWM_Start+0x11e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a27      	ldr	r2, [pc, #156]	; (800560c <HAL_TIM_PWM_Start+0x1ac>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_TIM_PWM_Start+0x11e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a25      	ldr	r2, [pc, #148]	; (8005610 <HAL_TIM_PWM_Start+0x1b0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d101      	bne.n	8005582 <HAL_TIM_PWM_Start+0x122>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <HAL_TIM_PWM_Start+0x124>
 8005582:	2300      	movs	r3, #0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	0209      	lsls	r1, r1, #8
 8005596:	430a      	orrs	r2, r1
 8005598:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <HAL_TIM_PWM_Start+0x1a8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00a      	beq.n	80055ba <HAL_TIM_PWM_Start+0x15a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	05db      	lsls	r3, r3, #23
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d004      	beq.n	80055ba <HAL_TIM_PWM_Start+0x15a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a17      	ldr	r2, [pc, #92]	; (8005614 <HAL_TIM_PWM_Start+0x1b4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d116      	bne.n	80055e8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a15      	ldr	r2, [pc, #84]	; (8005618 <HAL_TIM_PWM_Start+0x1b8>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b06      	cmp	r3, #6
 80055ca:	d016      	beq.n	80055fa <HAL_TIM_PWM_Start+0x19a>
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	025b      	lsls	r3, r3, #9
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d011      	beq.n	80055fa <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2101      	movs	r1, #1
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	e008      	b.n	80055fa <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2101      	movs	r1, #1
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e000      	b.n	80055fc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	b004      	add	sp, #16
 8005604:	bd80      	pop	{r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800
 8005614:	40000400 	.word	0x40000400
 8005618:	00010007 	.word	0x00010007

0800561c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2317      	movs	r3, #23
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	223c      	movs	r2, #60	; 0x3c
 8005634:	5c9b      	ldrb	r3, [r3, r2]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_PWM_ConfigChannel+0x22>
 800563a:	2302      	movs	r3, #2
 800563c:	e0e5      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	223c      	movs	r2, #60	; 0x3c
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b14      	cmp	r3, #20
 800564a:	d900      	bls.n	800564e <HAL_TIM_PWM_ConfigChannel+0x32>
 800564c:	e0d1      	b.n	80057f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	009a      	lsls	r2, r3, #2
 8005652:	4b70      	ldr	r3, [pc, #448]	; (8005814 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005654:	18d3      	adds	r3, r2, r3
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f000 fa26 	bl	8005ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2108      	movs	r1, #8
 8005674:	430a      	orrs	r2, r1
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2104      	movs	r1, #4
 8005684:	438a      	bics	r2, r1
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	619a      	str	r2, [r3, #24]
      break;
 800569a:	e0af      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	0011      	movs	r1, r2
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 fa85 	bl	8005bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2180      	movs	r1, #128	; 0x80
 80056b6:	0109      	lsls	r1, r1, #4
 80056b8:	430a      	orrs	r2, r1
 80056ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4954      	ldr	r1, [pc, #336]	; (8005818 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80056c8:	400a      	ands	r2, r1
 80056ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6999      	ldr	r1, [r3, #24]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	619a      	str	r2, [r3, #24]
      break;
 80056e0:	e08c      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	0011      	movs	r1, r2
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 fae0 	bl	8005cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2108      	movs	r1, #8
 80056fc:	430a      	orrs	r2, r1
 80056fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2104      	movs	r1, #4
 800570c:	438a      	bics	r2, r1
 800570e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69d9      	ldr	r1, [r3, #28]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	61da      	str	r2, [r3, #28]
      break;
 8005722:	e06b      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	0011      	movs	r1, r2
 800572c:	0018      	movs	r0, r3
 800572e:	f000 fb41 	bl	8005db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	0109      	lsls	r1, r1, #4
 8005740:	430a      	orrs	r2, r1
 8005742:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69da      	ldr	r2, [r3, #28]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4932      	ldr	r1, [pc, #200]	; (8005818 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005750:	400a      	ands	r2, r1
 8005752:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69d9      	ldr	r1, [r3, #28]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	61da      	str	r2, [r3, #28]
      break;
 8005768:	e048      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	0011      	movs	r1, r2
 8005772:	0018      	movs	r0, r3
 8005774:	f000 fb82 	bl	8005e7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2108      	movs	r1, #8
 8005784:	430a      	orrs	r2, r1
 8005786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2104      	movs	r1, #4
 8005794:	438a      	bics	r2, r1
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057aa:	e027      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	0011      	movs	r1, r2
 80057b4:	0018      	movs	r0, r3
 80057b6:	f000 fbbb 	bl	8005f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2180      	movs	r1, #128	; 0x80
 80057c6:	0109      	lsls	r1, r1, #4
 80057c8:	430a      	orrs	r2, r1
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4910      	ldr	r1, [pc, #64]	; (8005818 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80057d8:	400a      	ands	r2, r1
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057f0:	e004      	b.n	80057fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80057f2:	2317      	movs	r3, #23
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
      break;
 80057fa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	223c      	movs	r2, #60	; 0x3c
 8005800:	2100      	movs	r1, #0
 8005802:	5499      	strb	r1, [r3, r2]

  return status;
 8005804:	2317      	movs	r3, #23
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	781b      	ldrb	r3, [r3, #0]
}
 800580a:	0018      	movs	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	b006      	add	sp, #24
 8005810:	bd80      	pop	{r7, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	080078a8 	.word	0x080078a8
 8005818:	fffffbff 	.word	0xfffffbff

0800581c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	230f      	movs	r3, #15
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2200      	movs	r2, #0
 800582c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	223c      	movs	r2, #60	; 0x3c
 8005832:	5c9b      	ldrb	r3, [r3, r2]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_TIM_ConfigClockSource+0x20>
 8005838:	2302      	movs	r3, #2
 800583a:	e0bc      	b.n	80059b6 <HAL_TIM_ConfigClockSource+0x19a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	223c      	movs	r2, #60	; 0x3c
 8005840:	2101      	movs	r1, #1
 8005842:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	223d      	movs	r2, #61	; 0x3d
 8005848:	2102      	movs	r1, #2
 800584a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a5a      	ldr	r2, [pc, #360]	; (80059c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005858:	4013      	ands	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a59      	ldr	r2, [pc, #356]	; (80059c4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	0192      	lsls	r2, r2, #6
 8005874:	4293      	cmp	r3, r2
 8005876:	d040      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0xde>
 8005878:	2280      	movs	r2, #128	; 0x80
 800587a:	0192      	lsls	r2, r2, #6
 800587c:	4293      	cmp	r3, r2
 800587e:	d900      	bls.n	8005882 <HAL_TIM_ConfigClockSource+0x66>
 8005880:	e088      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
 8005882:	2280      	movs	r2, #128	; 0x80
 8005884:	0152      	lsls	r2, r2, #5
 8005886:	4293      	cmp	r3, r2
 8005888:	d100      	bne.n	800588c <HAL_TIM_ConfigClockSource+0x70>
 800588a:	e088      	b.n	800599e <HAL_TIM_ConfigClockSource+0x182>
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	0152      	lsls	r2, r2, #5
 8005890:	4293      	cmp	r3, r2
 8005892:	d900      	bls.n	8005896 <HAL_TIM_ConfigClockSource+0x7a>
 8005894:	e07e      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
 8005896:	2b70      	cmp	r3, #112	; 0x70
 8005898:	d018      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0xb0>
 800589a:	d900      	bls.n	800589e <HAL_TIM_ConfigClockSource+0x82>
 800589c:	e07a      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
 800589e:	2b60      	cmp	r3, #96	; 0x60
 80058a0:	d04f      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x126>
 80058a2:	d900      	bls.n	80058a6 <HAL_TIM_ConfigClockSource+0x8a>
 80058a4:	e076      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
 80058a6:	2b50      	cmp	r3, #80	; 0x50
 80058a8:	d03b      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x106>
 80058aa:	d900      	bls.n	80058ae <HAL_TIM_ConfigClockSource+0x92>
 80058ac:	e072      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d057      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x146>
 80058b2:	d900      	bls.n	80058b6 <HAL_TIM_ConfigClockSource+0x9a>
 80058b4:	e06e      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
 80058b6:	2b30      	cmp	r3, #48	; 0x30
 80058b8:	d063      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x166>
 80058ba:	d86b      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d060      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x166>
 80058c0:	d868      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d05d      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x166>
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d05b      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x166>
 80058ca:	e063      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	f000 fc02 	bl	80060e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2277      	movs	r2, #119	; 0x77
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	609a      	str	r2, [r3, #8]
      break;
 80058f8:	e052      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800590a:	f000 fbeb 	bl	80060e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	01c9      	lsls	r1, r1, #7
 800591c:	430a      	orrs	r2, r1
 800591e:	609a      	str	r2, [r3, #8]
      break;
 8005920:	e03e      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592e:	001a      	movs	r2, r3
 8005930:	f000 fb5c 	bl	8005fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2150      	movs	r1, #80	; 0x50
 800593a:	0018      	movs	r0, r3
 800593c:	f000 fbb6 	bl	80060ac <TIM_ITRx_SetConfig>
      break;
 8005940:	e02e      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800594e:	001a      	movs	r2, r3
 8005950:	f000 fb7a 	bl	8006048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2160      	movs	r1, #96	; 0x60
 800595a:	0018      	movs	r0, r3
 800595c:	f000 fba6 	bl	80060ac <TIM_ITRx_SetConfig>
      break;
 8005960:	e01e      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	001a      	movs	r2, r3
 8005970:	f000 fb3c 	bl	8005fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2140      	movs	r1, #64	; 0x40
 800597a:	0018      	movs	r0, r3
 800597c:	f000 fb96 	bl	80060ac <TIM_ITRx_SetConfig>
      break;
 8005980:	e00e      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	0019      	movs	r1, r3
 800598c:	0010      	movs	r0, r2
 800598e:	f000 fb8d 	bl	80060ac <TIM_ITRx_SetConfig>
      break;
 8005992:	e005      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005994:	230f      	movs	r3, #15
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	2201      	movs	r2, #1
 800599a:	701a      	strb	r2, [r3, #0]
      break;
 800599c:	e000      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800599e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	223d      	movs	r2, #61	; 0x3d
 80059a4:	2101      	movs	r1, #1
 80059a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	223c      	movs	r2, #60	; 0x3c
 80059ac:	2100      	movs	r1, #0
 80059ae:	5499      	strb	r1, [r3, r2]

  return status;
 80059b0:	230f      	movs	r3, #15
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	781b      	ldrb	r3, [r3, #0]
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	ffceff88 	.word	0xffceff88
 80059c4:	ffff00ff 	.word	0xffff00ff

080059c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <TIM_Base_SetConfig+0xd4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d008      	beq.n	80059f2 <TIM_Base_SetConfig+0x2a>
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	05db      	lsls	r3, r3, #23
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d003      	beq.n	80059f2 <TIM_Base_SetConfig+0x2a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2c      	ldr	r2, [pc, #176]	; (8005aa0 <TIM_Base_SetConfig+0xd8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d108      	bne.n	8005a04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2270      	movs	r2, #112	; 0x70
 80059f6:	4393      	bics	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <TIM_Base_SetConfig+0xd4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d014      	beq.n	8005a36 <TIM_Base_SetConfig+0x6e>
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	05db      	lsls	r3, r3, #23
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d00f      	beq.n	8005a36 <TIM_Base_SetConfig+0x6e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <TIM_Base_SetConfig+0xd8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00b      	beq.n	8005a36 <TIM_Base_SetConfig+0x6e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a20      	ldr	r2, [pc, #128]	; (8005aa4 <TIM_Base_SetConfig+0xdc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <TIM_Base_SetConfig+0x6e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <TIM_Base_SetConfig+0xe0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_Base_SetConfig+0x6e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <TIM_Base_SetConfig+0xe4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d108      	bne.n	8005a48 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <TIM_Base_SetConfig+0xe8>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	4393      	bics	r3, r2
 8005a4e:	001a      	movs	r2, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <TIM_Base_SetConfig+0xd4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0xbe>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a0b      	ldr	r2, [pc, #44]	; (8005aa8 <TIM_Base_SetConfig+0xe0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0xbe>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <TIM_Base_SetConfig+0xe4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d103      	bne.n	8005a8e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	615a      	str	r2, [r3, #20]
}
 8005a94:	46c0      	nop			; (mov r8, r8)
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b004      	add	sp, #16
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40002000 	.word	0x40002000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800
 8005ab0:	fffffcff 	.word	0xfffffcff

08005ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4393      	bics	r3, r2
 8005ac6:	001a      	movs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a2e      	ldr	r2, [pc, #184]	; (8005b9c <TIM_OC1_SetConfig+0xe8>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4393      	bics	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2202      	movs	r2, #2
 8005afc:	4393      	bics	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <TIM_OC1_SetConfig+0xec>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_OC1_SetConfig+0x6e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <TIM_OC1_SetConfig+0xf0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_OC1_SetConfig+0x6e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <TIM_OC1_SetConfig+0xf4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10c      	bne.n	8005b3c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2208      	movs	r2, #8
 8005b26:	4393      	bics	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2204      	movs	r2, #4
 8005b38:	4393      	bics	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <TIM_OC1_SetConfig+0xec>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_OC1_SetConfig+0xa0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <TIM_OC1_SetConfig+0xf0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC1_SetConfig+0xa0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <TIM_OC1_SetConfig+0xf4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d111      	bne.n	8005b78 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <TIM_OC1_SetConfig+0xf8>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <TIM_OC1_SetConfig+0xfc>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b006      	add	sp, #24
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	fffeff8f 	.word	0xfffeff8f
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40014400 	.word	0x40014400
 8005ba8:	40014800 	.word	0x40014800
 8005bac:	fffffeff 	.word	0xfffffeff
 8005bb0:	fffffdff 	.word	0xfffffdff

08005bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	001a      	movs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a2c      	ldr	r2, [pc, #176]	; (8005c94 <TIM_OC2_SetConfig+0xe0>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a2b      	ldr	r2, [pc, #172]	; (8005c98 <TIM_OC2_SetConfig+0xe4>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	4393      	bics	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <TIM_OC2_SetConfig+0xe8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10d      	bne.n	8005c32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	4393      	bics	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2240      	movs	r2, #64	; 0x40
 8005c2e:	4393      	bics	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a19      	ldr	r2, [pc, #100]	; (8005c9c <TIM_OC2_SetConfig+0xe8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d007      	beq.n	8005c4a <TIM_OC2_SetConfig+0x96>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <TIM_OC2_SetConfig+0xec>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_OC2_SetConfig+0x96>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <TIM_OC2_SetConfig+0xf0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d113      	bne.n	8005c72 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <TIM_OC2_SetConfig+0xf4>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4a15      	ldr	r2, [pc, #84]	; (8005cac <TIM_OC2_SetConfig+0xf8>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	46c0      	nop			; (mov r8, r8)
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b006      	add	sp, #24
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	feff8fff 	.word	0xfeff8fff
 8005c98:	fffffcff 	.word	0xfffffcff
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800
 8005ca8:	fffffbff 	.word	0xfffffbff
 8005cac:	fffff7ff 	.word	0xfffff7ff

08005cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	4a33      	ldr	r2, [pc, #204]	; (8005d8c <TIM_OC3_SetConfig+0xdc>)
 8005cc0:	401a      	ands	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4a2d      	ldr	r2, [pc, #180]	; (8005d90 <TIM_OC3_SetConfig+0xe0>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	4393      	bics	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <TIM_OC3_SetConfig+0xe4>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <TIM_OC3_SetConfig+0xe8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d10d      	bne.n	8005d2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4a22      	ldr	r2, [pc, #136]	; (8005d9c <TIM_OC3_SetConfig+0xec>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <TIM_OC3_SetConfig+0xf0>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <TIM_OC3_SetConfig+0xe8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_OC3_SetConfig+0x92>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <TIM_OC3_SetConfig+0xf4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC3_SetConfig+0x92>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1a      	ldr	r2, [pc, #104]	; (8005da8 <TIM_OC3_SetConfig+0xf8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d113      	bne.n	8005d6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4a19      	ldr	r2, [pc, #100]	; (8005dac <TIM_OC3_SetConfig+0xfc>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <TIM_OC3_SetConfig+0x100>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b006      	add	sp, #24
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	fffffeff 	.word	0xfffffeff
 8005d90:	fffeff8f 	.word	0xfffeff8f
 8005d94:	fffffdff 	.word	0xfffffdff
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	fffff7ff 	.word	0xfffff7ff
 8005da0:	fffffbff 	.word	0xfffffbff
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800
 8005dac:	ffffefff 	.word	0xffffefff
 8005db0:	ffffdfff 	.word	0xffffdfff

08005db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <TIM_OC4_SetConfig+0xa8>)
 8005dc4:	401a      	ands	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <TIM_OC4_SetConfig+0xac>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a1f      	ldr	r2, [pc, #124]	; (8005e64 <TIM_OC4_SetConfig+0xb0>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <TIM_OC4_SetConfig+0xb4>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <TIM_OC4_SetConfig+0xb8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <TIM_OC4_SetConfig+0x70>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <TIM_OC4_SetConfig+0xbc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_OC4_SetConfig+0x70>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <TIM_OC4_SetConfig+0xc0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d109      	bne.n	8005e38 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <TIM_OC4_SetConfig+0xc4>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	019b      	lsls	r3, r3, #6
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b006      	add	sp, #24
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	ffffefff 	.word	0xffffefff
 8005e60:	feff8fff 	.word	0xfeff8fff
 8005e64:	fffffcff 	.word	0xfffffcff
 8005e68:	ffffdfff 	.word	0xffffdfff
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800
 8005e78:	ffffbfff 	.word	0xffffbfff

08005e7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <TIM_OC5_SetConfig+0x9c>)
 8005e8c:	401a      	ands	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a1d      	ldr	r2, [pc, #116]	; (8005f1c <TIM_OC5_SetConfig+0xa0>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4a19      	ldr	r2, [pc, #100]	; (8005f20 <TIM_OC5_SetConfig+0xa4>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <TIM_OC5_SetConfig+0xa8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x66>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a14      	ldr	r2, [pc, #80]	; (8005f28 <TIM_OC5_SetConfig+0xac>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x66>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <TIM_OC5_SetConfig+0xb0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d109      	bne.n	8005ef6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	4a0c      	ldr	r2, [pc, #48]	; (8005f18 <TIM_OC5_SetConfig+0x9c>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	621a      	str	r2, [r3, #32]
}
 8005f10:	46c0      	nop			; (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b006      	add	sp, #24
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	fffeffff 	.word	0xfffeffff
 8005f1c:	fffeff8f 	.word	0xfffeff8f
 8005f20:	fffdffff 	.word	0xfffdffff
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	4a24      	ldr	r2, [pc, #144]	; (8005fd0 <TIM_OC6_SetConfig+0xa0>)
 8005f40:	401a      	ands	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <TIM_OC6_SetConfig+0xa4>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <TIM_OC6_SetConfig+0xa8>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	051b      	lsls	r3, r3, #20
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <TIM_OC6_SetConfig+0xac>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_OC6_SetConfig+0x68>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <TIM_OC6_SetConfig+0xb0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_OC6_SetConfig+0x68>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <TIM_OC6_SetConfig+0xb4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d109      	bne.n	8005fac <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <TIM_OC6_SetConfig+0xb8>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	029b      	lsls	r3, r3, #10
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b006      	add	sp, #24
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	ffefffff 	.word	0xffefffff
 8005fd4:	feff8fff 	.word	0xfeff8fff
 8005fd8:	ffdfffff 	.word	0xffdfffff
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800
 8005fe8:	fffbffff 	.word	0xfffbffff

08005fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	2201      	movs	r2, #1
 8006004:	4393      	bics	r3, r2
 8006006:	001a      	movs	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	22f0      	movs	r2, #240	; 0xf0
 8006016:	4393      	bics	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	220a      	movs	r2, #10
 8006028:	4393      	bics	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	46c0      	nop			; (mov r8, r8)
 8006042:	46bd      	mov	sp, r7
 8006044:	b006      	add	sp, #24
 8006046:	bd80      	pop	{r7, pc}

08006048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	2210      	movs	r2, #16
 800605a:	4393      	bics	r3, r2
 800605c:	001a      	movs	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <TIM_TI2_ConfigInputStage+0x60>)
 8006072:	4013      	ands	r3, r2
 8006074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	031b      	lsls	r3, r3, #12
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	22a0      	movs	r2, #160	; 0xa0
 8006084:	4393      	bics	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b006      	add	sp, #24
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	ffff0fff 	.word	0xffff0fff

080060ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <TIM_ITRx_SetConfig+0x34>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	2207      	movs	r2, #7
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	609a      	str	r2, [r3, #8]
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	46bd      	mov	sp, r7
 80060da:	b004      	add	sp, #16
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	ffcfff8f 	.word	0xffcfff8f

080060e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4a09      	ldr	r2, [pc, #36]	; (8006120 <TIM_ETR_SetConfig+0x3c>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	021a      	lsls	r2, r3, #8
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	431a      	orrs	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4313      	orrs	r3, r2
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	46c0      	nop			; (mov r8, r8)
 800611a:	46bd      	mov	sp, r7
 800611c:	b006      	add	sp, #24
 800611e:	bd80      	pop	{r7, pc}
 8006120:	ffff00ff 	.word	0xffff00ff

08006124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	221f      	movs	r2, #31
 8006134:	4013      	ands	r3, r2
 8006136:	2201      	movs	r2, #1
 8006138:	409a      	lsls	r2, r3
 800613a:	0013      	movs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	43d2      	mvns	r2, r2
 8006146:	401a      	ands	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	211f      	movs	r1, #31
 8006154:	400b      	ands	r3, r1
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4099      	lsls	r1, r3
 800615a:	000b      	movs	r3, r1
 800615c:	431a      	orrs	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	46bd      	mov	sp, r7
 8006166:	b006      	add	sp, #24
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	223c      	movs	r2, #60	; 0x3c
 800617a:	5c9b      	ldrb	r3, [r3, r2]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006180:	2302      	movs	r3, #2
 8006182:	e050      	b.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	223c      	movs	r2, #60	; 0x3c
 8006188:	2101      	movs	r1, #1
 800618a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	223d      	movs	r2, #61	; 0x3d
 8006190:	2102      	movs	r1, #2
 8006192:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a21      	ldr	r2, [pc, #132]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a20      	ldr	r2, [pc, #128]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2270      	movs	r2, #112	; 0x70
 80061c4:	4393      	bics	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a14      	ldr	r2, [pc, #80]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00a      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	05db      	lsls	r3, r3, #23
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d004      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a10      	ldr	r2, [pc, #64]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d10c      	bne.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2280      	movs	r2, #128	; 0x80
 80061fe:	4393      	bics	r3, r2
 8006200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4313      	orrs	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	223d      	movs	r2, #61	; 0x3d
 8006218:	2101      	movs	r1, #1
 800621a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	223c      	movs	r2, #60	; 0x3c
 8006220:	2100      	movs	r1, #0
 8006222:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bd80      	pop	{r7, pc}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	40012c00 	.word	0x40012c00
 8006234:	ff0fffff 	.word	0xff0fffff
 8006238:	40000400 	.word	0x40000400

0800623c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	223c      	movs	r2, #60	; 0x3c
 800624e:	5c9b      	ldrb	r3, [r3, r2]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006254:	2302      	movs	r3, #2
 8006256:	e079      	b.n	800634c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	223c      	movs	r2, #60	; 0x3c
 800625c:	2101      	movs	r1, #1
 800625e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	22ff      	movs	r2, #255	; 0xff
 8006264:	4393      	bics	r3, r2
 8006266:	001a      	movs	r2, r3
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a38      	ldr	r2, [pc, #224]	; (8006354 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006274:	401a      	ands	r2, r3
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4a35      	ldr	r2, [pc, #212]	; (8006358 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006282:	401a      	ands	r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4a33      	ldr	r2, [pc, #204]	; (800635c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006290:	401a      	ands	r2, r3
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a30      	ldr	r2, [pc, #192]	; (8006360 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800629e:	401a      	ands	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a2e      	ldr	r2, [pc, #184]	; (8006364 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80062ac:	401a      	ands	r2, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a2b      	ldr	r2, [pc, #172]	; (8006368 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80062ba:	401a      	ands	r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4a29      	ldr	r2, [pc, #164]	; (800636c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80062c8:	401a      	ands	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a25      	ldr	r2, [pc, #148]	; (8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d106      	bne.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4a24      	ldr	r2, [pc, #144]	; (8006374 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80062e2:	401a      	ands	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d121      	bne.n	800633a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a1f      	ldr	r2, [pc, #124]	; (8006378 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80062fa:	401a      	ands	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006300:	051b      	lsls	r3, r3, #20
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800630a:	401a      	ands	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a1a      	ldr	r2, [pc, #104]	; (8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006318:	401a      	ands	r2, r3
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a12      	ldr	r2, [pc, #72]	; (8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d106      	bne.n	800633a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006330:	401a      	ands	r2, r3
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	223c      	movs	r2, #60	; 0x3c
 8006346:	2100      	movs	r1, #0
 8006348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	0018      	movs	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	b004      	add	sp, #16
 8006352:	bd80      	pop	{r7, pc}
 8006354:	fffffcff 	.word	0xfffffcff
 8006358:	fffffbff 	.word	0xfffffbff
 800635c:	fffff7ff 	.word	0xfffff7ff
 8006360:	ffffefff 	.word	0xffffefff
 8006364:	ffffdfff 	.word	0xffffdfff
 8006368:	ffffbfff 	.word	0xffffbfff
 800636c:	fff0ffff 	.word	0xfff0ffff
 8006370:	40012c00 	.word	0x40012c00
 8006374:	efffffff 	.word	0xefffffff
 8006378:	ff0fffff 	.word	0xff0fffff
 800637c:	feffffff 	.word	0xfeffffff
 8006380:	fdffffff 	.word	0xfdffffff
 8006384:	dfffffff 	.word	0xdfffffff

08006388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e046      	b.n	8006428 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2288      	movs	r2, #136	; 0x88
 800639e:	589b      	ldr	r3, [r3, r2]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d107      	bne.n	80063b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2284      	movs	r2, #132	; 0x84
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7fc fba8 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2288      	movs	r2, #136	; 0x88
 80063b8:	2124      	movs	r1, #36	; 0x24
 80063ba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2101      	movs	r1, #1
 80063c8:	438a      	bics	r2, r1
 80063ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	0018      	movs	r0, r3
 80063d0:	f000 fb72 	bl	8006ab8 <UART_SetConfig>
 80063d4:	0003      	movs	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e024      	b.n	8006428 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 fddd 	bl	8006fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	490d      	ldr	r1, [pc, #52]	; (8006430 <HAL_UART_Init+0xa8>)
 80063fa:	400a      	ands	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	212a      	movs	r1, #42	; 0x2a
 800640a:	438a      	bics	r2, r1
 800640c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2101      	movs	r1, #1
 800641a:	430a      	orrs	r2, r1
 800641c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	0018      	movs	r0, r3
 8006422:	f000 fe75 	bl	8007110 <UART_CheckIdleState>
 8006426:	0003      	movs	r3, r0
}
 8006428:	0018      	movs	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	b002      	add	sp, #8
 800642e:	bd80      	pop	{r7, pc}
 8006430:	ffffb7ff 	.word	0xffffb7ff

08006434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006434:	b5b0      	push	{r4, r5, r7, lr}
 8006436:	b0aa      	sub	sp, #168	; 0xa8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	22a4      	movs	r2, #164	; 0xa4
 8006444:	18b9      	adds	r1, r7, r2
 8006446:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	20a0      	movs	r0, #160	; 0xa0
 8006450:	1839      	adds	r1, r7, r0
 8006452:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	249c      	movs	r4, #156	; 0x9c
 800645c:	1939      	adds	r1, r7, r4
 800645e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006460:	0011      	movs	r1, r2
 8006462:	18bb      	adds	r3, r7, r2
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4aa2      	ldr	r2, [pc, #648]	; (80066f0 <HAL_UART_IRQHandler+0x2bc>)
 8006468:	4013      	ands	r3, r2
 800646a:	2298      	movs	r2, #152	; 0x98
 800646c:	18bd      	adds	r5, r7, r2
 800646e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006470:	18bb      	adds	r3, r7, r2
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11a      	bne.n	80064ae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006478:	187b      	adds	r3, r7, r1
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2220      	movs	r2, #32
 800647e:	4013      	ands	r3, r2
 8006480:	d015      	beq.n	80064ae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006482:	183b      	adds	r3, r7, r0
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2220      	movs	r2, #32
 8006488:	4013      	ands	r3, r2
 800648a:	d105      	bne.n	8006498 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800648c:	193b      	adds	r3, r7, r4
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	055b      	lsls	r3, r3, #21
 8006494:	4013      	ands	r3, r2
 8006496:	d00a      	beq.n	80064ae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649c:	2b00      	cmp	r3, #0
 800649e:	d100      	bne.n	80064a2 <HAL_UART_IRQHandler+0x6e>
 80064a0:	e2dc      	b.n	8006a5c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	0010      	movs	r0, r2
 80064aa:	4798      	blx	r3
      }
      return;
 80064ac:	e2d6      	b.n	8006a5c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064ae:	2398      	movs	r3, #152	; 0x98
 80064b0:	18fb      	adds	r3, r7, r3
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d100      	bne.n	80064ba <HAL_UART_IRQHandler+0x86>
 80064b8:	e122      	b.n	8006700 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064ba:	239c      	movs	r3, #156	; 0x9c
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a8c      	ldr	r2, [pc, #560]	; (80066f4 <HAL_UART_IRQHandler+0x2c0>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	d106      	bne.n	80064d4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064c6:	23a0      	movs	r3, #160	; 0xa0
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a8a      	ldr	r2, [pc, #552]	; (80066f8 <HAL_UART_IRQHandler+0x2c4>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	d100      	bne.n	80064d4 <HAL_UART_IRQHandler+0xa0>
 80064d2:	e115      	b.n	8006700 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064d4:	23a4      	movs	r3, #164	; 0xa4
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2201      	movs	r2, #1
 80064dc:	4013      	ands	r3, r2
 80064de:	d012      	beq.n	8006506 <HAL_UART_IRQHandler+0xd2>
 80064e0:	23a0      	movs	r3, #160	; 0xa0
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	2380      	movs	r3, #128	; 0x80
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	4013      	ands	r3, r2
 80064ec:	d00b      	beq.n	8006506 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2201      	movs	r2, #1
 80064f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2290      	movs	r2, #144	; 0x90
 80064fa:	589b      	ldr	r3, [r3, r2]
 80064fc:	2201      	movs	r2, #1
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2190      	movs	r1, #144	; 0x90
 8006504:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006506:	23a4      	movs	r3, #164	; 0xa4
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2202      	movs	r2, #2
 800650e:	4013      	ands	r3, r2
 8006510:	d011      	beq.n	8006536 <HAL_UART_IRQHandler+0x102>
 8006512:	239c      	movs	r3, #156	; 0x9c
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2201      	movs	r2, #1
 800651a:	4013      	ands	r3, r2
 800651c:	d00b      	beq.n	8006536 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2202      	movs	r2, #2
 8006524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2290      	movs	r2, #144	; 0x90
 800652a:	589b      	ldr	r3, [r3, r2]
 800652c:	2204      	movs	r2, #4
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2190      	movs	r1, #144	; 0x90
 8006534:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006536:	23a4      	movs	r3, #164	; 0xa4
 8006538:	18fb      	adds	r3, r7, r3
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2204      	movs	r2, #4
 800653e:	4013      	ands	r3, r2
 8006540:	d011      	beq.n	8006566 <HAL_UART_IRQHandler+0x132>
 8006542:	239c      	movs	r3, #156	; 0x9c
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2201      	movs	r2, #1
 800654a:	4013      	ands	r3, r2
 800654c:	d00b      	beq.n	8006566 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2204      	movs	r2, #4
 8006554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2290      	movs	r2, #144	; 0x90
 800655a:	589b      	ldr	r3, [r3, r2]
 800655c:	2202      	movs	r2, #2
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2190      	movs	r1, #144	; 0x90
 8006564:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006566:	23a4      	movs	r3, #164	; 0xa4
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2208      	movs	r2, #8
 800656e:	4013      	ands	r3, r2
 8006570:	d017      	beq.n	80065a2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006572:	23a0      	movs	r3, #160	; 0xa0
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2220      	movs	r2, #32
 800657a:	4013      	ands	r3, r2
 800657c:	d105      	bne.n	800658a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800657e:	239c      	movs	r3, #156	; 0x9c
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a5b      	ldr	r2, [pc, #364]	; (80066f4 <HAL_UART_IRQHandler+0x2c0>)
 8006586:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006588:	d00b      	beq.n	80065a2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2208      	movs	r2, #8
 8006590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2290      	movs	r2, #144	; 0x90
 8006596:	589b      	ldr	r3, [r3, r2]
 8006598:	2208      	movs	r2, #8
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2190      	movs	r1, #144	; 0x90
 80065a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065a2:	23a4      	movs	r3, #164	; 0xa4
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	4013      	ands	r3, r2
 80065ae:	d013      	beq.n	80065d8 <HAL_UART_IRQHandler+0x1a4>
 80065b0:	23a0      	movs	r3, #160	; 0xa0
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	04db      	lsls	r3, r3, #19
 80065ba:	4013      	ands	r3, r2
 80065bc:	d00c      	beq.n	80065d8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2280      	movs	r2, #128	; 0x80
 80065c4:	0112      	lsls	r2, r2, #4
 80065c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2290      	movs	r2, #144	; 0x90
 80065cc:	589b      	ldr	r3, [r3, r2]
 80065ce:	2220      	movs	r2, #32
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2190      	movs	r1, #144	; 0x90
 80065d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2290      	movs	r2, #144	; 0x90
 80065dc:	589b      	ldr	r3, [r3, r2]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d100      	bne.n	80065e4 <HAL_UART_IRQHandler+0x1b0>
 80065e2:	e23d      	b.n	8006a60 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065e4:	23a4      	movs	r3, #164	; 0xa4
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2220      	movs	r2, #32
 80065ec:	4013      	ands	r3, r2
 80065ee:	d015      	beq.n	800661c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065f0:	23a0      	movs	r3, #160	; 0xa0
 80065f2:	18fb      	adds	r3, r7, r3
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2220      	movs	r2, #32
 80065f8:	4013      	ands	r3, r2
 80065fa:	d106      	bne.n	800660a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065fc:	239c      	movs	r3, #156	; 0x9c
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	2380      	movs	r3, #128	; 0x80
 8006604:	055b      	lsls	r3, r3, #21
 8006606:	4013      	ands	r3, r2
 8006608:	d008      	beq.n	800661c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	0010      	movs	r0, r2
 800661a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2290      	movs	r2, #144	; 0x90
 8006620:	589b      	ldr	r3, [r3, r2]
 8006622:	2194      	movs	r1, #148	; 0x94
 8006624:	187a      	adds	r2, r7, r1
 8006626:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2240      	movs	r2, #64	; 0x40
 8006630:	4013      	ands	r3, r2
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	d004      	beq.n	8006640 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006636:	187b      	adds	r3, r7, r1
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2228      	movs	r2, #40	; 0x28
 800663c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800663e:	d04c      	beq.n	80066da <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	0018      	movs	r0, r3
 8006644:	f000 fe7a 	bl	800733c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2240      	movs	r2, #64	; 0x40
 8006650:	4013      	ands	r3, r2
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d13c      	bne.n	80066d0 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006656:	f3ef 8310 	mrs	r3, PRIMASK
 800665a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800665c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665e:	2090      	movs	r0, #144	; 0x90
 8006660:	183a      	adds	r2, r7, r0
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	2301      	movs	r3, #1
 8006666:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800666a:	f383 8810 	msr	PRIMASK, r3
}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2140      	movs	r1, #64	; 0x40
 800667c:	438a      	bics	r2, r1
 800667e:	609a      	str	r2, [r3, #8]
 8006680:	183b      	adds	r3, r7, r0
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006688:	f383 8810 	msr	PRIMASK, r3
}
 800668c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2280      	movs	r2, #128	; 0x80
 8006692:	589b      	ldr	r3, [r3, r2]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d016      	beq.n	80066c6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	589b      	ldr	r3, [r3, r2]
 800669e:	4a17      	ldr	r2, [pc, #92]	; (80066fc <HAL_UART_IRQHandler+0x2c8>)
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2280      	movs	r2, #128	; 0x80
 80066a6:	589b      	ldr	r3, [r3, r2]
 80066a8:	0018      	movs	r0, r3
 80066aa:	f7fd fc4f 	bl	8003f4c <HAL_DMA_Abort_IT>
 80066ae:	1e03      	subs	r3, r0, #0
 80066b0:	d01c      	beq.n	80066ec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2280      	movs	r2, #128	; 0x80
 80066b6:	589b      	ldr	r3, [r3, r2]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	2180      	movs	r1, #128	; 0x80
 80066be:	5852      	ldr	r2, [r2, r1]
 80066c0:	0010      	movs	r0, r2
 80066c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	e012      	b.n	80066ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 f9e1 	bl	8006a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ce:	e00d      	b.n	80066ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	0018      	movs	r0, r3
 80066d4:	f000 f9dc 	bl	8006a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d8:	e008      	b.n	80066ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	0018      	movs	r0, r3
 80066de:	f000 f9d7 	bl	8006a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2290      	movs	r2, #144	; 0x90
 80066e6:	2100      	movs	r1, #0
 80066e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80066ea:	e1b9      	b.n	8006a60 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	46c0      	nop			; (mov r8, r8)
    return;
 80066ee:	e1b7      	b.n	8006a60 <HAL_UART_IRQHandler+0x62c>
 80066f0:	0000080f 	.word	0x0000080f
 80066f4:	10000001 	.word	0x10000001
 80066f8:	04000120 	.word	0x04000120
 80066fc:	08007409 	.word	0x08007409

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d000      	beq.n	800670a <HAL_UART_IRQHandler+0x2d6>
 8006708:	e13e      	b.n	8006988 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800670a:	23a4      	movs	r3, #164	; 0xa4
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2210      	movs	r2, #16
 8006712:	4013      	ands	r3, r2
 8006714:	d100      	bne.n	8006718 <HAL_UART_IRQHandler+0x2e4>
 8006716:	e137      	b.n	8006988 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006718:	23a0      	movs	r3, #160	; 0xa0
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2210      	movs	r2, #16
 8006720:	4013      	ands	r3, r2
 8006722:	d100      	bne.n	8006726 <HAL_UART_IRQHandler+0x2f2>
 8006724:	e130      	b.n	8006988 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2210      	movs	r2, #16
 800672c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2240      	movs	r2, #64	; 0x40
 8006736:	4013      	ands	r3, r2
 8006738:	2b40      	cmp	r3, #64	; 0x40
 800673a:	d000      	beq.n	800673e <HAL_UART_IRQHandler+0x30a>
 800673c:	e0a4      	b.n	8006888 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2280      	movs	r2, #128	; 0x80
 8006742:	589b      	ldr	r3, [r3, r2]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	217e      	movs	r1, #126	; 0x7e
 800674a:	187b      	adds	r3, r7, r1
 800674c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800674e:	187b      	adds	r3, r7, r1
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d100      	bne.n	8006758 <HAL_UART_IRQHandler+0x324>
 8006756:	e185      	b.n	8006a64 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	225c      	movs	r2, #92	; 0x5c
 800675c:	5a9b      	ldrh	r3, [r3, r2]
 800675e:	187a      	adds	r2, r7, r1
 8006760:	8812      	ldrh	r2, [r2, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d300      	bcc.n	8006768 <HAL_UART_IRQHandler+0x334>
 8006766:	e17d      	b.n	8006a64 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	187a      	adds	r2, r7, r1
 800676c:	215e      	movs	r1, #94	; 0x5e
 800676e:	8812      	ldrh	r2, [r2, #0]
 8006770:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2280      	movs	r2, #128	; 0x80
 8006776:	589b      	ldr	r3, [r3, r2]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2220      	movs	r2, #32
 800677e:	4013      	ands	r3, r2
 8006780:	d170      	bne.n	8006864 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006782:	f3ef 8310 	mrs	r3, PRIMASK
 8006786:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800678a:	67bb      	str	r3, [r7, #120]	; 0x78
 800678c:	2301      	movs	r3, #1
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	f383 8810 	msr	PRIMASK, r3
}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	49b4      	ldr	r1, [pc, #720]	; (8006a74 <HAL_UART_IRQHandler+0x640>)
 80067a4:	400a      	ands	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	f383 8810 	msr	PRIMASK, r3
}
 80067b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b4:	f3ef 8310 	mrs	r3, PRIMASK
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80067ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067bc:	677b      	str	r3, [r7, #116]	; 0x74
 80067be:	2301      	movs	r3, #1
 80067c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c4:	f383 8810 	msr	PRIMASK, r3
}
 80067c8:	46c0      	nop			; (mov r8, r8)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2101      	movs	r1, #1
 80067d6:	438a      	bics	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
 80067da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e0:	f383 8810 	msr	PRIMASK, r3
}
 80067e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e6:	f3ef 8310 	mrs	r3, PRIMASK
 80067ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80067ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ee:	673b      	str	r3, [r7, #112]	; 0x70
 80067f0:	2301      	movs	r3, #1
 80067f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f6:	f383 8810 	msr	PRIMASK, r3
}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2140      	movs	r1, #64	; 0x40
 8006808:	438a      	bics	r2, r1
 800680a:	609a      	str	r2, [r3, #8]
 800680c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800680e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006812:	f383 8810 	msr	PRIMASK, r3
}
 8006816:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	228c      	movs	r2, #140	; 0x8c
 800681c:	2120      	movs	r1, #32
 800681e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006826:	f3ef 8310 	mrs	r3, PRIMASK
 800682a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800682c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006830:	2301      	movs	r3, #1
 8006832:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006836:	f383 8810 	msr	PRIMASK, r3
}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2110      	movs	r1, #16
 8006848:	438a      	bics	r2, r1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006852:	f383 8810 	msr	PRIMASK, r3
}
 8006856:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2280      	movs	r2, #128	; 0x80
 800685c:	589b      	ldr	r3, [r3, r2]
 800685e:	0018      	movs	r0, r3
 8006860:	f7fd fb12 	bl	8003e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	225c      	movs	r2, #92	; 0x5c
 800686e:	5a9a      	ldrh	r2, [r3, r2]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	215e      	movs	r1, #94	; 0x5e
 8006874:	5a5b      	ldrh	r3, [r3, r1]
 8006876:	b29b      	uxth	r3, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	b29a      	uxth	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	0011      	movs	r1, r2
 8006880:	0018      	movs	r0, r3
 8006882:	f000 f90d 	bl	8006aa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006886:	e0ed      	b.n	8006a64 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	225c      	movs	r2, #92	; 0x5c
 800688c:	5a99      	ldrh	r1, [r3, r2]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	225e      	movs	r2, #94	; 0x5e
 8006892:	5a9b      	ldrh	r3, [r3, r2]
 8006894:	b29a      	uxth	r2, r3
 8006896:	208e      	movs	r0, #142	; 0x8e
 8006898:	183b      	adds	r3, r7, r0
 800689a:	1a8a      	subs	r2, r1, r2
 800689c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	225e      	movs	r2, #94	; 0x5e
 80068a2:	5a9b      	ldrh	r3, [r3, r2]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d100      	bne.n	80068ac <HAL_UART_IRQHandler+0x478>
 80068aa:	e0dd      	b.n	8006a68 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80068ac:	183b      	adds	r3, r7, r0
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d100      	bne.n	80068b6 <HAL_UART_IRQHandler+0x482>
 80068b4:	e0d8      	b.n	8006a68 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80068bc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068be:	2488      	movs	r4, #136	; 0x88
 80068c0:	193a      	adds	r2, r7, r4
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	2301      	movs	r3, #1
 80068c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f383 8810 	msr	PRIMASK, r3
}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4967      	ldr	r1, [pc, #412]	; (8006a78 <HAL_UART_IRQHandler+0x644>)
 80068dc:	400a      	ands	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	193b      	adds	r3, r7, r4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f383 8810 	msr	PRIMASK, r3
}
 80068ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ee:	f3ef 8310 	mrs	r3, PRIMASK
 80068f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80068f4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068f6:	2484      	movs	r4, #132	; 0x84
 80068f8:	193a      	adds	r2, r7, r4
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	2301      	movs	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f383 8810 	msr	PRIMASK, r3
}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	495a      	ldr	r1, [pc, #360]	; (8006a7c <HAL_UART_IRQHandler+0x648>)
 8006914:	400a      	ands	r2, r1
 8006916:	609a      	str	r2, [r3, #8]
 8006918:	193b      	adds	r3, r7, r4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	f383 8810 	msr	PRIMASK, r3
}
 8006924:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	228c      	movs	r2, #140	; 0x8c
 800692a:	2120      	movs	r1, #32
 800692c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800693a:	f3ef 8310 	mrs	r3, PRIMASK
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006942:	2480      	movs	r4, #128	; 0x80
 8006944:	193a      	adds	r2, r7, r4
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	2301      	movs	r3, #1
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	f383 8810 	msr	PRIMASK, r3
}
 8006952:	46c0      	nop			; (mov r8, r8)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2110      	movs	r1, #16
 8006960:	438a      	bics	r2, r1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	193b      	adds	r3, r7, r4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	f383 8810 	msr	PRIMASK, r3
}
 8006970:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006978:	183b      	adds	r3, r7, r0
 800697a:	881a      	ldrh	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	0011      	movs	r1, r2
 8006980:	0018      	movs	r0, r3
 8006982:	f000 f88d 	bl	8006aa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006986:	e06f      	b.n	8006a68 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006988:	23a4      	movs	r3, #164	; 0xa4
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	2380      	movs	r3, #128	; 0x80
 8006990:	035b      	lsls	r3, r3, #13
 8006992:	4013      	ands	r3, r2
 8006994:	d010      	beq.n	80069b8 <HAL_UART_IRQHandler+0x584>
 8006996:	239c      	movs	r3, #156	; 0x9c
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	2380      	movs	r3, #128	; 0x80
 800699e:	03db      	lsls	r3, r3, #15
 80069a0:	4013      	ands	r3, r2
 80069a2:	d009      	beq.n	80069b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2280      	movs	r2, #128	; 0x80
 80069aa:	0352      	lsls	r2, r2, #13
 80069ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f000 fddf 	bl	8007574 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069b6:	e05a      	b.n	8006a6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069b8:	23a4      	movs	r3, #164	; 0xa4
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2280      	movs	r2, #128	; 0x80
 80069c0:	4013      	ands	r3, r2
 80069c2:	d016      	beq.n	80069f2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069c4:	23a0      	movs	r3, #160	; 0xa0
 80069c6:	18fb      	adds	r3, r7, r3
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2280      	movs	r2, #128	; 0x80
 80069cc:	4013      	ands	r3, r2
 80069ce:	d106      	bne.n	80069de <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069d0:	239c      	movs	r3, #156	; 0x9c
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	4013      	ands	r3, r2
 80069dc:	d009      	beq.n	80069f2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d042      	beq.n	8006a6c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	0010      	movs	r0, r2
 80069ee:	4798      	blx	r3
    }
    return;
 80069f0:	e03c      	b.n	8006a6c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069f2:	23a4      	movs	r3, #164	; 0xa4
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2240      	movs	r2, #64	; 0x40
 80069fa:	4013      	ands	r3, r2
 80069fc:	d00a      	beq.n	8006a14 <HAL_UART_IRQHandler+0x5e0>
 80069fe:	23a0      	movs	r3, #160	; 0xa0
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2240      	movs	r2, #64	; 0x40
 8006a06:	4013      	ands	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f000 fd12 	bl	8007436 <UART_EndTransmit_IT>
    return;
 8006a12:	e02c      	b.n	8006a6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a14:	23a4      	movs	r3, #164	; 0xa4
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	2380      	movs	r3, #128	; 0x80
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <HAL_UART_IRQHandler+0x606>
 8006a22:	23a0      	movs	r3, #160	; 0xa0
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	05db      	lsls	r3, r3, #23
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d004      	beq.n	8006a3a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 fdae 	bl	8007594 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a38:	e019      	b.n	8006a6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a3a:	23a4      	movs	r3, #164	; 0xa4
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	045b      	lsls	r3, r3, #17
 8006a44:	4013      	ands	r3, r2
 8006a46:	d012      	beq.n	8006a6e <HAL_UART_IRQHandler+0x63a>
 8006a48:	23a0      	movs	r3, #160	; 0xa0
 8006a4a:	18fb      	adds	r3, r7, r3
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da0d      	bge.n	8006a6e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	0018      	movs	r0, r3
 8006a56:	f000 fd95 	bl	8007584 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a5a:	e008      	b.n	8006a6e <HAL_UART_IRQHandler+0x63a>
      return;
 8006a5c:	46c0      	nop			; (mov r8, r8)
 8006a5e:	e006      	b.n	8006a6e <HAL_UART_IRQHandler+0x63a>
    return;
 8006a60:	46c0      	nop			; (mov r8, r8)
 8006a62:	e004      	b.n	8006a6e <HAL_UART_IRQHandler+0x63a>
      return;
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	e002      	b.n	8006a6e <HAL_UART_IRQHandler+0x63a>
      return;
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	e000      	b.n	8006a6e <HAL_UART_IRQHandler+0x63a>
    return;
 8006a6c:	46c0      	nop			; (mov r8, r8)
  }
}
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b02a      	add	sp, #168	; 0xa8
 8006a72:	bdb0      	pop	{r4, r5, r7, pc}
 8006a74:	fffffeff 	.word	0xfffffeff
 8006a78:	fffffedf 	.word	0xfffffedf
 8006a7c:	effffffe 	.word	0xeffffffe

08006a80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a88:	46c0      	nop			; (mov r8, r8)
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b002      	add	sp, #8
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a98:	46c0      	nop			; (mov r8, r8)
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b002      	add	sp, #8
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	000a      	movs	r2, r1
 8006aaa:	1cbb      	adds	r3, r7, #2
 8006aac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	b002      	add	sp, #8
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab8:	b5b0      	push	{r4, r5, r7, lr}
 8006aba:	b090      	sub	sp, #64	; 0x40
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ac0:	231a      	movs	r3, #26
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	189b      	adds	r3, r3, r2
 8006ac6:	19db      	adds	r3, r3, r7
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4ac4      	ldr	r2, [pc, #784]	; (8006dfc <UART_SetConfig+0x344>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	0019      	movs	r1, r3
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af6:	430b      	orrs	r3, r1
 8006af8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4abf      	ldr	r2, [pc, #764]	; (8006e00 <UART_SetConfig+0x348>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	0018      	movs	r0, r3
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	68d9      	ldr	r1, [r3, #12]
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	0003      	movs	r3, r0
 8006b10:	430b      	orrs	r3, r1
 8006b12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4ab9      	ldr	r2, [pc, #740]	; (8006e04 <UART_SetConfig+0x34c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	4ab4      	ldr	r2, [pc, #720]	; (8006e08 <UART_SetConfig+0x350>)
 8006b36:	4013      	ands	r3, r2
 8006b38:	0019      	movs	r1, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	220f      	movs	r2, #15
 8006b4c:	4393      	bics	r3, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	0003      	movs	r3, r0
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4aaa      	ldr	r2, [pc, #680]	; (8006e0c <UART_SetConfig+0x354>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d131      	bne.n	8006bcc <UART_SetConfig+0x114>
 8006b68:	4ba9      	ldr	r3, [pc, #676]	; (8006e10 <UART_SetConfig+0x358>)
 8006b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d01d      	beq.n	8006bb0 <UART_SetConfig+0xf8>
 8006b74:	d823      	bhi.n	8006bbe <UART_SetConfig+0x106>
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d00c      	beq.n	8006b94 <UART_SetConfig+0xdc>
 8006b7a:	d820      	bhi.n	8006bbe <UART_SetConfig+0x106>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <UART_SetConfig+0xce>
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d00e      	beq.n	8006ba2 <UART_SetConfig+0xea>
 8006b84:	e01b      	b.n	8006bbe <UART_SetConfig+0x106>
 8006b86:	231b      	movs	r3, #27
 8006b88:	2220      	movs	r2, #32
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	19db      	adds	r3, r3, r7
 8006b8e:	2200      	movs	r2, #0
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e071      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006b94:	231b      	movs	r3, #27
 8006b96:	2220      	movs	r2, #32
 8006b98:	189b      	adds	r3, r3, r2
 8006b9a:	19db      	adds	r3, r3, r7
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	e06a      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006ba2:	231b      	movs	r3, #27
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	189b      	adds	r3, r3, r2
 8006ba8:	19db      	adds	r3, r3, r7
 8006baa:	2204      	movs	r2, #4
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e063      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006bb0:	231b      	movs	r3, #27
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	189b      	adds	r3, r3, r2
 8006bb6:	19db      	adds	r3, r3, r7
 8006bb8:	2208      	movs	r2, #8
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	e05c      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006bbe:	231b      	movs	r3, #27
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	19db      	adds	r3, r3, r7
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	e055      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a90      	ldr	r2, [pc, #576]	; (8006e14 <UART_SetConfig+0x35c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d106      	bne.n	8006be4 <UART_SetConfig+0x12c>
 8006bd6:	231b      	movs	r3, #27
 8006bd8:	2220      	movs	r2, #32
 8006bda:	189b      	adds	r3, r3, r2
 8006bdc:	19db      	adds	r3, r3, r7
 8006bde:	2200      	movs	r2, #0
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	e049      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a86      	ldr	r2, [pc, #536]	; (8006e04 <UART_SetConfig+0x34c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d13e      	bne.n	8006c6c <UART_SetConfig+0x1b4>
 8006bee:	4b88      	ldr	r3, [pc, #544]	; (8006e10 <UART_SetConfig+0x358>)
 8006bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bf2:	23c0      	movs	r3, #192	; 0xc0
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	22c0      	movs	r2, #192	; 0xc0
 8006bfa:	0112      	lsls	r2, r2, #4
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d027      	beq.n	8006c50 <UART_SetConfig+0x198>
 8006c00:	22c0      	movs	r2, #192	; 0xc0
 8006c02:	0112      	lsls	r2, r2, #4
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d82a      	bhi.n	8006c5e <UART_SetConfig+0x1a6>
 8006c08:	2280      	movs	r2, #128	; 0x80
 8006c0a:	0112      	lsls	r2, r2, #4
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d011      	beq.n	8006c34 <UART_SetConfig+0x17c>
 8006c10:	2280      	movs	r2, #128	; 0x80
 8006c12:	0112      	lsls	r2, r2, #4
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d822      	bhi.n	8006c5e <UART_SetConfig+0x1a6>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <UART_SetConfig+0x16e>
 8006c1c:	2280      	movs	r2, #128	; 0x80
 8006c1e:	00d2      	lsls	r2, r2, #3
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <UART_SetConfig+0x18a>
 8006c24:	e01b      	b.n	8006c5e <UART_SetConfig+0x1a6>
 8006c26:	231b      	movs	r3, #27
 8006c28:	2220      	movs	r2, #32
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	19db      	adds	r3, r3, r7
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e021      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006c34:	231b      	movs	r3, #27
 8006c36:	2220      	movs	r2, #32
 8006c38:	189b      	adds	r3, r3, r2
 8006c3a:	19db      	adds	r3, r3, r7
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	e01a      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006c42:	231b      	movs	r3, #27
 8006c44:	2220      	movs	r2, #32
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	19db      	adds	r3, r3, r7
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e013      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006c50:	231b      	movs	r3, #27
 8006c52:	2220      	movs	r2, #32
 8006c54:	189b      	adds	r3, r3, r2
 8006c56:	19db      	adds	r3, r3, r7
 8006c58:	2208      	movs	r2, #8
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	e00c      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006c5e:	231b      	movs	r3, #27
 8006c60:	2220      	movs	r2, #32
 8006c62:	189b      	adds	r3, r3, r2
 8006c64:	19db      	adds	r3, r3, r7
 8006c66:	2210      	movs	r2, #16
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e005      	b.n	8006c78 <UART_SetConfig+0x1c0>
 8006c6c:	231b      	movs	r3, #27
 8006c6e:	2220      	movs	r2, #32
 8006c70:	189b      	adds	r3, r3, r2
 8006c72:	19db      	adds	r3, r3, r7
 8006c74:	2210      	movs	r2, #16
 8006c76:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a61      	ldr	r2, [pc, #388]	; (8006e04 <UART_SetConfig+0x34c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d000      	beq.n	8006c84 <UART_SetConfig+0x1cc>
 8006c82:	e092      	b.n	8006daa <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c84:	231b      	movs	r3, #27
 8006c86:	2220      	movs	r2, #32
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	19db      	adds	r3, r3, r7
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d015      	beq.n	8006cbe <UART_SetConfig+0x206>
 8006c92:	dc18      	bgt.n	8006cc6 <UART_SetConfig+0x20e>
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d00d      	beq.n	8006cb4 <UART_SetConfig+0x1fc>
 8006c98:	dc15      	bgt.n	8006cc6 <UART_SetConfig+0x20e>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <UART_SetConfig+0x1ec>
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d005      	beq.n	8006cae <UART_SetConfig+0x1f6>
 8006ca2:	e010      	b.n	8006cc6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7fe f994 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cac:	e014      	b.n	8006cd8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cae:	4b5a      	ldr	r3, [pc, #360]	; (8006e18 <UART_SetConfig+0x360>)
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cb2:	e011      	b.n	8006cd8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb4:	f7fe f900 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8006cb8:	0003      	movs	r3, r0
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cbc:	e00c      	b.n	8006cd8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cbe:	2380      	movs	r3, #128	; 0x80
 8006cc0:	021b      	lsls	r3, r3, #8
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cc4:	e008      	b.n	8006cd8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006cca:	231a      	movs	r3, #26
 8006ccc:	2220      	movs	r2, #32
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	19db      	adds	r3, r3, r7
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	701a      	strb	r2, [r3, #0]
        break;
 8006cd6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d100      	bne.n	8006ce0 <UART_SetConfig+0x228>
 8006cde:	e147      	b.n	8006f70 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ce4:	4b4d      	ldr	r3, [pc, #308]	; (8006e1c <UART_SetConfig+0x364>)
 8006ce6:	0052      	lsls	r2, r2, #1
 8006ce8:	5ad3      	ldrh	r3, [r2, r3]
 8006cea:	0019      	movs	r1, r3
 8006cec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006cee:	f7f9 fa09 	bl	8000104 <__udivsi3>
 8006cf2:	0003      	movs	r3, r0
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	0013      	movs	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	189b      	adds	r3, r3, r2
 8006d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d305      	bcc.n	8006d12 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d906      	bls.n	8006d20 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8006d12:	231a      	movs	r3, #26
 8006d14:	2220      	movs	r2, #32
 8006d16:	189b      	adds	r3, r3, r2
 8006d18:	19db      	adds	r3, r3, r7
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e127      	b.n	8006f70 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	61bb      	str	r3, [r7, #24]
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d2c:	4b3b      	ldr	r3, [pc, #236]	; (8006e1c <UART_SetConfig+0x364>)
 8006d2e:	0052      	lsls	r2, r2, #1
 8006d30:	5ad3      	ldrh	r3, [r2, r3]
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	69b8      	ldr	r0, [r7, #24]
 8006d3e:	69f9      	ldr	r1, [r7, #28]
 8006d40:	f7f9 fb56 	bl	80003f0 <__aeabi_uldivmod>
 8006d44:	0002      	movs	r2, r0
 8006d46:	000b      	movs	r3, r1
 8006d48:	0e11      	lsrs	r1, r2, #24
 8006d4a:	021d      	lsls	r5, r3, #8
 8006d4c:	430d      	orrs	r5, r1
 8006d4e:	0214      	lsls	r4, r2, #8
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	085b      	lsrs	r3, r3, #1
 8006d56:	60bb      	str	r3, [r7, #8]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68b8      	ldr	r0, [r7, #8]
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	1900      	adds	r0, r0, r4
 8006d62:	4169      	adcs	r1, r5
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	603b      	str	r3, [r7, #0]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f7f9 fb3d 	bl	80003f0 <__aeabi_uldivmod>
 8006d76:	0002      	movs	r2, r0
 8006d78:	000b      	movs	r3, r1
 8006d7a:	0013      	movs	r3, r2
 8006d7c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d80:	23c0      	movs	r3, #192	; 0xc0
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d309      	bcc.n	8006d9c <UART_SetConfig+0x2e4>
 8006d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8a:	2380      	movs	r3, #128	; 0x80
 8006d8c:	035b      	lsls	r3, r3, #13
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d204      	bcs.n	8006d9c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d98:	60da      	str	r2, [r3, #12]
 8006d9a:	e0e9      	b.n	8006f70 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006d9c:	231a      	movs	r3, #26
 8006d9e:	2220      	movs	r2, #32
 8006da0:	189b      	adds	r3, r3, r2
 8006da2:	19db      	adds	r3, r3, r7
 8006da4:	2201      	movs	r2, #1
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	e0e2      	b.n	8006f70 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	69da      	ldr	r2, [r3, #28]
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d000      	beq.n	8006db8 <UART_SetConfig+0x300>
 8006db6:	e083      	b.n	8006ec0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006db8:	231b      	movs	r3, #27
 8006dba:	2220      	movs	r2, #32
 8006dbc:	189b      	adds	r3, r3, r2
 8006dbe:	19db      	adds	r3, r3, r7
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d015      	beq.n	8006df2 <UART_SetConfig+0x33a>
 8006dc6:	dc2b      	bgt.n	8006e20 <UART_SetConfig+0x368>
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d00d      	beq.n	8006de8 <UART_SetConfig+0x330>
 8006dcc:	dc28      	bgt.n	8006e20 <UART_SetConfig+0x368>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <UART_SetConfig+0x320>
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d005      	beq.n	8006de2 <UART_SetConfig+0x32a>
 8006dd6:	e023      	b.n	8006e20 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd8:	f7fe f8fa 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006de0:	e027      	b.n	8006e32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de2:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <UART_SetConfig+0x360>)
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006de6:	e024      	b.n	8006e32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de8:	f7fe f866 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8006dec:	0003      	movs	r3, r0
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df0:	e01f      	b.n	8006e32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df2:	2380      	movs	r3, #128	; 0x80
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df8:	e01b      	b.n	8006e32 <UART_SetConfig+0x37a>
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	cfff69f3 	.word	0xcfff69f3
 8006e00:	ffffcfff 	.word	0xffffcfff
 8006e04:	40008000 	.word	0x40008000
 8006e08:	11fff4ff 	.word	0x11fff4ff
 8006e0c:	40013800 	.word	0x40013800
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40004400 	.word	0x40004400
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	080078fc 	.word	0x080078fc
      default:
        pclk = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006e24:	231a      	movs	r3, #26
 8006e26:	2220      	movs	r2, #32
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	19db      	adds	r3, r3, r7
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	701a      	strb	r2, [r3, #0]
        break;
 8006e30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d100      	bne.n	8006e3a <UART_SetConfig+0x382>
 8006e38:	e09a      	b.n	8006f70 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e3e:	4b58      	ldr	r3, [pc, #352]	; (8006fa0 <UART_SetConfig+0x4e8>)
 8006e40:	0052      	lsls	r2, r2, #1
 8006e42:	5ad3      	ldrh	r3, [r2, r3]
 8006e44:	0019      	movs	r1, r3
 8006e46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e48:	f7f9 f95c 	bl	8000104 <__udivsi3>
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	005a      	lsls	r2, r3, #1
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	085b      	lsrs	r3, r3, #1
 8006e56:	18d2      	adds	r2, r2, r3
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	0019      	movs	r1, r3
 8006e5e:	0010      	movs	r0, r2
 8006e60:	f7f9 f950 	bl	8000104 <__udivsi3>
 8006e64:	0003      	movs	r3, r0
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	2b0f      	cmp	r3, #15
 8006e6c:	d921      	bls.n	8006eb2 <UART_SetConfig+0x3fa>
 8006e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e70:	2380      	movs	r3, #128	; 0x80
 8006e72:	025b      	lsls	r3, r3, #9
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d21c      	bcs.n	8006eb2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	200e      	movs	r0, #14
 8006e7e:	2420      	movs	r4, #32
 8006e80:	1903      	adds	r3, r0, r4
 8006e82:	19db      	adds	r3, r3, r7
 8006e84:	210f      	movs	r1, #15
 8006e86:	438a      	bics	r2, r1
 8006e88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2207      	movs	r2, #7
 8006e92:	4013      	ands	r3, r2
 8006e94:	b299      	uxth	r1, r3
 8006e96:	1903      	adds	r3, r0, r4
 8006e98:	19db      	adds	r3, r3, r7
 8006e9a:	1902      	adds	r2, r0, r4
 8006e9c:	19d2      	adds	r2, r2, r7
 8006e9e:	8812      	ldrh	r2, [r2, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	1902      	adds	r2, r0, r4
 8006eaa:	19d2      	adds	r2, r2, r7
 8006eac:	8812      	ldrh	r2, [r2, #0]
 8006eae:	60da      	str	r2, [r3, #12]
 8006eb0:	e05e      	b.n	8006f70 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb2:	231a      	movs	r3, #26
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	189b      	adds	r3, r3, r2
 8006eb8:	19db      	adds	r3, r3, r7
 8006eba:	2201      	movs	r2, #1
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	e057      	b.n	8006f70 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ec0:	231b      	movs	r3, #27
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	189b      	adds	r3, r3, r2
 8006ec6:	19db      	adds	r3, r3, r7
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d015      	beq.n	8006efa <UART_SetConfig+0x442>
 8006ece:	dc18      	bgt.n	8006f02 <UART_SetConfig+0x44a>
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d00d      	beq.n	8006ef0 <UART_SetConfig+0x438>
 8006ed4:	dc15      	bgt.n	8006f02 <UART_SetConfig+0x44a>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <UART_SetConfig+0x428>
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d005      	beq.n	8006eea <UART_SetConfig+0x432>
 8006ede:	e010      	b.n	8006f02 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f7fe f876 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	0003      	movs	r3, r0
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ee8:	e014      	b.n	8006f14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eea:	4b2e      	ldr	r3, [pc, #184]	; (8006fa4 <UART_SetConfig+0x4ec>)
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eee:	e011      	b.n	8006f14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef0:	f7fd ffe2 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8006ef4:	0003      	movs	r3, r0
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ef8:	e00c      	b.n	8006f14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f00:	e008      	b.n	8006f14 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f06:	231a      	movs	r3, #26
 8006f08:	2220      	movs	r2, #32
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	19db      	adds	r3, r3, r7
 8006f0e:	2201      	movs	r2, #1
 8006f10:	701a      	strb	r2, [r3, #0]
        break;
 8006f12:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d02a      	beq.n	8006f70 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f1e:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <UART_SetConfig+0x4e8>)
 8006f20:	0052      	lsls	r2, r2, #1
 8006f22:	5ad3      	ldrh	r3, [r2, r3]
 8006f24:	0019      	movs	r1, r3
 8006f26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f28:	f7f9 f8ec 	bl	8000104 <__udivsi3>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	001a      	movs	r2, r3
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	085b      	lsrs	r3, r3, #1
 8006f36:	18d2      	adds	r2, r2, r3
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	0019      	movs	r1, r3
 8006f3e:	0010      	movs	r0, r2
 8006f40:	f7f9 f8e0 	bl	8000104 <__udivsi3>
 8006f44:	0003      	movs	r3, r0
 8006f46:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	d90a      	bls.n	8006f64 <UART_SetConfig+0x4ac>
 8006f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f50:	2380      	movs	r3, #128	; 0x80
 8006f52:	025b      	lsls	r3, r3, #9
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d205      	bcs.n	8006f64 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	e005      	b.n	8006f70 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006f64:	231a      	movs	r3, #26
 8006f66:	2220      	movs	r2, #32
 8006f68:	189b      	adds	r3, r3, r2
 8006f6a:	19db      	adds	r3, r3, r7
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	226a      	movs	r2, #106	; 0x6a
 8006f74:	2101      	movs	r1, #1
 8006f76:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	2268      	movs	r2, #104	; 0x68
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	2200      	movs	r2, #0
 8006f84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	2200      	movs	r2, #0
 8006f8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006f8c:	231a      	movs	r3, #26
 8006f8e:	2220      	movs	r2, #32
 8006f90:	189b      	adds	r3, r3, r2
 8006f92:	19db      	adds	r3, r3, r7
 8006f94:	781b      	ldrb	r3, [r3, #0]
}
 8006f96:	0018      	movs	r0, r3
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b010      	add	sp, #64	; 0x40
 8006f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	080078fc 	.word	0x080078fc
 8006fa4:	00f42400 	.word	0x00f42400

08006fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d00b      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a4a      	ldr	r2, [pc, #296]	; (80070ec <UART_AdvFeatureConfig+0x144>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4a43      	ldr	r2, [pc, #268]	; (80070f0 <UART_AdvFeatureConfig+0x148>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d00b      	beq.n	8007016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	4a3b      	ldr	r2, [pc, #236]	; (80070f4 <UART_AdvFeatureConfig+0x14c>)
 8007006:	4013      	ands	r3, r2
 8007008:	0019      	movs	r1, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	2208      	movs	r2, #8
 800701c:	4013      	ands	r3, r2
 800701e:	d00b      	beq.n	8007038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	4a34      	ldr	r2, [pc, #208]	; (80070f8 <UART_AdvFeatureConfig+0x150>)
 8007028:	4013      	ands	r3, r2
 800702a:	0019      	movs	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	2210      	movs	r2, #16
 800703e:	4013      	ands	r3, r2
 8007040:	d00b      	beq.n	800705a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4a2c      	ldr	r2, [pc, #176]	; (80070fc <UART_AdvFeatureConfig+0x154>)
 800704a:	4013      	ands	r3, r2
 800704c:	0019      	movs	r1, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	2220      	movs	r2, #32
 8007060:	4013      	ands	r3, r2
 8007062:	d00b      	beq.n	800707c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	4a25      	ldr	r2, [pc, #148]	; (8007100 <UART_AdvFeatureConfig+0x158>)
 800706c:	4013      	ands	r3, r2
 800706e:	0019      	movs	r1, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	2240      	movs	r2, #64	; 0x40
 8007082:	4013      	ands	r3, r2
 8007084:	d01d      	beq.n	80070c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <UART_AdvFeatureConfig+0x15c>)
 800708e:	4013      	ands	r3, r2
 8007090:	0019      	movs	r1, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	035b      	lsls	r3, r3, #13
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d10b      	bne.n	80070c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	4a15      	ldr	r2, [pc, #84]	; (8007108 <UART_AdvFeatureConfig+0x160>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	0019      	movs	r1, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	2280      	movs	r2, #128	; 0x80
 80070c8:	4013      	ands	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	4a0e      	ldr	r2, [pc, #56]	; (800710c <UART_AdvFeatureConfig+0x164>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	0019      	movs	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }
}
 80070e4:	46c0      	nop			; (mov r8, r8)
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b002      	add	sp, #8
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	fffdffff 	.word	0xfffdffff
 80070f0:	fffeffff 	.word	0xfffeffff
 80070f4:	fffbffff 	.word	0xfffbffff
 80070f8:	ffff7fff 	.word	0xffff7fff
 80070fc:	ffffefff 	.word	0xffffefff
 8007100:	ffffdfff 	.word	0xffffdfff
 8007104:	ffefffff 	.word	0xffefffff
 8007108:	ff9fffff 	.word	0xff9fffff
 800710c:	fff7ffff 	.word	0xfff7ffff

08007110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af02      	add	r7, sp, #8
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2290      	movs	r2, #144	; 0x90
 800711c:	2100      	movs	r1, #0
 800711e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007120:	f7fb fe38 	bl	8002d94 <HAL_GetTick>
 8007124:	0003      	movs	r3, r0
 8007126:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2208      	movs	r2, #8
 8007130:	4013      	ands	r3, r2
 8007132:	2b08      	cmp	r3, #8
 8007134:	d10c      	bne.n	8007150 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2280      	movs	r2, #128	; 0x80
 800713a:	0391      	lsls	r1, r2, #14
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4a1a      	ldr	r2, [pc, #104]	; (80071a8 <UART_CheckIdleState+0x98>)
 8007140:	9200      	str	r2, [sp, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	f000 f832 	bl	80071ac <UART_WaitOnFlagUntilTimeout>
 8007148:	1e03      	subs	r3, r0, #0
 800714a:	d001      	beq.n	8007150 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e026      	b.n	800719e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2204      	movs	r2, #4
 8007158:	4013      	ands	r3, r2
 800715a:	2b04      	cmp	r3, #4
 800715c:	d10c      	bne.n	8007178 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	03d1      	lsls	r1, r2, #15
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4a10      	ldr	r2, [pc, #64]	; (80071a8 <UART_CheckIdleState+0x98>)
 8007168:	9200      	str	r2, [sp, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	f000 f81e 	bl	80071ac <UART_WaitOnFlagUntilTimeout>
 8007170:	1e03      	subs	r3, r0, #0
 8007172:	d001      	beq.n	8007178 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e012      	b.n	800719e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2288      	movs	r2, #136	; 0x88
 800717c:	2120      	movs	r1, #32
 800717e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	228c      	movs	r2, #140	; 0x8c
 8007184:	2120      	movs	r1, #32
 8007186:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2284      	movs	r2, #132	; 0x84
 8007198:	2100      	movs	r1, #0
 800719a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	0018      	movs	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b004      	add	sp, #16
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	01ffffff 	.word	0x01ffffff

080071ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b094      	sub	sp, #80	; 0x50
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	1dfb      	adds	r3, r7, #7
 80071ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071bc:	e0a7      	b.n	800730e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071c0:	3301      	adds	r3, #1
 80071c2:	d100      	bne.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80071c4:	e0a3      	b.n	800730e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c6:	f7fb fde5 	bl	8002d94 <HAL_GetTick>
 80071ca:	0002      	movs	r2, r0
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d302      	bcc.n	80071dc <UART_WaitOnFlagUntilTimeout+0x30>
 80071d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d13f      	bne.n	800725c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071dc:	f3ef 8310 	mrs	r3, PRIMASK
 80071e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071e4:	647b      	str	r3, [r7, #68]	; 0x44
 80071e6:	2301      	movs	r3, #1
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	f383 8810 	msr	PRIMASK, r3
}
 80071f0:	46c0      	nop			; (mov r8, r8)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	494e      	ldr	r1, [pc, #312]	; (8007338 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80071fe:	400a      	ands	r2, r1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007204:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	f383 8810 	msr	PRIMASK, r3
}
 800720c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800720e:	f3ef 8310 	mrs	r3, PRIMASK
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007216:	643b      	str	r3, [r7, #64]	; 0x40
 8007218:	2301      	movs	r3, #1
 800721a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	f383 8810 	msr	PRIMASK, r3
}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2101      	movs	r1, #1
 8007230:	438a      	bics	r2, r1
 8007232:	609a      	str	r2, [r3, #8]
 8007234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723a:	f383 8810 	msr	PRIMASK, r3
}
 800723e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2288      	movs	r2, #136	; 0x88
 8007244:	2120      	movs	r1, #32
 8007246:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	228c      	movs	r2, #140	; 0x8c
 800724c:	2120      	movs	r1, #32
 800724e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2284      	movs	r2, #132	; 0x84
 8007254:	2100      	movs	r1, #0
 8007256:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e069      	b.n	8007330 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2204      	movs	r2, #4
 8007264:	4013      	ands	r3, r2
 8007266:	d052      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69da      	ldr	r2, [r3, #28]
 800726e:	2380      	movs	r3, #128	; 0x80
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	401a      	ands	r2, r3
 8007274:	2380      	movs	r3, #128	; 0x80
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	429a      	cmp	r2, r3
 800727a:	d148      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2280      	movs	r2, #128	; 0x80
 8007282:	0112      	lsls	r2, r2, #4
 8007284:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007286:	f3ef 8310 	mrs	r3, PRIMASK
 800728a:	613b      	str	r3, [r7, #16]
  return(result);
 800728c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800728e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007290:	2301      	movs	r3, #1
 8007292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f383 8810 	msr	PRIMASK, r3
}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4924      	ldr	r1, [pc, #144]	; (8007338 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80072a8:	400a      	ands	r2, r1
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	f383 8810 	msr	PRIMASK, r3
}
 80072b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b8:	f3ef 8310 	mrs	r3, PRIMASK
 80072bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80072be:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072c2:	2301      	movs	r3, #1
 80072c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	f383 8810 	msr	PRIMASK, r3
}
 80072cc:	46c0      	nop			; (mov r8, r8)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2101      	movs	r1, #1
 80072da:	438a      	bics	r2, r1
 80072dc:	609a      	str	r2, [r3, #8]
 80072de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	f383 8810 	msr	PRIMASK, r3
}
 80072e8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2288      	movs	r2, #136	; 0x88
 80072ee:	2120      	movs	r1, #32
 80072f0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	228c      	movs	r2, #140	; 0x8c
 80072f6:	2120      	movs	r1, #32
 80072f8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2290      	movs	r2, #144	; 0x90
 80072fe:	2120      	movs	r1, #32
 8007300:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2284      	movs	r2, #132	; 0x84
 8007306:	2100      	movs	r1, #0
 8007308:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e010      	b.n	8007330 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	4013      	ands	r3, r2
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	425a      	negs	r2, r3
 800731e:	4153      	adcs	r3, r2
 8007320:	b2db      	uxtb	r3, r3
 8007322:	001a      	movs	r2, r3
 8007324:	1dfb      	adds	r3, r7, #7
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d100      	bne.n	800732e <UART_WaitOnFlagUntilTimeout+0x182>
 800732c:	e747      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b014      	add	sp, #80	; 0x50
 8007336:	bd80      	pop	{r7, pc}
 8007338:	fffffe5f 	.word	0xfffffe5f

0800733c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08e      	sub	sp, #56	; 0x38
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007344:	f3ef 8310 	mrs	r3, PRIMASK
 8007348:	617b      	str	r3, [r7, #20]
  return(result);
 800734a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800734c:	637b      	str	r3, [r7, #52]	; 0x34
 800734e:	2301      	movs	r3, #1
 8007350:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	f383 8810 	msr	PRIMASK, r3
}
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4926      	ldr	r1, [pc, #152]	; (8007400 <UART_EndRxTransfer+0xc4>)
 8007366:	400a      	ands	r2, r1
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f383 8810 	msr	PRIMASK, r3
}
 8007374:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007376:	f3ef 8310 	mrs	r3, PRIMASK
 800737a:	623b      	str	r3, [r7, #32]
  return(result);
 800737c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800737e:	633b      	str	r3, [r7, #48]	; 0x30
 8007380:	2301      	movs	r3, #1
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	f383 8810 	msr	PRIMASK, r3
}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	491b      	ldr	r1, [pc, #108]	; (8007404 <UART_EndRxTransfer+0xc8>)
 8007398:	400a      	ands	r2, r1
 800739a:	609a      	str	r2, [r3, #8]
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	f383 8810 	msr	PRIMASK, r3
}
 80073a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d118      	bne.n	80073e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b0:	f3ef 8310 	mrs	r3, PRIMASK
 80073b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80073b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ba:	2301      	movs	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f383 8810 	msr	PRIMASK, r3
}
 80073c4:	46c0      	nop			; (mov r8, r8)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2110      	movs	r1, #16
 80073d2:	438a      	bics	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f383 8810 	msr	PRIMASK, r3
}
 80073e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	228c      	movs	r2, #140	; 0x8c
 80073e6:	2120      	movs	r1, #32
 80073e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b00e      	add	sp, #56	; 0x38
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	fffffedf 	.word	0xfffffedf
 8007404:	effffffe 	.word	0xeffffffe

08007408 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	225e      	movs	r2, #94	; 0x5e
 800741a:	2100      	movs	r1, #0
 800741c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2256      	movs	r2, #86	; 0x56
 8007422:	2100      	movs	r1, #0
 8007424:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	0018      	movs	r0, r3
 800742a:	f7ff fb31 	bl	8006a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	46bd      	mov	sp, r7
 8007432:	b004      	add	sp, #16
 8007434:	bd80      	pop	{r7, pc}

08007436 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800743e:	f3ef 8310 	mrs	r3, PRIMASK
 8007442:	60bb      	str	r3, [r7, #8]
  return(result);
 8007444:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	2301      	movs	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f383 8810 	msr	PRIMASK, r3
}
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2140      	movs	r1, #64	; 0x40
 8007460:	438a      	bics	r2, r1
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f383 8810 	msr	PRIMASK, r3
}
 800746e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2288      	movs	r2, #136	; 0x88
 8007474:	2120      	movs	r1, #32
 8007476:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	0018      	movs	r0, r3
 8007482:	f7ff fafd 	bl	8006a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	46bd      	mov	sp, r7
 800748a:	b006      	add	sp, #24
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e05d      	b.n	8007564 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2288      	movs	r2, #136	; 0x88
 80074ac:	589b      	ldr	r3, [r3, r2]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d107      	bne.n	80074c2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2284      	movs	r2, #132	; 0x84
 80074b6:	2100      	movs	r1, #0
 80074b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	0018      	movs	r0, r3
 80074be:	f7fb fb21 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2288      	movs	r2, #136	; 0x88
 80074c6:	2124      	movs	r1, #36	; 0x24
 80074c8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2101      	movs	r1, #1
 80074d6:	438a      	bics	r2, r1
 80074d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	0018      	movs	r0, r3
 80074de:	f7ff faeb 	bl	8006ab8 <UART_SetConfig>
 80074e2:	0003      	movs	r3, r0
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e03b      	b.n	8007564 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	0018      	movs	r0, r3
 80074f8:	f7ff fd56 	bl	8006fa8 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	01c9      	lsls	r1, r1, #7
 800750a:	430a      	orrs	r2, r1
 800750c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	4a15      	ldr	r2, [pc, #84]	; (800756c <HAL_RS485Ex_Init+0xdc>)
 8007516:	4013      	ands	r3, r2
 8007518:	0019      	movs	r1, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	430a      	orrs	r2, r1
 8007522:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	055b      	lsls	r3, r3, #21
 8007528:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a0d      	ldr	r2, [pc, #52]	; (8007570 <HAL_RS485Ex_Init+0xe0>)
 800753c:	4013      	ands	r3, r2
 800753e:	0019      	movs	r1, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	430a      	orrs	r2, r1
 8007548:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2101      	movs	r1, #1
 8007556:	430a      	orrs	r2, r1
 8007558:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	0018      	movs	r0, r3
 800755e:	f7ff fdd7 	bl	8007110 <UART_CheckIdleState>
 8007562:	0003      	movs	r3, r0
}
 8007564:	0018      	movs	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	b006      	add	sp, #24
 800756a:	bd80      	pop	{r7, pc}
 800756c:	ffff7fff 	.word	0xffff7fff
 8007570:	fc00ffff 	.word	0xfc00ffff

08007574 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800757c:	46c0      	nop			; (mov r8, r8)
 800757e:	46bd      	mov	sp, r7
 8007580:	b002      	add	sp, #8
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800758c:	46c0      	nop			; (mov r8, r8)
 800758e:	46bd      	mov	sp, r7
 8007590:	b002      	add	sp, #8
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800759c:	46c0      	nop			; (mov r8, r8)
 800759e:	46bd      	mov	sp, r7
 80075a0:	b002      	add	sp, #8
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2284      	movs	r2, #132	; 0x84
 80075b0:	5c9b      	ldrb	r3, [r3, r2]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_UARTEx_DisableFifoMode+0x16>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e027      	b.n	800760a <HAL_UARTEx_DisableFifoMode+0x66>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2284      	movs	r2, #132	; 0x84
 80075be:	2101      	movs	r1, #1
 80075c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2288      	movs	r2, #136	; 0x88
 80075c6:	2124      	movs	r1, #36	; 0x24
 80075c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2101      	movs	r1, #1
 80075de:	438a      	bics	r2, r1
 80075e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a0b      	ldr	r2, [pc, #44]	; (8007614 <HAL_UARTEx_DisableFifoMode+0x70>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2288      	movs	r2, #136	; 0x88
 80075fc:	2120      	movs	r1, #32
 80075fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2284      	movs	r2, #132	; 0x84
 8007604:	2100      	movs	r1, #0
 8007606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	0018      	movs	r0, r3
 800760c:	46bd      	mov	sp, r7
 800760e:	b004      	add	sp, #16
 8007610:	bd80      	pop	{r7, pc}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	dfffffff 	.word	0xdfffffff

08007618 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2284      	movs	r2, #132	; 0x84
 8007626:	5c9b      	ldrb	r3, [r3, r2]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800762c:	2302      	movs	r3, #2
 800762e:	e02e      	b.n	800768e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2284      	movs	r2, #132	; 0x84
 8007634:	2101      	movs	r1, #1
 8007636:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2288      	movs	r2, #136	; 0x88
 800763c:	2124      	movs	r1, #36	; 0x24
 800763e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2101      	movs	r1, #1
 8007654:	438a      	bics	r2, r1
 8007656:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	08d9      	lsrs	r1, r3, #3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	0018      	movs	r0, r3
 8007670:	f000 f854 	bl	800771c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2288      	movs	r2, #136	; 0x88
 8007680:	2120      	movs	r1, #32
 8007682:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2284      	movs	r2, #132	; 0x84
 8007688:	2100      	movs	r1, #0
 800768a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	0018      	movs	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	b004      	add	sp, #16
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2284      	movs	r2, #132	; 0x84
 80076a6:	5c9b      	ldrb	r3, [r3, r2]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d101      	bne.n	80076b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e02f      	b.n	8007710 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2284      	movs	r2, #132	; 0x84
 80076b4:	2101      	movs	r1, #1
 80076b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2288      	movs	r2, #136	; 0x88
 80076bc:	2124      	movs	r1, #36	; 0x24
 80076be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2101      	movs	r1, #1
 80076d4:	438a      	bics	r2, r1
 80076d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	4a0e      	ldr	r2, [pc, #56]	; (8007718 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	0019      	movs	r1, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	0018      	movs	r0, r3
 80076f2:	f000 f813 	bl	800771c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2288      	movs	r2, #136	; 0x88
 8007702:	2120      	movs	r1, #32
 8007704:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2284      	movs	r2, #132	; 0x84
 800770a:	2100      	movs	r1, #0
 800770c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	0018      	movs	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	b004      	add	sp, #16
 8007716:	bd80      	pop	{r7, pc}
 8007718:	f1ffffff 	.word	0xf1ffffff

0800771c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800771c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007728:	2b00      	cmp	r3, #0
 800772a:	d108      	bne.n	800773e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	226a      	movs	r2, #106	; 0x6a
 8007730:	2101      	movs	r1, #1
 8007732:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2268      	movs	r2, #104	; 0x68
 8007738:	2101      	movs	r1, #1
 800773a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800773c:	e043      	b.n	80077c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800773e:	260f      	movs	r6, #15
 8007740:	19bb      	adds	r3, r7, r6
 8007742:	2208      	movs	r2, #8
 8007744:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007746:	200e      	movs	r0, #14
 8007748:	183b      	adds	r3, r7, r0
 800774a:	2208      	movs	r2, #8
 800774c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	0e5b      	lsrs	r3, r3, #25
 8007756:	b2da      	uxtb	r2, r3
 8007758:	240d      	movs	r4, #13
 800775a:	193b      	adds	r3, r7, r4
 800775c:	2107      	movs	r1, #7
 800775e:	400a      	ands	r2, r1
 8007760:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	0f5b      	lsrs	r3, r3, #29
 800776a:	b2da      	uxtb	r2, r3
 800776c:	250c      	movs	r5, #12
 800776e:	197b      	adds	r3, r7, r5
 8007770:	2107      	movs	r1, #7
 8007772:	400a      	ands	r2, r1
 8007774:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007776:	183b      	adds	r3, r7, r0
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	197a      	adds	r2, r7, r5
 800777c:	7812      	ldrb	r2, [r2, #0]
 800777e:	4914      	ldr	r1, [pc, #80]	; (80077d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007780:	5c8a      	ldrb	r2, [r1, r2]
 8007782:	435a      	muls	r2, r3
 8007784:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007786:	197b      	adds	r3, r7, r5
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	4a12      	ldr	r2, [pc, #72]	; (80077d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800778c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800778e:	0019      	movs	r1, r3
 8007790:	f7f8 fd42 	bl	8000218 <__divsi3>
 8007794:	0003      	movs	r3, r0
 8007796:	b299      	uxth	r1, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	226a      	movs	r2, #106	; 0x6a
 800779c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800779e:	19bb      	adds	r3, r7, r6
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	193a      	adds	r2, r7, r4
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	490a      	ldr	r1, [pc, #40]	; (80077d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80077a8:	5c8a      	ldrb	r2, [r1, r2]
 80077aa:	435a      	muls	r2, r3
 80077ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80077ae:	193b      	adds	r3, r7, r4
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80077b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077b6:	0019      	movs	r1, r3
 80077b8:	f7f8 fd2e 	bl	8000218 <__divsi3>
 80077bc:	0003      	movs	r3, r0
 80077be:	b299      	uxth	r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2268      	movs	r2, #104	; 0x68
 80077c4:	5299      	strh	r1, [r3, r2]
}
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	46bd      	mov	sp, r7
 80077ca:	b005      	add	sp, #20
 80077cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	08007914 	.word	0x08007914
 80077d4:	0800791c 	.word	0x0800791c

080077d8 <memset>:
 80077d8:	0003      	movs	r3, r0
 80077da:	1882      	adds	r2, r0, r2
 80077dc:	4293      	cmp	r3, r2
 80077de:	d100      	bne.n	80077e2 <memset+0xa>
 80077e0:	4770      	bx	lr
 80077e2:	7019      	strb	r1, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	e7f9      	b.n	80077dc <memset+0x4>

080077e8 <__libc_init_array>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	2600      	movs	r6, #0
 80077ec:	4c0c      	ldr	r4, [pc, #48]	; (8007820 <__libc_init_array+0x38>)
 80077ee:	4d0d      	ldr	r5, [pc, #52]	; (8007824 <__libc_init_array+0x3c>)
 80077f0:	1b64      	subs	r4, r4, r5
 80077f2:	10a4      	asrs	r4, r4, #2
 80077f4:	42a6      	cmp	r6, r4
 80077f6:	d109      	bne.n	800780c <__libc_init_array+0x24>
 80077f8:	2600      	movs	r6, #0
 80077fa:	f000 f819 	bl	8007830 <_init>
 80077fe:	4c0a      	ldr	r4, [pc, #40]	; (8007828 <__libc_init_array+0x40>)
 8007800:	4d0a      	ldr	r5, [pc, #40]	; (800782c <__libc_init_array+0x44>)
 8007802:	1b64      	subs	r4, r4, r5
 8007804:	10a4      	asrs	r4, r4, #2
 8007806:	42a6      	cmp	r6, r4
 8007808:	d105      	bne.n	8007816 <__libc_init_array+0x2e>
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	00b3      	lsls	r3, r6, #2
 800780e:	58eb      	ldr	r3, [r5, r3]
 8007810:	4798      	blx	r3
 8007812:	3601      	adds	r6, #1
 8007814:	e7ee      	b.n	80077f4 <__libc_init_array+0xc>
 8007816:	00b3      	lsls	r3, r6, #2
 8007818:	58eb      	ldr	r3, [r5, r3]
 800781a:	4798      	blx	r3
 800781c:	3601      	adds	r6, #1
 800781e:	e7f2      	b.n	8007806 <__libc_init_array+0x1e>
 8007820:	0800792c 	.word	0x0800792c
 8007824:	0800792c 	.word	0x0800792c
 8007828:	08007930 	.word	0x08007930
 800782c:	0800792c 	.word	0x0800792c

08007830 <_init>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr

0800783c <_fini>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr
