
Breadboard_developement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe4  08005fe4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000000c  08005ff8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005ff8  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013600  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca0  00000000  00000000  000336ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00036360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d42  00000000  00000000  00037458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188be  00000000  00000000  0003819a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015dd8  00000000  00000000  00050a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cf05  00000000  00000000  00066830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cd0  00000000  00000000  00103738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00107408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005ee8 	.word	0x08005ee8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005ee8 	.word	0x08005ee8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	0018      	movs	r0, r3
 8000626:	230c      	movs	r3, #12
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f005 fc30 	bl	8005e90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000630:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000632:	4a5d      	ldr	r2, [pc, #372]	; (80007a8 <MX_ADC1_Init+0x18c>)
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000636:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	05d2      	lsls	r2, r2, #23
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b57      	ldr	r3, [pc, #348]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064a:	4b56      	ldr	r3, [pc, #344]	; (80007a4 <MX_ADC1_Init+0x188>)
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0392      	lsls	r2, r2, #14
 8000650:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000652:	4b54      	ldr	r3, [pc, #336]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000654:	2208      	movs	r2, #8
 8000656:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000658:	4b52      	ldr	r3, [pc, #328]	; (80007a4 <MX_ADC1_Init+0x188>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800065e:	4b51      	ldr	r3, [pc, #324]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000660:	2200      	movs	r2, #0
 8000662:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000664:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000666:	2201      	movs	r2, #1
 8000668:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 7;
 800066a:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <MX_ADC1_Init+0x188>)
 800066c:	2207      	movs	r2, #7
 800066e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067c:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <MX_ADC1_Init+0x188>)
 800067e:	222c      	movs	r2, #44	; 0x2c
 8000680:	2100      	movs	r1, #0
 8000682:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000686:	2200      	movs	r2, #0
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800068a:	4b46      	ldr	r3, [pc, #280]	; (80007a4 <MX_ADC1_Init+0x188>)
 800068c:	2207      	movs	r2, #7
 800068e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000690:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000692:	2207      	movs	r2, #7
 8000694:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000696:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <MX_ADC1_Init+0x188>)
 8000698:	223c      	movs	r2, #60	; 0x3c
 800069a:	2100      	movs	r1, #0
 800069c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800069e:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <MX_ADC1_Init+0x188>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a4:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <MX_ADC1_Init+0x188>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 f83c 	bl	8001724 <HAL_ADC_Init>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006b0:	f000 fa50 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4a3d      	ldr	r2, [pc, #244]	; (80007ac <MX_ADC1_Init+0x190>)
 80006b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3a      	adds	r2, r7, #4
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <MX_ADC1_Init+0x188>)
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fa77 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80006d6:	f000 fa3d 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4a34      	ldr	r2, [pc, #208]	; (80007b0 <MX_ADC1_Init+0x194>)
 80006de:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2204      	movs	r2, #4
 80006e4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3a      	adds	r2, r7, #4
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_ADC1_Init+0x188>)
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fa67 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006f6:	f000 fa2d 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2208      	movs	r2, #8
 8000704:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_ADC1_Init+0x188>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fa57 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000716:	f000 fa1d 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4a25      	ldr	r2, [pc, #148]	; (80007b4 <MX_ADC1_Init+0x198>)
 800071e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	220c      	movs	r2, #12
 8000724:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_ADC1_Init+0x188>)
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fa47 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000736:	f000 fa0d 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MX_ADC1_Init+0x19c>)
 800073e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2210      	movs	r2, #16
 8000744:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	1d3a      	adds	r2, r7, #4
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_ADC1_Init+0x188>)
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fa37 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000756:	f000 f9fd 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_ADC1_Init+0x1a0>)
 800075e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2214      	movs	r2, #20
 8000764:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_ADC1_Init+0x188>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fa27 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000776:	f000 f9ed 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <MX_ADC1_Init+0x1a4>)
 800077e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2218      	movs	r2, #24
 8000784:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	1d3a      	adds	r2, r7, #4
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_ADC1_Init+0x188>)
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fa17 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8000796:	f000 f9dd 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b004      	add	sp, #16
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000028 	.word	0x20000028
 80007a8:	40012400 	.word	0x40012400
 80007ac:	18000040 	.word	0x18000040
 80007b0:	1c000080 	.word	0x1c000080
 80007b4:	04000002 	.word	0x04000002
 80007b8:	20000100 	.word	0x20000100
 80007bc:	24000200 	.word	0x24000200
 80007c0:	b0001000 	.word	0xb0001000

080007c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	2414      	movs	r4, #20
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0018      	movs	r0, r3
 80007d2:	2314      	movs	r3, #20
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f005 fb5a 	bl	8005e90 <memset>
  if(adcHandle->Instance==ADC1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <HAL_ADC_MspInit+0x10c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d16f      	bne.n	80008c6 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 80007e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	0349      	lsls	r1, r1, #13
 80007f0:	430a      	orrs	r2, r1
 80007f2:	641a      	str	r2, [r3, #64]	; 0x40
 80007f4:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 80007f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	035b      	lsls	r3, r3, #13
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
 800080e:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000820:	2102      	movs	r1, #2
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <HAL_ADC_MspInit+0x110>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	2202      	movs	r2, #2
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_IN0_GAIN_CO_Pin|ADC1_IN1_OFFSET_CO_Pin|ADC1_IN6_CO_Pin|ADC1_IN7_NO_Pin;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	22c3      	movs	r2, #195	; 0xc3
 8000836:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2203      	movs	r2, #3
 800083c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	193a      	adds	r2, r7, r4
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f002 f89f 	bl	8002990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_GAIN_NO_Pin|ADC1_IN9_OFFSET_NO_Pin;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2203      	movs	r2, #3
 8000856:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2203      	movs	r2, #3
 800085c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	193b      	adds	r3, r7, r4
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <HAL_ADC_MspInit+0x114>)
 8000868:	0019      	movs	r1, r3
 800086a:	0010      	movs	r0, r2
 800086c:	f002 f890 	bl	8002990 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <HAL_ADC_MspInit+0x11c>)
 8000874:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000878:	2205      	movs	r2, #5
 800087a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_ADC_MspInit+0x118>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_ADC_MspInit+0x118>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_ADC_MspInit+0x118>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008a0:	2220      	movs	r2, #32
 80008a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fd51 	bl	8002354 <HAL_DMA_Init>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80008b6:	f000 f94d 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008be:	651a      	str	r2, [r3, #80]	; 0x50
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_ADC_MspInit+0x118>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b00b      	add	sp, #44	; 0x2c
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40012400 	.word	0x40012400
 80008d4:	40021000 	.word	0x40021000
 80008d8:	50000400 	.word	0x50000400
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	40020008 	.word	0x40020008

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_DMA_Init+0x48>)
 80008ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_DMA_Init+0x48>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	639a      	str	r2, [r3, #56]	; 0x38
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_DMA_Init+0x48>)
 80008f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fa:	2201      	movs	r2, #1
 80008fc:	4013      	ands	r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2009      	movs	r0, #9
 8000908:	f001 fcf2 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090c:	2009      	movs	r0, #9
 800090e:	f001 fd04 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	200a      	movs	r0, #10
 8000918:	f001 fcea 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800091c:	200a      	movs	r0, #10
 800091e:	f001 fcfc 	bl	800231a <HAL_NVIC_EnableIRQ>

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000

08000930 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b08b      	sub	sp, #44	; 0x2c
 8000934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	2414      	movs	r4, #20
 8000938:	193b      	adds	r3, r7, r4
 800093a:	0018      	movs	r0, r3
 800093c:	2314      	movs	r3, #20
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f005 faa5 	bl	8005e90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094a:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800094c:	2104      	movs	r1, #4
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2204      	movs	r2, #4
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000964:	2120      	movs	r1, #32
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	2220      	movs	r2, #32
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_GPIO_Init+0xf0>)
 8000994:	2102      	movs	r1, #2
 8000996:	430a      	orrs	r2, r1
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800099c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099e:	2202      	movs	r2, #2
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_GPIO_Init+0xf4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	0018      	movs	r0, r3
 80009ae:	f002 f953 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2204      	movs	r2, #4
 80009b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2288      	movs	r2, #136	; 0x88
 80009bc:	0352      	lsls	r2, r2, #13
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <MX_GPIO_Init+0xf8>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	0010      	movs	r0, r2
 80009ce:	f001 ffdf 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2240      	movs	r2, #64	; 0x40
 80009d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <MX_GPIO_Init+0xf4>)
 80009ee:	0019      	movs	r1, r3
 80009f0:	0010      	movs	r0, r2
 80009f2:	f001 ffcd 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_IN_DIP5_Pin|GPIO_IN_DIP4_Pin|GPIO_IN_DIP3_Pin|GPIO_IN_DIP2_Pin
 80009f6:	0021      	movs	r1, r4
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	22fc      	movs	r2, #252	; 0xfc
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
                          |GPIO_IN_DIP1_Pin|GPIO_IN_DIP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <MX_GPIO_Init+0xfc>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f001 ffbc 	bl	8002990 <HAL_GPIO_Init>

}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b00b      	add	sp, #44	; 0x2c
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	50000800 	.word	0x50000800
 8000a28:	50001400 	.word	0x50001400
 8000a2c:	50000400 	.word	0x50000400

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f000 fca7 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f843 	bl	8000ac4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f7ff ff77 	bl	8000930 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a42:	f7ff ff4f 	bl	80008e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a46:	f000 fb9f 	bl	8001188 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a4a:	f7ff fde7 	bl	800061c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a4e:	f000 f8f3 	bl	8000c38 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a52:	f000 fb49 	bl	80010e8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a56:	f000 f9b9 	bl	8000dcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



	uint32_t value_adc_DMA[7]={0,0,0,0,0,0,0}; // [NCO, NO, NO offset, NO gain, CO offset, CO gain, int_Temperature] // #TODO restructure as struct instrad array
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	231c      	movs	r3, #28
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f005 fa14 	bl	8005e90 <memset>

	TIM1->CCR1 = TIM1->ARR/(100/DutyCycle); //ARR = 256 (8 bit)
	TIM2->CCR1 = TIM1->ARR/(100/DutyCycle); //ARR = 256 (8 bit)
*/

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <main+0x80>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f003 f853 	bl	8003b18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <main+0x84>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f003 f84e 	bl	8003b18 <HAL_TIM_PWM_Start>
	//HAL_ADC_Start_DMA(&hadc1, value_adc_DMA, 7); // done in while loop
	HAL_ADC_Start_DMA(&hadc1, value_adc_DMA, 7);
 8000a7c:	1d39      	adds	r1, r7, #4
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <main+0x88>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fff6 	bl	8001a74 <HAL_ADC_Start_DMA>

    /* USER CODE BEGIN 3 */

		//HAL_UART_Transmit_DMA(&huart2, value_adc_DMA, sizeof(value_adc_DMA) ); // #TODO with dma or from written buffer??

		HAL_ADC_Start_DMA(&hadc1, value_adc_DMA, 7); // #TODO export to internal timer callback (trigger)
 8000a88:	1d39      	adds	r1, r7, #4
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <main+0x88>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fff0 	bl	8001a74 <HAL_ADC_Start_DMA>
		/* 	//uncomment for sensor use
		TIM1->CCR1 = TIM1->ARR*value_adc_DMA[0]/4095; //DMA is 12 Bit		CO sensor
		TIM2->CCR1 = TIM1->ARR*value_adc_DMA[1]/4095; //DMA is 12 Bit		NO sensor value

		 */
		TIM1->CCR1 = TIM1->ARR*value_adc_DMA[2]/4095;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <main+0x8c>)
 8000a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4353      	muls	r3, r2
 8000a9e:	4c07      	ldr	r4, [pc, #28]	; (8000abc <main+0x8c>)
 8000aa0:	4907      	ldr	r1, [pc, #28]	; (8000ac0 <main+0x90>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fb2e 	bl	8000104 <__udivsi3>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_ADC_Start_DMA(&hadc1, value_adc_DMA, 7); // #TODO export to internal timer callback (trigger)
 8000aac:	e7ec      	b.n	8000a88 <main+0x58>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	200000e8 	.word	0x200000e8
 8000ab4:	20000134 	.word	0x20000134
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	00000fff 	.word	0x00000fff

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b093      	sub	sp, #76	; 0x4c
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	2410      	movs	r4, #16
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2338      	movs	r3, #56	; 0x38
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f005 f9db 	bl	8005e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ada:	003b      	movs	r3, r7
 8000adc:	0018      	movs	r0, r3
 8000ade:	2310      	movs	r3, #16
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f005 f9d4 	bl	8005e90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 f8d1 	bl	8002c94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2202      	movs	r2, #2
 8000af6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0052      	lsls	r2, r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2240      	movs	r2, #64	; 0x40
 8000b0a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 f909 	bl	8002d2c <HAL_RCC_OscConfig>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b1e:	f000 f819 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	003b      	movs	r3, r7
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b34:	003b      	movs	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fc0e 	bl	8003360 <HAL_RCC_ClockConfig>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b48:	f000 f804 	bl	8000b54 <Error_Handler>
  }
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b013      	add	sp, #76	; 0x4c
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_MspInit+0x44>)
 8000b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_MspInit+0x44>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_MspInit+0x44>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	2201      	movs	r2, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x44>)
 8000b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_MspInit+0x44>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0549      	lsls	r1, r1, #21
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_MspInit+0x44>)
 8000b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	055b      	lsls	r3, r3, #21
 8000b94:	4013      	ands	r3, r2
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 fc46 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <DMA1_Channel1_IRQHandler+0x14>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 fd94 	bl	800270c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	2000008c 	.word	0x2000008c

08000bf0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fd88 	bl	800270c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 fd84 	bl	800270c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	20000180 	.word	0x20000180
 8000c10:	200001dc 	.word	0x200001dc

08000c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <USART1_IRQHandler+0x14>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f003 ff66 	bl	8004aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	20000238 	.word	0x20000238

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b09c      	sub	sp, #112	; 0x70
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	2360      	movs	r3, #96	; 0x60
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	0018      	movs	r0, r3
 8000c44:	2310      	movs	r3, #16
 8000c46:	001a      	movs	r2, r3
 8000c48:	2100      	movs	r1, #0
 8000c4a:	f005 f921 	bl	8005e90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4e:	2354      	movs	r3, #84	; 0x54
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	0018      	movs	r0, r3
 8000c54:	230c      	movs	r3, #12
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f005 f919 	bl	8005e90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	2338      	movs	r3, #56	; 0x38
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	0018      	movs	r0, r3
 8000c64:	231c      	movs	r3, #28
 8000c66:	001a      	movs	r2, r3
 8000c68:	2100      	movs	r1, #0
 8000c6a:	f005 f911 	bl	8005e90 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	0018      	movs	r0, r3
 8000c72:	2334      	movs	r3, #52	; 0x34
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f005 f90a 	bl	8005e90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c7c:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000c7e:	4a52      	ldr	r2, [pc, #328]	; (8000dc8 <MX_TIM1_Init+0x190>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c82:	4b50      	ldr	r3, [pc, #320]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000c90:	22ff      	movs	r2, #255	; 0xff
 8000c92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b4b      	ldr	r3, [pc, #300]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c9a:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca6:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f002 fe7d 	bl	80039a8 <HAL_TIM_Base_Init>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f7ff ff4f 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb6:	2160      	movs	r1, #96	; 0x60
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	0152      	lsls	r2, r2, #5
 8000cbe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cc0:	187a      	adds	r2, r7, r1
 8000cc2:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f003 f904 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000cd0:	f7ff ff40 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cd4:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f002 febe 	bl	8003a58 <HAL_TIM_PWM_Init>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000ce0:	f7ff ff38 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2154      	movs	r1, #84	; 0x54
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cf8:	187a      	adds	r2, r7, r1
 8000cfa:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f003 fd90 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d08:	f7ff ff24 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0c:	2138      	movs	r1, #56	; 0x38
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2260      	movs	r2, #96	; 0x60
 8000d12:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d38:	1879      	adds	r1, r7, r1
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f002 ffc8 	bl	8003cd4 <HAL_TIM_PWM_ConfigChannel>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000d48:	f7ff ff04 	bl	8000b54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	0192      	lsls	r2, r2, #6
 8000d70:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	0492      	lsls	r2, r2, #18
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d9e:	1d3a      	adds	r2, r7, #4
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f003 fda5 	bl	80048f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000dae:	f7ff fed1 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <MX_TIM1_Init+0x18c>)
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 f92f 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b01c      	add	sp, #112	; 0x70
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	200000e8 	.word	0x200000e8
 8000dc8:	40012c00 	.word	0x40012c00

08000dcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	2328      	movs	r3, #40	; 0x28
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2310      	movs	r3, #16
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f005 f857 	bl	8005e90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	231c      	movs	r3, #28
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	0018      	movs	r0, r3
 8000de8:	230c      	movs	r3, #12
 8000dea:	001a      	movs	r2, r3
 8000dec:	2100      	movs	r1, #0
 8000dee:	f005 f84f 	bl	8005e90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df2:	003b      	movs	r3, r7
 8000df4:	0018      	movs	r0, r3
 8000df6:	231c      	movs	r3, #28
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f005 f848 	bl	8005e90 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e00:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	05d2      	lsls	r2, r2, #23
 8000e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256-1;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e16:	22ff      	movs	r2, #255	; 0xff
 8000e18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 fdbd 	bl	80039a8 <HAL_TIM_Base_Init>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e32:	f7ff fe8f 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	2128      	movs	r1, #40	; 0x28
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	0152      	lsls	r2, r2, #5
 8000e3e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e40:	187a      	adds	r2, r7, r1
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f003 f844 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e50:	f7ff fe80 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f002 fdfe 	bl	8003a58 <HAL_TIM_PWM_Init>
 8000e5c:	1e03      	subs	r3, r0, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e60:	f7ff fe78 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	211c      	movs	r1, #28
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e72:	187a      	adds	r2, r7, r1
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f003 fcd3 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000e82:	f7ff fe67 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2260      	movs	r2, #96	; 0x60
 8000e8a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9e:	0039      	movs	r1, r7
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f002 ff15 	bl	8003cd4 <HAL_TIM_PWM_ConfigChannel>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000eae:	f7ff fe51 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <MX_TIM2_Init+0xf8>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 f8af 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b00e      	add	sp, #56	; 0x38
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000134 	.word	0x20000134

08000ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b08f      	sub	sp, #60	; 0x3c
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed0:	2410      	movs	r4, #16
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	2328      	movs	r3, #40	; 0x28
 8000ed8:	001a      	movs	r2, r3
 8000eda:	2100      	movs	r1, #0
 8000edc:	f004 ffd8 	bl	8005e90 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a46      	ldr	r2, [pc, #280]	; (8001000 <HAL_TIM_Base_MspInit+0x138>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d148      	bne.n	8000f7c <HAL_TIM_Base_MspInit+0xb4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	0392      	lsls	r2, r2, #14
 8000ef0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	0018      	movs	r0, r3
 8000efc:	f002 fbda 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000f04:	f7ff fe26 	bl	8000b54 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f08:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <HAL_TIM_Base_MspInit+0x13c>)
 8000f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0c:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <HAL_TIM_Base_MspInit+0x13c>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0109      	lsls	r1, r1, #4
 8000f12:	430a      	orrs	r2, r1
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <HAL_TIM_Base_MspInit+0x13c>)
 8000f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000f24:	4b38      	ldr	r3, [pc, #224]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <HAL_TIM_Base_MspInit+0x144>)
 8000f28:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f2c:	2214      	movs	r2, #20
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f30:	4b35      	ldr	r3, [pc, #212]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f32:	2210      	movs	r2, #16
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f3c:	4b32      	ldr	r3, [pc, #200]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	0052      	lsls	r2, r2, #1
 8000f48:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	00d2      	lsls	r2, r2, #3
 8000f50:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 f9f7 	bl	8002354 <HAL_DMA_Init>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_TIM_Base_MspInit+0xa6>
    {
      Error_Handler();
 8000f6a:	f7ff fdf3 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <HAL_TIM_Base_MspInit+0x140>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f7a:	e03c      	b.n	8000ff6 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d136      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_TIM_Base_MspInit+0x13c>)
 8000f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_TIM_Base_MspInit+0x13c>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_TIM_Base_MspInit+0x13c>)
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel3;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_TIM_Base_MspInit+0x14c>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fa8:	221a      	movs	r2, #26
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fae:	2210      	movs	r2, #16
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	0052      	lsls	r2, r2, #1
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	00d2      	lsls	r2, r2, #3
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f001 f9b9 	bl	8002354 <HAL_DMA_Init>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_TIM_Base_MspInit+0x122>
      Error_Handler();
 8000fe6:	f7ff fdb5 	bl	8000b54 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_TIM_Base_MspInit+0x148>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b00f      	add	sp, #60	; 0x3c
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	40012c00 	.word	0x40012c00
 8001004:	40021000 	.word	0x40021000
 8001008:	20000180 	.word	0x20000180
 800100c:	4002001c 	.word	0x4002001c
 8001010:	200001dc 	.word	0x200001dc
 8001014:	40020030 	.word	0x40020030

08001018 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b08b      	sub	sp, #44	; 0x2c
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	2414      	movs	r4, #20
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0018      	movs	r0, r3
 8001026:	2314      	movs	r3, #20
 8001028:	001a      	movs	r2, r3
 800102a:	2100      	movs	r1, #0
 800102c:	f004 ff30 	bl	8005e90 <memset>
  if(timHandle->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <HAL_TIM_MspPostInit+0xc8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d124      	bne.n	8001084 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_TIM_MspPostInit+0xcc>)
 800103c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <HAL_TIM_MspPostInit+0xcc>)
 8001040:	2101      	movs	r1, #1
 8001042:	430a      	orrs	r2, r1
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <HAL_TIM_MspPostInit+0xcc>)
 8001048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104a:	2201      	movs	r2, #1
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_PWM_CO_Pin;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	0021      	movs	r1, r4
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2202      	movs	r2, #2
 8001060:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2202      	movs	r2, #2
 8001072:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_CH1_PWM_CO_GPIO_Port, &GPIO_InitStruct);
 8001074:	187a      	adds	r2, r7, r1
 8001076:	23a0      	movs	r3, #160	; 0xa0
 8001078:	05db      	lsls	r3, r3, #23
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f001 fc87 	bl	8002990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001082:	e028      	b.n	80010d6 <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	429a      	cmp	r2, r3
 800108e:	d122      	bne.n	80010d6 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_TIM_MspPostInit+0xcc>)
 8001092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_TIM_MspPostInit+0xcc>)
 8001096:	2101      	movs	r1, #1
 8001098:	430a      	orrs	r2, r1
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_TIM_MspPostInit+0xcc>)
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	2201      	movs	r2, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM2_CH1_PWM_NO_Pin;
 80010a8:	2114      	movs	r1, #20
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2220      	movs	r2, #32
 80010ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2202      	movs	r2, #2
 80010b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2202      	movs	r2, #2
 80010c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM2_CH1_PWM_NO_GPIO_Port, &GPIO_InitStruct);
 80010c8:	187a      	adds	r2, r7, r1
 80010ca:	23a0      	movs	r3, #160	; 0xa0
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f001 fc5d 	bl	8002990 <HAL_GPIO_Init>
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b00b      	add	sp, #44	; 0x2c
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	40012c00 	.word	0x40012c00
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <MX_USART1_UART_Init+0x98>)
 80010ee:	4a25      	ldr	r2, [pc, #148]	; (8001184 <MX_USART1_UART_Init+0x9c>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <MX_USART1_UART_Init+0x98>)
 80010f4:	22e1      	movs	r2, #225	; 0xe1
 80010f6:	0252      	lsls	r2, r2, #9
 80010f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_USART1_UART_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_USART1_UART_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_USART1_UART_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_USART1_UART_Init+0x98>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_USART1_UART_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_USART1_UART_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_USART1_UART_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_USART1_UART_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_USART1_UART_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001130:	4813      	ldr	r0, [pc, #76]	; (8001180 <MX_USART1_UART_Init+0x98>)
 8001132:	2300      	movs	r3, #0
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	f004 fd06 	bl	8005b48 <HAL_RS485Ex_Init>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d001      	beq.n	8001144 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001140:	f7ff fd08 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART1_UART_Init+0x98>)
 8001146:	2100      	movs	r1, #0
 8001148:	0018      	movs	r0, r3
 800114a:	f004 fdc1 	bl	8005cd0 <HAL_UARTEx_SetTxFifoThreshold>
 800114e:	1e03      	subs	r3, r0, #0
 8001150:	d001      	beq.n	8001156 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001152:	f7ff fcff 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_USART1_UART_Init+0x98>)
 8001158:	2100      	movs	r1, #0
 800115a:	0018      	movs	r0, r3
 800115c:	f004 fdf8 	bl	8005d50 <HAL_UARTEx_SetRxFifoThreshold>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d001      	beq.n	8001168 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001164:	f7ff fcf6 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <MX_USART1_UART_Init+0x98>)
 800116a:	0018      	movs	r0, r3
 800116c:	f004 fd76 	bl	8005c5c <HAL_UARTEx_DisableFifoMode>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001174:	f7ff fcee 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000238 	.word	0x20000238
 8001184:	40013800 	.word	0x40013800

08001188 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <MX_USART2_UART_Init+0x64>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 8001194:	22e1      	movs	r2, #225	; 0xe1
 8001196:	0252      	lsls	r2, r2, #9
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <MX_USART2_UART_Init+0x60>)
 80011d2:	0018      	movs	r0, r3
 80011d4:	f003 fc34 	bl	8004a40 <HAL_UART_Init>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011dc:	f7ff fcba 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	200002cc 	.word	0x200002cc
 80011ec:	40004400 	.word	0x40004400

080011f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b097      	sub	sp, #92	; 0x5c
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	2344      	movs	r3, #68	; 0x44
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	0018      	movs	r0, r3
 80011fe:	2314      	movs	r3, #20
 8001200:	001a      	movs	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	f004 fe44 	bl	8005e90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	241c      	movs	r4, #28
 800120a:	193b      	adds	r3, r7, r4
 800120c:	0018      	movs	r0, r3
 800120e:	2328      	movs	r3, #40	; 0x28
 8001210:	001a      	movs	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	f004 fe3c 	bl	8005e90 <memset>
  if(uartHandle->Instance==USART1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a42      	ldr	r2, [pc, #264]	; (8001328 <HAL_UART_MspInit+0x138>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d148      	bne.n	80012b4 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001222:	193b      	adds	r3, r7, r4
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001228:	193b      	adds	r3, r7, r4
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122e:	193b      	adds	r3, r7, r4
 8001230:	0018      	movs	r0, r3
 8001232:	f002 fa3f 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	1e03      	subs	r3, r0, #0
 8001238:	d001      	beq.n	800123e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800123a:	f7ff fc8b 	bl	8000b54 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HAL_UART_MspInit+0x13c>)
 8001240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HAL_UART_MspInit+0x13c>)
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	01c9      	lsls	r1, r1, #7
 8001248:	430a      	orrs	r2, r1
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
 800124c:	4b37      	ldr	r3, [pc, #220]	; (800132c <HAL_UART_MspInit+0x13c>)
 800124e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	01db      	lsls	r3, r3, #7
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_UART_MspInit+0x13c>)
 800125c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <HAL_UART_MspInit+0x13c>)
 8001260:	2101      	movs	r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <HAL_UART_MspInit+0x13c>)
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	2201      	movs	r2, #1
 800126c:	4013      	ands	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001272:	2144      	movs	r1, #68	; 0x44
 8001274:	187b      	adds	r3, r7, r1
 8001276:	22b0      	movs	r2, #176	; 0xb0
 8001278:	0152      	lsls	r2, r2, #5
 800127a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2202      	movs	r2, #2
 8001280:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2201      	movs	r2, #1
 8001292:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	187a      	adds	r2, r7, r1
 8001296:	23a0      	movs	r3, #160	; 0xa0
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	0011      	movs	r1, r2
 800129c:	0018      	movs	r0, r3
 800129e:	f001 fb77 	bl	8002990 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	201b      	movs	r0, #27
 80012a8:	f001 f822 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012ac:	201b      	movs	r0, #27
 80012ae:	f001 f834 	bl	800231a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012b2:	e035      	b.n	8001320 <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_UART_MspInit+0x140>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d130      	bne.n	8001320 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_UART_MspInit+0x13c>)
 80012c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_UART_MspInit+0x13c>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0289      	lsls	r1, r1, #10
 80012c8:	430a      	orrs	r2, r1
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0x13c>)
 80012ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0x13c>)
 80012dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_UART_MspInit+0x13c>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0x13c>)
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ea:	2201      	movs	r2, #1
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80012f2:	2144      	movs	r1, #68	; 0x44
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2202      	movs	r2, #2
 80012fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2201      	movs	r2, #1
 8001304:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2201      	movs	r2, #1
 8001310:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	187a      	adds	r2, r7, r1
 8001314:	23a0      	movs	r3, #160	; 0xa0
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f001 fb38 	bl	8002990 <HAL_GPIO_Init>
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b017      	add	sp, #92	; 0x5c
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	40013800 	.word	0x40013800
 800132c:	40021000 	.word	0x40021000
 8001330:	40004400 	.word	0x40004400

08001334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001336:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001338:	f7ff fc78 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopForever+0x6>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	; (8001374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <LoopForever+0xe>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <LoopForever+0x16>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001362:	f004 fd9d 	bl	8005ea0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001366:	f7ff fb63 	bl	8000a30 <main>

0800136a <LoopForever>:

LoopForever:
  b LoopForever
 800136a:	e7fe      	b.n	800136a <LoopForever>
  ldr   r0, =_estack
 800136c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001378:	08005fec 	.word	0x08005fec
  ldr r2, =_sbss
 800137c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001380:	20000364 	.word	0x20000364

08001384 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC1_IRQHandler>
	...

08001388 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x3c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Init+0x3c>)
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	0049      	lsls	r1, r1, #1
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 f810 	bl	80013c8 <HAL_InitTick>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	e001      	b.n	80013b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fbd4 	bl	8000b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d0:	230f      	movs	r3, #15
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_InitTick+0x88>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02b      	beq.n	8001438 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_InitTick+0x8c>)
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_InitTick+0x88>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	0019      	movs	r1, r3
 80013ea:	23fa      	movs	r3, #250	; 0xfa
 80013ec:	0098      	lsls	r0, r3, #2
 80013ee:	f7fe fe89 	bl	8000104 <__udivsi3>
 80013f2:	0003      	movs	r3, r0
 80013f4:	0019      	movs	r1, r3
 80013f6:	0020      	movs	r0, r4
 80013f8:	f7fe fe84 	bl	8000104 <__udivsi3>
 80013fc:	0003      	movs	r3, r0
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 ff9b 	bl	800233a <HAL_SYSTICK_Config>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d112      	bne.n	800142e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d80a      	bhi.n	8001424 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2301      	movs	r3, #1
 8001412:	425b      	negs	r3, r3
 8001414:	2200      	movs	r2, #0
 8001416:	0018      	movs	r0, r3
 8001418:	f000 ff6a 	bl	80022f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_InitTick+0x90>)
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e00d      	b.n	8001440 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001424:	230f      	movs	r3, #15
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e008      	b.n	8001440 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800142e:	230f      	movs	r3, #15
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e003      	b.n	8001440 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001438:	230f      	movs	r3, #15
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001440:	230f      	movs	r3, #15
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	781b      	ldrb	r3, [r3, #0]
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b005      	add	sp, #20
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	20000008 	.word	0x20000008
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x1c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	001a      	movs	r2, r3
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x20>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	18d2      	adds	r2, r2, r3
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_IncTick+0x20>)
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	20000008 	.word	0x20000008
 800147c:	20000360 	.word	0x20000360

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <HAL_GetTick+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	20000360 	.word	0x20000360

08001494 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80014a4:	401a      	ands	r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	fe3fffff 	.word	0xfe3fffff

080014bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	23e0      	movs	r3, #224	; 0xe0
 80014ca:	045b      	lsls	r3, r3, #17
 80014cc:	4013      	ands	r3, r2
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	2104      	movs	r1, #4
 80014ea:	400a      	ands	r2, r1
 80014ec:	2107      	movs	r1, #7
 80014ee:	4091      	lsls	r1, r2
 80014f0:	000a      	movs	r2, r1
 80014f2:	43d2      	mvns	r2, r2
 80014f4:	401a      	ands	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2104      	movs	r1, #4
 80014fa:	400b      	ands	r3, r1
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4099      	lsls	r1, r3
 8001500:	000b      	movs	r3, r1
 8001502:	431a      	orrs	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b004      	add	sp, #16
 800150e:	bd80      	pop	{r7, pc}

08001510 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	2104      	movs	r1, #4
 8001522:	400a      	ands	r2, r1
 8001524:	2107      	movs	r1, #7
 8001526:	4091      	lsls	r1, r2
 8001528:	000a      	movs	r2, r1
 800152a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2104      	movs	r1, #4
 8001530:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001532:	40da      	lsrs	r2, r3
 8001534:	0013      	movs	r3, r2
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}

0800153e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	23c0      	movs	r3, #192	; 0xc0
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4013      	ands	r3, r2
 8001550:	d101      	bne.n	8001556 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001556:	2300      	movs	r3, #0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	211f      	movs	r1, #31
 8001574:	400a      	ands	r2, r1
 8001576:	210f      	movs	r1, #15
 8001578:	4091      	lsls	r1, r2
 800157a:	000a      	movs	r2, r1
 800157c:	43d2      	mvns	r2, r2
 800157e:	401a      	ands	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	0e9b      	lsrs	r3, r3, #26
 8001584:	210f      	movs	r1, #15
 8001586:	4019      	ands	r1, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	201f      	movs	r0, #31
 800158c:	4003      	ands	r3, r0
 800158e:	4099      	lsls	r1, r3
 8001590:	000b      	movs	r3, r1
 8001592:	431a      	orrs	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b004      	add	sp, #16
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	035b      	lsls	r3, r3, #13
 80015b2:	0b5b      	lsrs	r3, r3, #13
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	0352      	lsls	r2, r2, #13
 80015d4:	0b52      	lsrs	r2, r2, #13
 80015d6:	43d2      	mvns	r2, r2
 80015d8:	401a      	ands	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	0212      	lsls	r2, r2, #8
 80015fc:	43d2      	mvns	r2, r2
 80015fe:	401a      	ands	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	400b      	ands	r3, r1
 8001608:	4904      	ldr	r1, [pc, #16]	; (800161c <LL_ADC_SetChannelSamplingTime+0x34>)
 800160a:	400b      	ands	r3, r1
 800160c:	431a      	orrs	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	07ffff00 	.word	0x07ffff00

08001620 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <LL_ADC_EnableInternalRegulator+0x24>)
 800162e:	4013      	ands	r3, r2
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	0552      	lsls	r2, r2, #21
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	6fffffe8 	.word	0x6fffffe8

08001648 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	055b      	lsls	r3, r3, #21
 8001658:	401a      	ands	r2, r3
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	055b      	lsls	r3, r3, #21
 800165e:	429a      	cmp	r2, r3
 8001660:	d101      	bne.n	8001666 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001666:	2300      	movs	r3, #0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}

08001670 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <LL_ADC_Enable+0x20>)
 800167e:	4013      	ands	r3, r2
 8001680:	2201      	movs	r2, #1
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}
 8001690:	7fffffe8 	.word	0x7fffffe8

08001694 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <LL_ADC_Disable+0x20>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	2202      	movs	r2, #2
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b002      	add	sp, #8
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	7fffffe8 	.word	0x7fffffe8

080016b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2201      	movs	r2, #1
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <LL_ADC_IsEnabled+0x18>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <LL_ADC_IsEnabled+0x1a>
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <LL_ADC_REG_StartConversion+0x20>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	2204      	movs	r2, #4
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	7fffffe8 	.word	0x7fffffe8

08001700 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2204      	movs	r2, #4
 800170e:	4013      	ands	r3, r2
 8001710:	2b04      	cmp	r3, #4
 8001712:	d101      	bne.n	8001718 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	231f      	movs	r3, #31
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e17f      	b.n	8001a4a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10a      	bne.n	8001768 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff f835 	bl	80007c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2254      	movs	r2, #84	; 0x54
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0018      	movs	r0, r3
 800176e:	f7ff ff6b 	bl	8001648 <LL_ADC_IsInternalRegulatorEnabled>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d115      	bne.n	80017a2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff ff50 	bl	8001620 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001780:	4bb4      	ldr	r3, [pc, #720]	; (8001a54 <HAL_ADC_Init+0x330>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	49b4      	ldr	r1, [pc, #720]	; (8001a58 <HAL_ADC_Init+0x334>)
 8001786:	0018      	movs	r0, r3
 8001788:	f7fe fcbc 	bl	8000104 <__udivsi3>
 800178c:	0003      	movs	r3, r0
 800178e:	3301      	adds	r3, #1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001794:	e002      	b.n	800179c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b01      	subs	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7ff ff4e 	bl	8001648 <LL_ADC_IsInternalRegulatorEnabled>
 80017ac:	1e03      	subs	r3, r0, #0
 80017ae:	d10f      	bne.n	80017d0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	2210      	movs	r2, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	2201      	movs	r2, #1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017c8:	231f      	movs	r3, #31
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7ff ff93 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 80017da:	0003      	movs	r3, r0
 80017dc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	2210      	movs	r2, #16
 80017e4:	4013      	ands	r3, r2
 80017e6:	d000      	beq.n	80017ea <HAL_ADC_Init+0xc6>
 80017e8:	e122      	b.n	8001a30 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d000      	beq.n	80017f2 <HAL_ADC_Init+0xce>
 80017f0:	e11e      	b.n	8001a30 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a99      	ldr	r2, [pc, #612]	; (8001a5c <HAL_ADC_Init+0x338>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	2202      	movs	r2, #2
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff ff56 	bl	80016b8 <LL_ADC_IsEnabled>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d000      	beq.n	8001812 <HAL_ADC_Init+0xee>
 8001810:	e0ad      	b.n	800196e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7e1b      	ldrb	r3, [r3, #24]
 800181a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800181c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7e5b      	ldrb	r3, [r3, #25]
 8001822:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001824:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7e9b      	ldrb	r3, [r3, #26]
 800182a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800182c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_ADC_Init+0x118>
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	015b      	lsls	r3, r3, #5
 800183a:	e000      	b.n	800183e <HAL_ADC_Init+0x11a>
 800183c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800183e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001844:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da04      	bge.n	8001858 <HAL_ADC_Init+0x134>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	e001      	b.n	800185c <HAL_ADC_Init+0x138>
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800185c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	212c      	movs	r1, #44	; 0x2c
 8001862:	5c5b      	ldrb	r3, [r3, r1]
 8001864:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001866:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2220      	movs	r2, #32
 8001872:	5c9b      	ldrb	r3, [r3, r2]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d115      	bne.n	80018a4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7e9b      	ldrb	r3, [r3, #26]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	0252      	lsls	r2, r2, #9
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	e00b      	b.n	80018a4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	2220      	movs	r2, #32
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	2201      	movs	r2, #1
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00a      	beq.n	80018c2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b0:	23e0      	movs	r3, #224	; 0xe0
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80018ba:	4313      	orrs	r3, r2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a65      	ldr	r2, [pc, #404]	; (8001a60 <HAL_ADC_Init+0x33c>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	0f9b      	lsrs	r3, r3, #30
 80018de:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018e4:	4313      	orrs	r3, r2
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	223c      	movs	r2, #60	; 0x3c
 80018f0:	5c9b      	ldrb	r3, [r3, r2]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d111      	bne.n	800191a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	0f9b      	lsrs	r3, r3, #30
 80018fc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001902:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001908:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800190e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	2201      	movs	r2, #1
 8001916:	4313      	orrs	r3, r2
 8001918:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	4a50      	ldr	r2, [pc, #320]	; (8001a64 <HAL_ADC_Init+0x340>)
 8001922:	4013      	ands	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	430a      	orrs	r2, r1
 800192e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	061b      	lsls	r3, r3, #24
 8001938:	429a      	cmp	r2, r3
 800193a:	d018      	beq.n	800196e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	05db      	lsls	r3, r3, #23
 8001944:	429a      	cmp	r2, r3
 8001946:	d012      	beq.n	800196e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	061b      	lsls	r3, r3, #24
 8001950:	429a      	cmp	r2, r3
 8001952:	d00c      	beq.n	800196e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001954:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_ADC_Init+0x344>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a44      	ldr	r2, [pc, #272]	; (8001a6c <HAL_ADC_Init+0x348>)
 800195a:	4013      	ands	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	23f0      	movs	r3, #240	; 0xf0
 8001964:	039b      	lsls	r3, r3, #14
 8001966:	401a      	ands	r2, r3
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_ADC_Init+0x344>)
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001976:	001a      	movs	r2, r3
 8001978:	2100      	movs	r1, #0
 800197a:	f7ff fdac 	bl	80014d6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001986:	493a      	ldr	r1, [pc, #232]	; (8001a70 <HAL_ADC_Init+0x34c>)
 8001988:	001a      	movs	r2, r3
 800198a:	f7ff fda4 	bl	80014d6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2110      	movs	r1, #16
 80019a2:	4249      	negs	r1, r1
 80019a4:	430a      	orrs	r2, r1
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
 80019a8:	e018      	b.n	80019dc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	039b      	lsls	r3, r3, #14
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d112      	bne.n	80019dc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	221c      	movs	r2, #28
 80019c6:	4013      	ands	r3, r2
 80019c8:	2210      	movs	r2, #16
 80019ca:	4252      	negs	r2, r2
 80019cc:	409a      	lsls	r2, r3
 80019ce:	0011      	movs	r1, r2
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2100      	movs	r1, #0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff fd94 	bl	8001510 <LL_ADC_GetSamplingTimeCommonChannels>
 80019e8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10b      	bne.n	8001a0a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	2203      	movs	r2, #3
 80019fe:	4393      	bics	r3, r2
 8001a00:	2201      	movs	r2, #1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a08:	e01c      	b.n	8001a44 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	2212      	movs	r2, #18
 8001a10:	4393      	bics	r3, r2
 8001a12:	2210      	movs	r2, #16
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2201      	movs	r2, #1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001a26:	231f      	movs	r3, #31
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a2e:	e009      	b.n	8001a44 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	2210      	movs	r2, #16
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a3c:	231f      	movs	r3, #31
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a44:	231f      	movs	r3, #31
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781b      	ldrb	r3, [r3, #0]
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b008      	add	sp, #32
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	20000000 	.word	0x20000000
 8001a58:	00030d40 	.word	0x00030d40
 8001a5c:	fffffefd 	.word	0xfffffefd
 8001a60:	fffe0201 	.word	0xfffe0201
 8001a64:	1ffffc02 	.word	0x1ffffc02
 8001a68:	40012708 	.word	0x40012708
 8001a6c:	ffc3ffff 	.word	0xffc3ffff
 8001a70:	07ffff04 	.word	0x07ffff04

08001a74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a74:	b5b0      	push	{r4, r5, r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fe3b 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d16c      	bne.n	8001b68 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2254      	movs	r2, #84	; 0x54
 8001a92:	5c9b      	ldrb	r3, [r3, r2]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_Start_DMA+0x28>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e06c      	b.n	8001b76 <HAL_ADC_Start_DMA+0x102>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2254      	movs	r2, #84	; 0x54
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d113      	bne.n	8001ad8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fdff 	bl	80016b8 <LL_ADC_IsEnabled>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff fde6 	bl	8001694 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ad8:	2517      	movs	r5, #23
 8001ada:	197c      	adds	r4, r7, r5
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 fa46 	bl	8001f70 <ADC_Enable>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ae8:	002c      	movs	r4, r5
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d13e      	bne.n	8001b70 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_ADC_Start_DMA+0x10c>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	0052      	lsls	r2, r2, #1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_ADC_Start_DMA+0x110>)
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_ADC_Start_DMA+0x114>)
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_ADC_Start_DMA+0x118>)
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	221c      	movs	r2, #28
 8001b28:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2254      	movs	r2, #84	; 0x54
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3340      	adds	r3, #64	; 0x40
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	193c      	adds	r4, r7, r4
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f000 fc88 	bl	8002468 <HAL_DMA_Start_IT>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff fdbb 	bl	80016dc <LL_ADC_REG_StartConversion>
 8001b66:	e003      	b.n	8001b70 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b68:	2317      	movs	r3, #23
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001b70:	2317      	movs	r3, #23
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b006      	add	sp, #24
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	fffff0fe 	.word	0xfffff0fe
 8001b84:	0800207d 	.word	0x0800207d
 8001b88:	08002145 	.word	0x08002145
 8001b8c:	08002163 	.word	0x08002163

08001b90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bca:	2317      	movs	r3, #23
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2254      	movs	r2, #84	; 0x54
 8001bda:	5c9b      	ldrb	r3, [r3, r2]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x24>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e1c0      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x3a6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2254      	movs	r2, #84	; 0x54
 8001be8:	2101      	movs	r1, #1
 8001bea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff fd85 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 8001bf6:	1e03      	subs	r3, r0, #0
 8001bf8:	d000      	beq.n	8001bfc <HAL_ADC_ConfigChannel+0x3c>
 8001bfa:	e1a3      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d100      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x46>
 8001c04:	e143      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c16:	4ac1      	ldr	r2, [pc, #772]	; (8001f1c <HAL_ADC_ConfigChannel+0x35c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d108      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f7ff fcba 	bl	80015a0 <LL_ADC_REG_SetSequencerChAdd>
 8001c2c:	e0c9      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	211f      	movs	r1, #31
 8001c38:	400b      	ands	r3, r1
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	4099      	lsls	r1, r3
 8001c3e:	000b      	movs	r3, r1
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	035b      	lsls	r3, r3, #13
 8001c4c:	0b5b      	lsrs	r3, r3, #13
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x9c>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	221f      	movs	r2, #31
 8001c58:	4013      	ands	r3, r2
 8001c5a:	e098      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	d000      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0xa8>
 8001c66:	e091      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x1cc>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d000      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0xb4>
 8001c72:	e089      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x1c8>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d000      	beq.n	8001c80 <HAL_ADC_ConfigChannel+0xc0>
 8001c7e:	e081      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x1c4>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	4013      	ands	r3, r2
 8001c88:	d000      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0xcc>
 8001c8a:	e079      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x1c0>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2210      	movs	r2, #16
 8001c92:	4013      	ands	r3, r2
 8001c94:	d000      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0xd8>
 8001c96:	e071      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1bc>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d000      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0xe4>
 8001ca2:	e069      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x1b8>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	4013      	ands	r3, r2
 8001cac:	d000      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0xf0>
 8001cae:	e061      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x1b4>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d000      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0xfc>
 8001cba:	e059      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x1b0>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d151      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1ac>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d149      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x1a8>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d141      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1a4>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d139      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1a0>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	015b      	lsls	r3, r3, #5
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d131      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x19c>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	019b      	lsls	r3, r3, #6
 8001d00:	4013      	ands	r3, r2
 8001d02:	d129      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x198>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	01db      	lsls	r3, r3, #7
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d121      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x194>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d119      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x190>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	025b      	lsls	r3, r3, #9
 8001d24:	4013      	ands	r3, r2
 8001d26:	d111      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x18c>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	d109      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x188>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	02db      	lsls	r3, r3, #11
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d001      	beq.n	8001d44 <HAL_ADC_ConfigChannel+0x184>
 8001d40:	2312      	movs	r3, #18
 8001d42:	e024      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d44:	2300      	movs	r3, #0
 8001d46:	e022      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d48:	2311      	movs	r3, #17
 8001d4a:	e020      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	2310      	movs	r3, #16
 8001d4e:	e01e      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d50:	230f      	movs	r3, #15
 8001d52:	e01c      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d54:	230e      	movs	r3, #14
 8001d56:	e01a      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d58:	230d      	movs	r3, #13
 8001d5a:	e018      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	e016      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d60:	230b      	movs	r3, #11
 8001d62:	e014      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d64:	230a      	movs	r3, #10
 8001d66:	e012      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	2309      	movs	r3, #9
 8001d6a:	e010      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	e00e      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d70:	2307      	movs	r3, #7
 8001d72:	e00c      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d74:	2306      	movs	r3, #6
 8001d76:	e00a      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	2305      	movs	r3, #5
 8001d7a:	e008      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	e006      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d80:	2303      	movs	r3, #3
 8001d82:	e004      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1ce>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	6852      	ldr	r2, [r2, #4]
 8001d92:	201f      	movs	r0, #31
 8001d94:	4002      	ands	r2, r0
 8001d96:	4093      	lsls	r3, r2
 8001d98:	000a      	movs	r2, r1
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d808      	bhi.n	8001dc2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	f7ff fbcf 	bl	8001560 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	f7ff fc0a 	bl	80015e8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db00      	blt.n	8001dde <HAL_ADC_ConfigChannel+0x21e>
 8001ddc:	e0bc      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dde:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_ADC_ConfigChannel+0x360>)
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7ff fb6b 	bl	80014bc <LL_ADC_GetCommonPathInternalCh>
 8001de6:	0003      	movs	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a4d      	ldr	r2, [pc, #308]	; (8001f24 <HAL_ADC_ConfigChannel+0x364>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d122      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dfc:	d11d      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	0412      	lsls	r2, r2, #16
 8001e04:	4313      	orrs	r3, r2
 8001e06:	4a46      	ldr	r2, [pc, #280]	; (8001f20 <HAL_ADC_ConfigChannel+0x360>)
 8001e08:	0019      	movs	r1, r3
 8001e0a:	0010      	movs	r0, r2
 8001e0c:	f7ff fb42 	bl	8001494 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <HAL_ADC_ConfigChannel+0x368>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4945      	ldr	r1, [pc, #276]	; (8001f2c <HAL_ADC_ConfigChannel+0x36c>)
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7fe f974 	bl	8000104 <__udivsi3>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	0013      	movs	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	189b      	adds	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e2a:	e002      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f9      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e38:	e08e      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_ADC_ConfigChannel+0x370>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d10e      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	045b      	lsls	r3, r3, #17
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d109      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	0452      	lsls	r2, r2, #17
 8001e54:	4313      	orrs	r3, r2
 8001e56:	4a32      	ldr	r2, [pc, #200]	; (8001f20 <HAL_ADC_ConfigChannel+0x360>)
 8001e58:	0019      	movs	r1, r3
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	f7ff fb1a 	bl	8001494 <LL_ADC_SetCommonPathInternalCh>
 8001e60:	e07a      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a33      	ldr	r2, [pc, #204]	; (8001f34 <HAL_ADC_ConfigChannel+0x374>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d000      	beq.n	8001e6e <HAL_ADC_ConfigChannel+0x2ae>
 8001e6c:	e074      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	03db      	lsls	r3, r3, #15
 8001e74:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e76:	d000      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x2ba>
 8001e78:	e06e      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	03d2      	lsls	r2, r2, #15
 8001e80:	4313      	orrs	r3, r2
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <HAL_ADC_ConfigChannel+0x360>)
 8001e84:	0019      	movs	r1, r3
 8001e86:	0010      	movs	r0, r2
 8001e88:	f7ff fb04 	bl	8001494 <LL_ADC_SetCommonPathInternalCh>
 8001e8c:	e064      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_ADC_ConfigChannel+0x35c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d107      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0019      	movs	r1, r3
 8001eae:	0010      	movs	r0, r2
 8001eb0:	f7ff fb87 	bl	80015c2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da4d      	bge.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_ADC_ConfigChannel+0x360>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff fafc 	bl	80014bc <LL_ADC_GetCommonPathInternalCh>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <HAL_ADC_ConfigChannel+0x364>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d108      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <HAL_ADC_ConfigChannel+0x378>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_ADC_ConfigChannel+0x360>)
 8001eda:	0019      	movs	r1, r3
 8001edc:	0010      	movs	r0, r2
 8001ede:	f7ff fad9 	bl	8001494 <LL_ADC_SetCommonPathInternalCh>
 8001ee2:	e039      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <HAL_ADC_ConfigChannel+0x370>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d108      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <HAL_ADC_ConfigChannel+0x37c>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <HAL_ADC_ConfigChannel+0x360>)
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	0010      	movs	r0, r2
 8001efa:	f7ff facb 	bl	8001494 <LL_ADC_SetCommonPathInternalCh>
 8001efe:	e02b      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_ADC_ConfigChannel+0x374>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d126      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <HAL_ADC_ConfigChannel+0x380>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_ADC_ConfigChannel+0x360>)
 8001f12:	0019      	movs	r1, r3
 8001f14:	0010      	movs	r0, r2
 8001f16:	f7ff fabd 	bl	8001494 <LL_ADC_SetCommonPathInternalCh>
 8001f1a:	e01d      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x398>
 8001f1c:	80000004 	.word	0x80000004
 8001f20:	40012708 	.word	0x40012708
 8001f24:	b0001000 	.word	0xb0001000
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	00030d40 	.word	0x00030d40
 8001f30:	b8004000 	.word	0xb8004000
 8001f34:	b4002000 	.word	0xb4002000
 8001f38:	ff7fffff 	.word	0xff7fffff
 8001f3c:	feffffff 	.word	0xfeffffff
 8001f40:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	2220      	movs	r2, #32
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f50:	2317      	movs	r3, #23
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2254      	movs	r2, #84	; 0x54
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f60:	2317      	movs	r3, #23
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	781b      	ldrb	r3, [r3, #0]
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b006      	add	sp, #24
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)

08001f70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff fb99 	bl	80016b8 <LL_ADC_IsEnabled>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d000      	beq.n	8001f8c <ADC_Enable+0x1c>
 8001f8a:	e069      	b.n	8002060 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4a36      	ldr	r2, [pc, #216]	; (800206c <ADC_Enable+0xfc>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	d00d      	beq.n	8001fb4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	2201      	movs	r2, #1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e056      	b.n	8002062 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff fb59 	bl	8001670 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <ADC_Enable+0x100>)
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff fa7b 	bl	80014bc <LL_ADC_GetCommonPathInternalCh>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d00f      	beq.n	8001ff0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <ADC_Enable+0x104>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4928      	ldr	r1, [pc, #160]	; (8002078 <ADC_Enable+0x108>)
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f7fe f894 	bl	8000104 <__udivsi3>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001fe0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fe2:	e002      	b.n	8001fea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f9      	bne.n	8001fe4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e5b      	ldrb	r3, [r3, #25]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d033      	beq.n	8002060 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fa42 	bl	8001480 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002000:	e027      	b.n	8002052 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff fb56 	bl	80016b8 <LL_ADC_IsEnabled>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d104      	bne.n	800201a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fb2b 	bl	8001670 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800201a:	f7ff fa31 	bl	8001480 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d914      	bls.n	8002052 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	2b01      	cmp	r3, #1
 8002034:	d00d      	beq.n	8002052 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	2210      	movs	r2, #16
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	2201      	movs	r2, #1
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e007      	b.n	8002062 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	2b01      	cmp	r3, #1
 800205e:	d1d0      	bne.n	8002002 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	80000017 	.word	0x80000017
 8002070:	40012708 	.word	0x40012708
 8002074:	20000000 	.word	0x20000000
 8002078:	00030d40 	.word	0x00030d40

0800207c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	2250      	movs	r2, #80	; 0x50
 8002090:	4013      	ands	r3, r2
 8002092:	d141      	bne.n	8002118 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff fa49 	bl	800153e <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d02e      	beq.n	800210e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	7e9b      	ldrb	r3, [r3, #26]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d12a      	bne.n	800210e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2208      	movs	r2, #8
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d123      	bne.n	800210e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff fb18 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d110      	bne.n	80020f6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	210c      	movs	r1, #12
 80020e0:	438a      	bics	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	4a15      	ldr	r2, [pc, #84]	; (8002140 <ADC_DMAConvCplt+0xc4>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	2201      	movs	r2, #1
 80020ee:	431a      	orrs	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58
 80020f4:	e00b      	b.n	800210e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	2220      	movs	r2, #32
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2201      	movs	r2, #1
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff fd3d 	bl	8001b90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002116:	e00f      	b.n	8002138 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	2210      	movs	r2, #16
 800211e:	4013      	ands	r3, r2
 8002120:	d004      	beq.n	800212c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff fd43 	bl	8001bb0 <HAL_ADC_ErrorCallback>
}
 800212a:	e005      	b.n	8002138 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	0010      	movs	r0, r2
 8002136:	4798      	blx	r3
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bd80      	pop	{r7, pc}
 8002140:	fffffefe 	.word	0xfffffefe

08002144 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0018      	movs	r0, r3
 8002156:	f7ff fd23 	bl	8001ba0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b004      	add	sp, #16
 8002160:	bd80      	pop	{r7, pc}

08002162 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	2240      	movs	r2, #64	; 0x40
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	2204      	movs	r2, #4
 8002182:	431a      	orrs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	0018      	movs	r0, r3
 800218c:	f7ff fd10 	bl	8001bb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b004      	add	sp, #16
 8002196:	bd80      	pop	{r7, pc}

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	0002      	movs	r2, r0
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b7f      	cmp	r3, #127	; 0x7f
 80021aa:	d809      	bhi.n	80021c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	001a      	movs	r2, r3
 80021b2:	231f      	movs	r3, #31
 80021b4:	401a      	ands	r2, r3
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_EnableIRQ+0x30>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	4091      	lsls	r1, r2
 80021bc:	000a      	movs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b7f      	cmp	r3, #127	; 0x7f
 80021e0:	d828      	bhi.n	8002234 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e2:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <__NVIC_SetPriority+0xd4>)
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	33c0      	adds	r3, #192	; 0xc0
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	589b      	ldr	r3, [r3, r2]
 80021f2:	1dfa      	adds	r2, r7, #7
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	0011      	movs	r1, r2
 80021f8:	2203      	movs	r2, #3
 80021fa:	400a      	ands	r2, r1
 80021fc:	00d2      	lsls	r2, r2, #3
 80021fe:	21ff      	movs	r1, #255	; 0xff
 8002200:	4091      	lsls	r1, r2
 8002202:	000a      	movs	r2, r1
 8002204:	43d2      	mvns	r2, r2
 8002206:	401a      	ands	r2, r3
 8002208:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	22ff      	movs	r2, #255	; 0xff
 8002210:	401a      	ands	r2, r3
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	0018      	movs	r0, r3
 8002218:	2303      	movs	r3, #3
 800221a:	4003      	ands	r3, r0
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002220:	481f      	ldr	r0, [pc, #124]	; (80022a0 <__NVIC_SetPriority+0xd4>)
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b25b      	sxtb	r3, r3
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	430a      	orrs	r2, r1
 800222c:	33c0      	adds	r3, #192	; 0xc0
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002232:	e031      	b.n	8002298 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <__NVIC_SetPriority+0xd8>)
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	0019      	movs	r1, r3
 800223c:	230f      	movs	r3, #15
 800223e:	400b      	ands	r3, r1
 8002240:	3b08      	subs	r3, #8
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3306      	adds	r3, #6
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	18d3      	adds	r3, r2, r3
 800224a:	3304      	adds	r3, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	1dfa      	adds	r2, r7, #7
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	0011      	movs	r1, r2
 8002254:	2203      	movs	r2, #3
 8002256:	400a      	ands	r2, r1
 8002258:	00d2      	lsls	r2, r2, #3
 800225a:	21ff      	movs	r1, #255	; 0xff
 800225c:	4091      	lsls	r1, r2
 800225e:	000a      	movs	r2, r1
 8002260:	43d2      	mvns	r2, r2
 8002262:	401a      	ands	r2, r3
 8002264:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	019b      	lsls	r3, r3, #6
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	401a      	ands	r2, r3
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	2303      	movs	r3, #3
 8002276:	4003      	ands	r3, r0
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800227c:	4809      	ldr	r0, [pc, #36]	; (80022a4 <__NVIC_SetPriority+0xd8>)
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	001c      	movs	r4, r3
 8002284:	230f      	movs	r3, #15
 8002286:	4023      	ands	r3, r4
 8002288:	3b08      	subs	r3, #8
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	430a      	orrs	r2, r1
 800228e:	3306      	adds	r3, #6
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	18c3      	adds	r3, r0, r3
 8002294:	3304      	adds	r3, #4
 8002296:	601a      	str	r2, [r3, #0]
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b003      	add	sp, #12
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	045b      	lsls	r3, r3, #17
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d301      	bcc.n	80022c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022bc:	2301      	movs	r3, #1
 80022be:	e010      	b.n	80022e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <SysTick_Config+0x44>)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	3a01      	subs	r2, #1
 80022c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c8:	2301      	movs	r3, #1
 80022ca:	425b      	negs	r3, r3
 80022cc:	2103      	movs	r1, #3
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7ff ff7c 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x44>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x44>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b002      	add	sp, #8
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	210f      	movs	r1, #15
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	1c02      	adds	r2, r0, #0
 8002300:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	187b      	adds	r3, r7, r1
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b25b      	sxtb	r3, r3
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff ff5d 	bl	80021cc <__NVIC_SetPriority>
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	0002      	movs	r2, r0
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b25b      	sxtb	r3, r3
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff ff33 	bl	8002198 <__NVIC_EnableIRQ>
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff ffaf 	bl	80022a8 <SysTick_Config>
 800234a:	0003      	movs	r3, r0
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e077      	b.n	8002456 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <HAL_DMA_Init+0x10c>)
 800236c:	4694      	mov	ip, r2
 800236e:	4463      	add	r3, ip
 8002370:	2114      	movs	r1, #20
 8002372:	0018      	movs	r0, r3
 8002374:	f7fd fec6 	bl	8000104 <__udivsi3>
 8002378:	0003      	movs	r3, r0
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2225      	movs	r2, #37	; 0x25
 8002384:	2102      	movs	r1, #2
 8002386:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4934      	ldr	r1, [pc, #208]	; (8002464 <HAL_DMA_Init+0x110>)
 8002394:	400a      	ands	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 fa8d 	bl	80028f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	01db      	lsls	r3, r3, #7
 80023de:	429a      	cmp	r2, r3
 80023e0:	d102      	bne.n	80023e8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	213f      	movs	r1, #63	; 0x3f
 80023f2:	400a      	ands	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d011      	beq.n	800242c <HAL_DMA_Init+0xd8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d80d      	bhi.n	800242c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fa98 	bl	8002948 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	e008      	b.n	800243e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2225      	movs	r2, #37	; 0x25
 8002448:	2101      	movs	r1, #1
 800244a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b002      	add	sp, #8
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	bffdfff8 	.word	0xbffdfff8
 8002464:	ffff800f 	.word	0xffff800f

08002468 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2317      	movs	r3, #23
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2224      	movs	r2, #36	; 0x24
 8002482:	5c9b      	ldrb	r3, [r3, r2]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_DMA_Start_IT+0x24>
 8002488:	2302      	movs	r3, #2
 800248a:	e06f      	b.n	800256c <HAL_DMA_Start_IT+0x104>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	2101      	movs	r1, #1
 8002492:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2225      	movs	r2, #37	; 0x25
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d157      	bne.n	8002550 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2225      	movs	r2, #37	; 0x25
 80024a4:	2102      	movs	r1, #2
 80024a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	438a      	bics	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f9d3 	bl	8002870 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	210e      	movs	r1, #14
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e00f      	b.n	8002504 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2104      	movs	r1, #4
 80024f0:	438a      	bics	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	210a      	movs	r1, #10
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	025b      	lsls	r3, r3, #9
 800250e:	4013      	ands	r3, r2
 8002510:	d008      	beq.n	8002524 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0049      	lsls	r1, r1, #1
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002536:	2180      	movs	r1, #128	; 0x80
 8002538:	0049      	lsls	r1, r1, #1
 800253a:	430a      	orrs	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00a      	b.n	8002566 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2224      	movs	r2, #36	; 0x24
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800255e:	2317      	movs	r3, #23
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002566:	2317      	movs	r3, #23
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	781b      	ldrb	r3, [r3, #0]
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b006      	add	sp, #24
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e050      	b.n	8002628 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2225      	movs	r2, #37	; 0x25
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d008      	beq.n	80025a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	2100      	movs	r1, #0
 800259e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e041      	b.n	8002628 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	210e      	movs	r1, #14
 80025b0:	438a      	bics	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	491c      	ldr	r1, [pc, #112]	; (8002630 <HAL_DMA_Abort+0xbc>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2101      	movs	r1, #1
 80025d0:	438a      	bics	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_DMA_Abort+0xc0>)
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	221c      	movs	r2, #28
 80025de:	4013      	ands	r3, r2
 80025e0:	2201      	movs	r2, #1
 80025e2:	409a      	lsls	r2, r3
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_DMA_Abort+0xc0>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00c      	beq.n	8002616 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	490a      	ldr	r1, [pc, #40]	; (8002630 <HAL_DMA_Abort+0xbc>)
 8002608:	400a      	ands	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002614:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2225      	movs	r2, #37	; 0x25
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2224      	movs	r2, #36	; 0x24
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fffffeff 	.word	0xfffffeff
 8002634:	40020000 	.word	0x40020000

08002638 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	210f      	movs	r1, #15
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2225      	movs	r2, #37	; 0x25
 800264c:	5c9b      	ldrb	r3, [r3, r2]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d006      	beq.n	8002662 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2204      	movs	r2, #4
 8002658:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e049      	b.n	80026f6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	210e      	movs	r1, #14
 800266e:	438a      	bics	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	438a      	bics	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	491d      	ldr	r1, [pc, #116]	; (8002704 <HAL_DMA_Abort_IT+0xcc>)
 800268e:	400a      	ands	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_DMA_Abort_IT+0xd0>)
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	221c      	movs	r2, #28
 800269c:	4013      	ands	r3, r2
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_DMA_Abort_IT+0xd0>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	490f      	ldr	r1, [pc, #60]	; (8002704 <HAL_DMA_Abort_IT+0xcc>)
 80026c6:	400a      	ands	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80026d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2225      	movs	r2, #37	; 0x25
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	2100      	movs	r1, #0
 80026e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	0010      	movs	r0, r2
 80026f4:	4798      	blx	r3
    }
  }
  return status;
 80026f6:	230f      	movs	r3, #15
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}
 8002704:	fffffeff 	.word	0xfffffeff
 8002708:	40020000 	.word	0x40020000

0800270c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002714:	4b55      	ldr	r3, [pc, #340]	; (800286c <HAL_DMA_IRQHandler+0x160>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	221c      	movs	r2, #28
 8002728:	4013      	ands	r3, r2
 800272a:	2204      	movs	r2, #4
 800272c:	409a      	lsls	r2, r3
 800272e:	0013      	movs	r3, r2
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	d027      	beq.n	8002786 <HAL_DMA_IRQHandler+0x7a>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2204      	movs	r2, #4
 800273a:	4013      	ands	r3, r2
 800273c:	d023      	beq.n	8002786 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2220      	movs	r2, #32
 8002746:	4013      	ands	r3, r2
 8002748:	d107      	bne.n	800275a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2104      	movs	r1, #4
 8002756:	438a      	bics	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <HAL_DMA_IRQHandler+0x160>)
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	221c      	movs	r2, #28
 8002764:	4013      	ands	r3, r2
 8002766:	2204      	movs	r2, #4
 8002768:	409a      	lsls	r2, r3
 800276a:	4b40      	ldr	r3, [pc, #256]	; (800286c <HAL_DMA_IRQHandler+0x160>)
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	2b00      	cmp	r3, #0
 8002776:	d100      	bne.n	800277a <HAL_DMA_IRQHandler+0x6e>
 8002778:	e073      	b.n	8002862 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	0010      	movs	r0, r2
 8002782:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002784:	e06d      	b.n	8002862 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	221c      	movs	r2, #28
 800278c:	4013      	ands	r3, r2
 800278e:	2202      	movs	r2, #2
 8002790:	409a      	lsls	r2, r3
 8002792:	0013      	movs	r3, r2
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	d02e      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xec>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d02a      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2220      	movs	r2, #32
 80027aa:	4013      	ands	r3, r2
 80027ac:	d10b      	bne.n	80027c6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	210a      	movs	r1, #10
 80027ba:	438a      	bics	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2225      	movs	r2, #37	; 0x25
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_DMA_IRQHandler+0x160>)
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	221c      	movs	r2, #28
 80027d0:	4013      	ands	r3, r2
 80027d2:	2202      	movs	r2, #2
 80027d4:	409a      	lsls	r2, r3
 80027d6:	4b25      	ldr	r3, [pc, #148]	; (800286c <HAL_DMA_IRQHandler+0x160>)
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d03a      	beq.n	8002862 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	0010      	movs	r0, r2
 80027f4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80027f6:	e034      	b.n	8002862 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	221c      	movs	r2, #28
 80027fe:	4013      	ands	r3, r2
 8002800:	2208      	movs	r2, #8
 8002802:	409a      	lsls	r2, r3
 8002804:	0013      	movs	r3, r2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	d02b      	beq.n	8002864 <HAL_DMA_IRQHandler+0x158>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2208      	movs	r2, #8
 8002810:	4013      	ands	r3, r2
 8002812:	d027      	beq.n	8002864 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	210e      	movs	r1, #14
 8002820:	438a      	bics	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_DMA_IRQHandler+0x160>)
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	221c      	movs	r2, #28
 800282e:	4013      	ands	r3, r2
 8002830:	2201      	movs	r2, #1
 8002832:	409a      	lsls	r2, r3
 8002834:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_DMA_IRQHandler+0x160>)
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2225      	movs	r2, #37	; 0x25
 8002844:	2101      	movs	r1, #1
 8002846:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	0010      	movs	r0, r2
 8002860:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46c0      	nop			; (mov r8, r8)
}
 8002866:	46bd      	mov	sp, r7
 8002868:	b004      	add	sp, #16
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40020000 	.word	0x40020000

08002870 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002886:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002898:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800289a:	4b14      	ldr	r3, [pc, #80]	; (80028ec <DMA_SetConfig+0x7c>)
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	221c      	movs	r2, #28
 80028a4:	4013      	ands	r3, r2
 80028a6:	2201      	movs	r2, #1
 80028a8:	409a      	lsls	r2, r3
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <DMA_SetConfig+0x7c>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d108      	bne.n	80028d2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028d0:	e007      	b.n	80028e2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	60da      	str	r2, [r3, #12]
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b004      	add	sp, #16
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	40020000 	.word	0x40020000

080028f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002900:	4694      	mov	ip, r2
 8002902:	4463      	add	r3, ip
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	001a      	movs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	001a      	movs	r2, r3
 8002912:	23ff      	movs	r3, #255	; 0xff
 8002914:	4013      	ands	r3, r2
 8002916:	3b08      	subs	r3, #8
 8002918:	2114      	movs	r1, #20
 800291a:	0018      	movs	r0, r3
 800291c:	f7fd fbf2 	bl	8000104 <__udivsi3>
 8002920:	0003      	movs	r3, r0
 8002922:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002928:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	221f      	movs	r2, #31
 800292e:	4013      	ands	r3, r2
 8002930:	2201      	movs	r2, #1
 8002932:	409a      	lsls	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	10008200 	.word	0x10008200
 8002944:	40020880 	.word	0x40020880

08002948 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	223f      	movs	r2, #63	; 0x3f
 8002956:	4013      	ands	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800295e:	4694      	mov	ip, r2
 8002960:	4463      	add	r3, ip
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	001a      	movs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800296e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3b01      	subs	r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	4013      	ands	r3, r2
 8002978:	2201      	movs	r2, #1
 800297a:	409a      	lsls	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b004      	add	sp, #16
 8002986:	bd80      	pop	{r7, pc}
 8002988:	1000823f 	.word	0x1000823f
 800298c:	40020940 	.word	0x40020940

08002990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299e:	e147      	b.n	8002c30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4091      	lsls	r1, r2
 80029aa:	000a      	movs	r2, r1
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d100      	bne.n	80029b8 <HAL_GPIO_Init+0x28>
 80029b6:	e138      	b.n	8002c2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	4013      	ands	r3, r2
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d005      	beq.n	80029d0 <HAL_GPIO_Init+0x40>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d130      	bne.n	8002a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	409a      	lsls	r2, r3
 80029de:	0013      	movs	r3, r2
 80029e0:	43da      	mvns	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	409a      	lsls	r2, r3
 80029f2:	0013      	movs	r3, r2
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a06:	2201      	movs	r2, #1
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
 8002a24:	0013      	movs	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2203      	movs	r2, #3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d017      	beq.n	8002a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	2203      	movs	r2, #3
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	0013      	movs	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d123      	bne.n	8002ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	0092      	lsls	r2, r2, #2
 8002a84:	58d3      	ldr	r3, [r2, r3]
 8002a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	409a      	lsls	r2, r3
 8002a94:	0013      	movs	r3, r2
 8002a96:	43da      	mvns	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2107      	movs	r1, #7
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	0013      	movs	r3, r2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	6939      	ldr	r1, [r7, #16]
 8002ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	23c0      	movs	r3, #192	; 0xc0
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	4013      	ands	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_GPIO_Init+0x174>
 8002b02:	e092      	b.n	8002c2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b04:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	3318      	adds	r3, #24
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	589b      	ldr	r3, [r3, r2]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2203      	movs	r2, #3
 8002b16:	4013      	ands	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	0013      	movs	r3, r2
 8002b20:	43da      	mvns	r2, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	23a0      	movs	r3, #160	; 0xa0
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x1ca>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a45      	ldr	r2, [pc, #276]	; (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x1c6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a44      	ldr	r2, [pc, #272]	; (8002c50 <HAL_GPIO_Init+0x2c0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x1c2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a43      	ldr	r2, [pc, #268]	; (8002c54 <HAL_GPIO_Init+0x2c4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x1be>
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x1cc>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e004      	b.n	8002b5c <HAL_GPIO_Init+0x1cc>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_Init+0x1cc>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x1cc>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	2103      	movs	r1, #3
 8002b60:	400a      	ands	r2, r1
 8002b62:	00d2      	lsls	r2, r2, #3
 8002b64:	4093      	lsls	r3, r2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002b6c:	4936      	ldr	r1, [pc, #216]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3318      	adds	r3, #24
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b7a:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43da      	mvns	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	035b      	lsls	r3, r3, #13
 8002b92:	4013      	ands	r3, r2
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002ba4:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	039b      	lsls	r3, r3, #14
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bce:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002bd0:	2384      	movs	r3, #132	; 0x84
 8002bd2:	58d3      	ldr	r3, [r2, r3]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	029b      	lsls	r3, r3, #10
 8002be8:	4013      	ands	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bf4:	4914      	ldr	r1, [pc, #80]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002bf6:	2284      	movs	r2, #132	; 0x84
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002bfc:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	58d3      	ldr	r3, [r2, r3]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43da      	mvns	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	025b      	lsls	r3, r3, #9
 8002c16:	4013      	ands	r3, r2
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c22:	4909      	ldr	r1, [pc, #36]	; (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	40da      	lsrs	r2, r3
 8002c38:	1e13      	subs	r3, r2, #0
 8002c3a:	d000      	beq.n	8002c3e <HAL_GPIO_Init+0x2ae>
 8002c3c:	e6b0      	b.n	80029a0 <HAL_GPIO_Init+0x10>
  }
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b006      	add	sp, #24
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021800 	.word	0x40021800
 8002c4c:	50000400 	.word	0x50000400
 8002c50:	50000800 	.word	0x50000800
 8002c54:	50000c00 	.word	0x50000c00

08002c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	0008      	movs	r0, r1
 8002c62:	0011      	movs	r1, r2
 8002c64:	1cbb      	adds	r3, r7, #2
 8002c66:	1c02      	adds	r2, r0, #0
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	1c7b      	adds	r3, r7, #1
 8002c6c:	1c0a      	adds	r2, r1, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c70:	1c7b      	adds	r3, r7, #1
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c78:	1cbb      	adds	r3, r7, #2
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c82:	1cbb      	adds	r3, r7, #2
 8002c84:	881a      	ldrh	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d11f      	bne.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4912      	ldr	r1, [pc, #72]	; (8002d10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fd fa1c 	bl	8000104 <__udivsi3>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cd2:	e008      	b.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e001      	b.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e009      	b.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d0ed      	beq.n	8002cd4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	40007000 	.word	0x40007000
 8002d08:	fffff9ff 	.word	0xfffff9ff
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	000f4240 	.word	0x000f4240

08002d14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	23e0      	movs	r3, #224	; 0xe0
 8002d1e:	01db      	lsls	r3, r3, #7
 8002d20:	4013      	ands	r3, r2
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e2fe      	b.n	800333c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2201      	movs	r2, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d100      	bne.n	8002d4a <HAL_RCC_OscConfig+0x1e>
 8002d48:	e07c      	b.n	8002e44 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4a:	4bc3      	ldr	r3, [pc, #780]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2238      	movs	r2, #56	; 0x38
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d54:	4bc0      	ldr	r3, [pc, #768]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d102      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3e>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4bb9      	ldr	r3, [pc, #740]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d062      	beq.n	8002e42 <HAL_RCC_OscConfig+0x116>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d15e      	bne.n	8002e42 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e2d9      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	025b      	lsls	r3, r3, #9
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x78>
 8002d94:	4bb0      	ldr	r3, [pc, #704]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4baf      	ldr	r3, [pc, #700]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	0249      	lsls	r1, r1, #9
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e020      	b.n	8002de6 <HAL_RCC_OscConfig+0xba>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	23a0      	movs	r3, #160	; 0xa0
 8002daa:	02db      	lsls	r3, r3, #11
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10e      	bne.n	8002dce <HAL_RCC_OscConfig+0xa2>
 8002db0:	4ba9      	ldr	r3, [pc, #676]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4ba8      	ldr	r3, [pc, #672]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	02c9      	lsls	r1, r1, #11
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	4ba6      	ldr	r3, [pc, #664]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4ba5      	ldr	r3, [pc, #660]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	0249      	lsls	r1, r1, #9
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCC_OscConfig+0xba>
 8002dce:	4ba2      	ldr	r3, [pc, #648]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4ba1      	ldr	r3, [pc, #644]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002dd4:	49a1      	ldr	r1, [pc, #644]	; (800305c <HAL_RCC_OscConfig+0x330>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	4b9f      	ldr	r3, [pc, #636]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b9e      	ldr	r3, [pc, #632]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002de0:	499f      	ldr	r1, [pc, #636]	; (8003060 <HAL_RCC_OscConfig+0x334>)
 8002de2:	400a      	ands	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d014      	beq.n	8002e18 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe fb47 	bl	8001480 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fb42 	bl	8001480 <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e298      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e0a:	4b93      	ldr	r3, [pc, #588]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	4013      	ands	r3, r2
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xcc>
 8002e16:	e015      	b.n	8002e44 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fb32 	bl	8001480 <HAL_GetTick>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e22:	f7fe fb2d 	bl	8001480 <HAL_GetTick>
 8002e26:	0002      	movs	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b64      	cmp	r3, #100	; 0x64
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e283      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e34:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	029b      	lsls	r3, r3, #10
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0xf6>
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d100      	bne.n	8002e50 <HAL_RCC_OscConfig+0x124>
 8002e4e:	e099      	b.n	8002f84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e50:	4b81      	ldr	r3, [pc, #516]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2238      	movs	r2, #56	; 0x38
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	4013      	ands	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_OscConfig+0x144>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d002      	beq.n	8002e76 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d135      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e76:	4b78      	ldr	r3, [pc, #480]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x162>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e256      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a74      	ldr	r2, [pc, #464]	; (8003064 <HAL_RCC_OscConfig+0x338>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	021a      	lsls	r2, r3, #8
 8002e9e:	4b6e      	ldr	r3, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d112      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002eaa:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6e      	ldr	r2, [pc, #440]	; (8003068 <HAL_RCC_OscConfig+0x33c>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ebe:	4b66      	ldr	r3, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0adb      	lsrs	r3, r3, #11
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	4a68      	ldr	r2, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x340>)
 8002eca:	40da      	lsrs	r2, r3
 8002ecc:	4b68      	ldr	r3, [pc, #416]	; (8003070 <HAL_RCC_OscConfig+0x344>)
 8002ece:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x348>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7fe fa77 	bl	80013c8 <HAL_InitTick>
 8002eda:	1e03      	subs	r3, r0, #0
 8002edc:	d051      	beq.n	8002f82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e22c      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d030      	beq.n	8002f4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002eea:	4b5b      	ldr	r3, [pc, #364]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5e      	ldr	r2, [pc, #376]	; (8003068 <HAL_RCC_OscConfig+0x33c>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002efe:	4b56      	ldr	r3, [pc, #344]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b55      	ldr	r3, [pc, #340]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0049      	lsls	r1, r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fab8 	bl	8001480 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f16:	f7fe fab3 	bl	8001480 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e209      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f28:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4013      	ands	r3, r2
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	4b48      	ldr	r3, [pc, #288]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <HAL_RCC_OscConfig+0x338>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	4b44      	ldr	r3, [pc, #272]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	e01b      	b.n	8002f84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002f4c:	4b42      	ldr	r3, [pc, #264]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b41      	ldr	r3, [pc, #260]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f52:	4949      	ldr	r1, [pc, #292]	; (8003078 <HAL_RCC_OscConfig+0x34c>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fa92 	bl	8001480 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fe fa8d 	bl	8001480 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e1e3      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f74:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0x236>
 8002f80:	e000      	b.n	8002f84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d047      	beq.n	800301e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f8e:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2238      	movs	r2, #56	; 0x38
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b18      	cmp	r3, #24
 8002f98:	d10a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d03c      	beq.n	800301e <HAL_RCC_OscConfig+0x2f2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d138      	bne.n	800301e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e1c5      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d019      	beq.n	8002fec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002fb8:	4b27      	ldr	r3, [pc, #156]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fa5c 	bl	8001480 <HAL_GetTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fe fa57 	bl	8001480 <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1ad      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d0f1      	beq.n	8002fce <HAL_RCC_OscConfig+0x2a2>
 8002fea:	e018      	b.n	800301e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002fee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fa42 	bl	8001480 <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003002:	f7fe fa3d 	bl	8001480 <HAL_GetTick>
 8003006:	0002      	movs	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e193      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8003016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003018:	2202      	movs	r2, #2
 800301a:	4013      	ands	r3, r2
 800301c:	d1f1      	bne.n	8003002 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2204      	movs	r2, #4
 8003024:	4013      	ands	r3, r2
 8003026:	d100      	bne.n	800302a <HAL_RCC_OscConfig+0x2fe>
 8003028:	e0c6      	b.n	80031b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302a:	231f      	movs	r3, #31
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2238      	movs	r2, #56	; 0x38
 8003038:	4013      	ands	r3, r2
 800303a:	2b20      	cmp	r3, #32
 800303c:	d11e      	bne.n	800307c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_OscConfig+0x32c>)
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	2202      	movs	r2, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d100      	bne.n	800304a <HAL_RCC_OscConfig+0x31e>
 8003048:	e0b6      	b.n	80031b8 <HAL_RCC_OscConfig+0x48c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d000      	beq.n	8003054 <HAL_RCC_OscConfig+0x328>
 8003052:	e0b1      	b.n	80031b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e171      	b.n	800333c <HAL_RCC_OscConfig+0x610>
 8003058:	40021000 	.word	0x40021000
 800305c:	fffeffff 	.word	0xfffeffff
 8003060:	fffbffff 	.word	0xfffbffff
 8003064:	ffff80ff 	.word	0xffff80ff
 8003068:	ffffc7ff 	.word	0xffffc7ff
 800306c:	00f42400 	.word	0x00f42400
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004
 8003078:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800307c:	4bb1      	ldr	r3, [pc, #708]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 800307e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4013      	ands	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_RCC_OscConfig+0x360>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x362>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4bac      	ldr	r3, [pc, #688]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003096:	4bab      	ldr	r3, [pc, #684]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003098:	2180      	movs	r1, #128	; 0x80
 800309a:	0549      	lsls	r1, r1, #21
 800309c:	430a      	orrs	r2, r1
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c
 80030a0:	4ba8      	ldr	r3, [pc, #672]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80030a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	055b      	lsls	r3, r3, #21
 80030a8:	4013      	ands	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80030ae:	231f      	movs	r3, #31
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b6:	4ba4      	ldr	r3, [pc, #656]	; (8003348 <HAL_RCC_OscConfig+0x61c>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d11a      	bne.n	80030f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c2:	4ba1      	ldr	r3, [pc, #644]	; (8003348 <HAL_RCC_OscConfig+0x61c>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4ba0      	ldr	r3, [pc, #640]	; (8003348 <HAL_RCC_OscConfig+0x61c>)
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	0049      	lsls	r1, r1, #1
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80030d0:	f7fe f9d6 	bl	8001480 <HAL_GetTick>
 80030d4:	0003      	movs	r3, r0
 80030d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe f9d1 	bl	8001480 <HAL_GetTick>
 80030de:	0002      	movs	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e127      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ec:	4b96      	ldr	r3, [pc, #600]	; (8003348 <HAL_RCC_OscConfig+0x61c>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4013      	ands	r3, r2
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x3e2>
 8003100:	4b90      	ldr	r3, [pc, #576]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003104:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003106:	2101      	movs	r1, #1
 8003108:	430a      	orrs	r2, r1
 800310a:	65da      	str	r2, [r3, #92]	; 0x5c
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x41c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x404>
 8003116:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003118:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800311a:	4b8a      	ldr	r3, [pc, #552]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 800311c:	2104      	movs	r1, #4
 800311e:	430a      	orrs	r2, r1
 8003120:	65da      	str	r2, [r3, #92]	; 0x5c
 8003122:	4b88      	ldr	r3, [pc, #544]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003126:	4b87      	ldr	r3, [pc, #540]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003128:	2101      	movs	r1, #1
 800312a:	430a      	orrs	r2, r1
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x41c>
 8003130:	4b84      	ldr	r3, [pc, #528]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003134:	4b83      	ldr	r3, [pc, #524]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003136:	2101      	movs	r1, #1
 8003138:	438a      	bics	r2, r1
 800313a:	65da      	str	r2, [r3, #92]	; 0x5c
 800313c:	4b81      	ldr	r3, [pc, #516]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 800313e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003140:	4b80      	ldr	r3, [pc, #512]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003142:	2104      	movs	r1, #4
 8003144:	438a      	bics	r2, r1
 8003146:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe f996 	bl	8001480 <HAL_GetTick>
 8003154:	0003      	movs	r3, r0
 8003156:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003158:	e009      	b.n	800316e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7fe f991 	bl	8001480 <HAL_GetTick>
 800315e:	0002      	movs	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	4a79      	ldr	r2, [pc, #484]	; (800334c <HAL_RCC_OscConfig+0x620>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0e6      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	4b75      	ldr	r3, [pc, #468]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x42e>
 8003178:	e013      	b.n	80031a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe f981 	bl	8001480 <HAL_GetTick>
 800317e:	0003      	movs	r3, r0
 8003180:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003182:	e009      	b.n	8003198 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe f97c 	bl	8001480 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a6f      	ldr	r2, [pc, #444]	; (800334c <HAL_RCC_OscConfig+0x620>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0d1      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2202      	movs	r2, #2
 800319e:	4013      	ands	r3, r2
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80031a2:	231f      	movs	r3, #31
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80031ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b0:	4b64      	ldr	r3, [pc, #400]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80031b2:	4967      	ldr	r1, [pc, #412]	; (8003350 <HAL_RCC_OscConfig+0x624>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d100      	bne.n	80031c2 <HAL_RCC_OscConfig+0x496>
 80031c0:	e0bb      	b.n	800333a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c2:	4b60      	ldr	r3, [pc, #384]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2238      	movs	r2, #56	; 0x38
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d100      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4a4>
 80031ce:	e07b      	b.n	80032c8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d156      	bne.n	8003286 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b5a      	ldr	r3, [pc, #360]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80031de:	495d      	ldr	r1, [pc, #372]	; (8003354 <HAL_RCC_OscConfig+0x628>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe f94c 	bl	8001480 <HAL_GetTick>
 80031e8:	0003      	movs	r3, r0
 80031ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe f947 	bl	8001480 <HAL_GetTick>
 80031f2:	0002      	movs	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e09d      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	049b      	lsls	r3, r3, #18
 8003208:	4013      	ands	r3, r2
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320c:	4b4d      	ldr	r3, [pc, #308]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a51      	ldr	r2, [pc, #324]	; (8003358 <HAL_RCC_OscConfig+0x62c>)
 8003212:	4013      	ands	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1a      	ldr	r2, [r3, #32]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	431a      	orrs	r2, r3
 800323a:	4b42      	ldr	r3, [pc, #264]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003240:	4b40      	ldr	r3, [pc, #256]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	0449      	lsls	r1, r1, #17
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	4b3c      	ldr	r3, [pc, #240]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	0549      	lsls	r1, r1, #21
 8003258:	430a      	orrs	r2, r1
 800325a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe f910 	bl	8001480 <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003266:	f7fe f90b 	bl	8001480 <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e061      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003278:	4b32      	ldr	r3, [pc, #200]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	049b      	lsls	r3, r3, #18
 8003280:	4013      	ands	r3, r2
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x53a>
 8003284:	e059      	b.n	800333a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003286:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4b2e      	ldr	r3, [pc, #184]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 800328c:	4931      	ldr	r1, [pc, #196]	; (8003354 <HAL_RCC_OscConfig+0x628>)
 800328e:	400a      	ands	r2, r1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe f8f5 	bl	8001480 <HAL_GetTick>
 8003296:	0003      	movs	r3, r0
 8003298:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe f8f0 	bl	8001480 <HAL_GetTick>
 80032a0:	0002      	movs	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e046      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	049b      	lsls	r3, r3, #18
 80032b6:	4013      	ands	r3, r2
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80032c0:	4926      	ldr	r1, [pc, #152]	; (800335c <HAL_RCC_OscConfig+0x630>)
 80032c2:	400a      	ands	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	e038      	b.n	800333a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e033      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_RCC_OscConfig+0x618>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2203      	movs	r2, #3
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d126      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2270      	movs	r2, #112	; 0x70
 80032ec:	401a      	ands	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d11f      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	23fe      	movs	r3, #254	; 0xfe
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	401a      	ands	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d116      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	23f8      	movs	r3, #248	; 0xf8
 800330c:	039b      	lsls	r3, r3, #14
 800330e:	401a      	ands	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d10e      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	23e0      	movs	r3, #224	; 0xe0
 800331c:	051b      	lsls	r3, r3, #20
 800331e:	401a      	ands	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	0f5b      	lsrs	r3, r3, #29
 800332c:	075a      	lsls	r2, r3, #29
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b008      	add	sp, #32
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	40007000 	.word	0x40007000
 800334c:	00001388 	.word	0x00001388
 8003350:	efffffff 	.word	0xefffffff
 8003354:	feffffff 	.word	0xfeffffff
 8003358:	11c1808c 	.word	0x11c1808c
 800335c:	eefefffc 	.word	0xeefefffc

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0e9      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2207      	movs	r2, #7
 800337a:	4013      	ands	r3, r2
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d91e      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b73      	ldr	r3, [pc, #460]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2207      	movs	r2, #7
 8003388:	4393      	bics	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	4b70      	ldr	r3, [pc, #448]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003394:	f7fe f874 	bl	8001480 <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800339c:	e009      	b.n	80033b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339e:	f7fe f86f 	bl	8001480 <HAL_GetTick>
 80033a2:	0002      	movs	r2, r0
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	4a6a      	ldr	r2, [pc, #424]	; (8003554 <HAL_RCC_ClockConfig+0x1f4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0ca      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2207      	movs	r2, #7
 80033b8:	4013      	ands	r3, r2
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d1ee      	bne.n	800339e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2202      	movs	r2, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d015      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2204      	movs	r2, #4
 80033d0:	4013      	ands	r3, r2
 80033d2:	d006      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033d4:	4b60      	ldr	r3, [pc, #384]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b5f      	ldr	r3, [pc, #380]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 80033da:	21e0      	movs	r1, #224	; 0xe0
 80033dc:	01c9      	lsls	r1, r1, #7
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e2:	4b5d      	ldr	r3, [pc, #372]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4a5d      	ldr	r2, [pc, #372]	; (800355c <HAL_RCC_ClockConfig+0x1fc>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d057      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d107      	bne.n	8003418 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	029b      	lsls	r3, r3, #10
 8003410:	4013      	ands	r3, r2
 8003412:	d12b      	bne.n	800346c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e097      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d107      	bne.n	8003430 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003420:	4b4d      	ldr	r3, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	049b      	lsls	r3, r3, #18
 8003428:	4013      	ands	r3, r2
 800342a:	d11f      	bne.n	800346c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e08b      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d107      	bne.n	8003448 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003438:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4013      	ands	r3, r2
 8003442:	d113      	bne.n	800346c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e07f      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d106      	bne.n	800345e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003450:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003454:	2202      	movs	r2, #2
 8003456:	4013      	ands	r3, r2
 8003458:	d108      	bne.n	800346c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e074      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345e:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2202      	movs	r2, #2
 8003464:	4013      	ands	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e06d      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800346c:	4b3a      	ldr	r3, [pc, #232]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2207      	movs	r2, #7
 8003472:	4393      	bics	r3, r2
 8003474:	0019      	movs	r1, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003480:	f7fd fffe 	bl	8001480 <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003488:	e009      	b.n	800349e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348a:	f7fd fff9 	bl	8001480 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <HAL_RCC_ClockConfig+0x1f4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e054      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2238      	movs	r2, #56	; 0x38
 80034a4:	401a      	ands	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1ec      	bne.n	800348a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2207      	movs	r2, #7
 80034b6:	4013      	ands	r3, r2
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d21e      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2207      	movs	r2, #7
 80034c4:	4393      	bics	r3, r2
 80034c6:	0019      	movs	r1, r3
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034d0:	f7fd ffd6 	bl	8001480 <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034d8:	e009      	b.n	80034ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034da:	f7fd ffd1 	bl	8001480 <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_RCC_ClockConfig+0x1f4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e02c      	b.n	8003548 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034ee:	4b18      	ldr	r3, [pc, #96]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2207      	movs	r2, #7
 80034f4:	4013      	ands	r3, r2
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d1ee      	bne.n	80034da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2204      	movs	r2, #4
 8003502:	4013      	ands	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <HAL_RCC_ClockConfig+0x200>)
 800350c:	4013      	ands	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800351a:	f000 f829 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800351e:	0001      	movs	r1, r0
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	220f      	movs	r2, #15
 8003528:	401a      	ands	r2, r3
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <HAL_RCC_ClockConfig+0x204>)
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	58d3      	ldr	r3, [r2, r3]
 8003530:	221f      	movs	r2, #31
 8003532:	4013      	ands	r3, r2
 8003534:	000a      	movs	r2, r1
 8003536:	40da      	lsrs	r2, r3
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_ClockConfig+0x208>)
 800353a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_ClockConfig+0x20c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0018      	movs	r0, r3
 8003542:	f7fd ff41 	bl	80013c8 <HAL_InitTick>
 8003546:	0003      	movs	r3, r0
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40022000 	.word	0x40022000
 8003554:	00001388 	.word	0x00001388
 8003558:	40021000 	.word	0x40021000
 800355c:	fffff0ff 	.word	0xfffff0ff
 8003560:	ffff8fff 	.word	0xffff8fff
 8003564:	08005f00 	.word	0x08005f00
 8003568:	20000000 	.word	0x20000000
 800356c:	20000004 	.word	0x20000004

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003576:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2238      	movs	r2, #56	; 0x38
 800357c:	4013      	ands	r3, r2
 800357e:	d10f      	bne.n	80035a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0adb      	lsrs	r3, r3, #11
 8003586:	2207      	movs	r2, #7
 8003588:	4013      	ands	r3, r2
 800358a:	2201      	movs	r2, #1
 800358c:	409a      	lsls	r2, r3
 800358e:	0013      	movs	r3, r2
 8003590:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	4835      	ldr	r0, [pc, #212]	; (800366c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003596:	f7fc fdb5 	bl	8000104 <__udivsi3>
 800359a:	0003      	movs	r3, r0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	e05d      	b.n	800365c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a0:	4b31      	ldr	r3, [pc, #196]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2238      	movs	r2, #56	; 0x38
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d102      	bne.n	80035b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035ac:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_RCC_GetSysClockFreq+0x100>)
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	e054      	b.n	800365c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b2:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2238      	movs	r2, #56	; 0x38
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d138      	bne.n	8003630 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035be:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2203      	movs	r2, #3
 80035c4:	4013      	ands	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	2207      	movs	r2, #7
 80035d0:	4013      	ands	r3, r2
 80035d2:	3301      	adds	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d10d      	bne.n	80035f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	4824      	ldr	r0, [pc, #144]	; (8003670 <HAL_RCC_GetSysClockFreq+0x100>)
 80035e0:	f7fc fd90 	bl	8000104 <__udivsi3>
 80035e4:	0003      	movs	r3, r0
 80035e6:	0019      	movs	r1, r3
 80035e8:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	227f      	movs	r2, #127	; 0x7f
 80035f0:	4013      	ands	r3, r2
 80035f2:	434b      	muls	r3, r1
 80035f4:	617b      	str	r3, [r7, #20]
        break;
 80035f6:	e00d      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	481c      	ldr	r0, [pc, #112]	; (800366c <HAL_RCC_GetSysClockFreq+0xfc>)
 80035fc:	f7fc fd82 	bl	8000104 <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	0019      	movs	r1, r3
 8003604:	4b18      	ldr	r3, [pc, #96]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	227f      	movs	r2, #127	; 0x7f
 800360c:	4013      	ands	r3, r2
 800360e:	434b      	muls	r3, r1
 8003610:	617b      	str	r3, [r7, #20]
        break;
 8003612:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0f5b      	lsrs	r3, r3, #29
 800361a:	2207      	movs	r2, #7
 800361c:	4013      	ands	r3, r2
 800361e:	3301      	adds	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	6978      	ldr	r0, [r7, #20]
 8003626:	f7fc fd6d 	bl	8000104 <__udivsi3>
 800362a:	0003      	movs	r3, r0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e015      	b.n	800365c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2238      	movs	r2, #56	; 0x38
 8003636:	4013      	ands	r3, r2
 8003638:	2b20      	cmp	r3, #32
 800363a:	d103      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e00b      	b.n	800365c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2238      	movs	r2, #56	; 0x38
 800364a:	4013      	ands	r3, r2
 800364c:	2b18      	cmp	r3, #24
 800364e:	d103      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003650:	23fa      	movs	r3, #250	; 0xfa
 8003652:	01db      	lsls	r3, r3, #7
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	e001      	b.n	800365c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800365c:	693b      	ldr	r3, [r7, #16]
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b006      	add	sp, #24
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	40021000 	.word	0x40021000
 800366c:	00f42400 	.word	0x00f42400
 8003670:	007a1200 	.word	0x007a1200

08003674 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b02      	ldr	r3, [pc, #8]	; (8003684 <HAL_RCC_GetHCLKFreq+0x10>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b5b0      	push	{r4, r5, r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800368c:	f7ff fff2 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003690:	0004      	movs	r4, r0
 8003692:	f7ff fb3f 	bl	8002d14 <LL_RCC_GetAPB1Prescaler>
 8003696:	0003      	movs	r3, r0
 8003698:	0b1a      	lsrs	r2, r3, #12
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800369c:	0092      	lsls	r2, r2, #2
 800369e:	58d3      	ldr	r3, [r2, r3]
 80036a0:	221f      	movs	r2, #31
 80036a2:	4013      	ands	r3, r2
 80036a4:	40dc      	lsrs	r4, r3
 80036a6:	0023      	movs	r3, r4
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bdb0      	pop	{r4, r5, r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	08005f40 	.word	0x08005f40

080036b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80036bc:	2313      	movs	r3, #19
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036c4:	2312      	movs	r3, #18
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	029b      	lsls	r3, r3, #10
 80036d4:	4013      	ands	r3, r2
 80036d6:	d100      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036d8:	e0a3      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036da:	2011      	movs	r0, #17
 80036dc:	183b      	adds	r3, r7, r0
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e2:	4ba5      	ldr	r3, [pc, #660]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	055b      	lsls	r3, r3, #21
 80036ea:	4013      	ands	r3, r2
 80036ec:	d110      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	4ba2      	ldr	r3, [pc, #648]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f2:	4ba1      	ldr	r3, [pc, #644]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036f4:	2180      	movs	r1, #128	; 0x80
 80036f6:	0549      	lsls	r1, r1, #21
 80036f8:	430a      	orrs	r2, r1
 80036fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80036fc:	4b9e      	ldr	r3, [pc, #632]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	055b      	lsls	r3, r3, #21
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370a:	183b      	adds	r3, r7, r0
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003710:	4b9a      	ldr	r3, [pc, #616]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b99      	ldr	r3, [pc, #612]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	0049      	lsls	r1, r1, #1
 800371a:	430a      	orrs	r2, r1
 800371c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800371e:	f7fd feaf 	bl	8001480 <HAL_GetTick>
 8003722:	0003      	movs	r3, r0
 8003724:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003726:	e00b      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003728:	f7fd feaa 	bl	8001480 <HAL_GetTick>
 800372c:	0002      	movs	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d904      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003736:	2313      	movs	r3, #19
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2203      	movs	r2, #3
 800373c:	701a      	strb	r2, [r3, #0]
        break;
 800373e:	e005      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003740:	4b8e      	ldr	r3, [pc, #568]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d0ed      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800374c:	2313      	movs	r3, #19
 800374e:	18fb      	adds	r3, r7, r3
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d154      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003758:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800375a:	23c0      	movs	r3, #192	; 0xc0
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4013      	ands	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d019      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	429a      	cmp	r2, r3
 8003770:	d014      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003772:	4b81      	ldr	r3, [pc, #516]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	4a82      	ldr	r2, [pc, #520]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003778:	4013      	ands	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800377c:	4b7e      	ldr	r3, [pc, #504]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800377e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003780:	4b7d      	ldr	r3, [pc, #500]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	0249      	lsls	r1, r1, #9
 8003786:	430a      	orrs	r2, r1
 8003788:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800378a:	4b7b      	ldr	r3, [pc, #492]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800378c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800378e:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003790:	497c      	ldr	r1, [pc, #496]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003792:	400a      	ands	r2, r1
 8003794:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003796:	4b78      	ldr	r3, [pc, #480]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2201      	movs	r2, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	d016      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd fe6c 	bl	8001480 <HAL_GetTick>
 80037a8:	0003      	movs	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ac:	e00c      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fd fe67 	bl	8001480 <HAL_GetTick>
 80037b2:	0002      	movs	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	4a73      	ldr	r2, [pc, #460]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d904      	bls.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80037be:	2313      	movs	r3, #19
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	2203      	movs	r2, #3
 80037c4:	701a      	strb	r2, [r3, #0]
            break;
 80037c6:	e004      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c8:	4b6b      	ldr	r3, [pc, #428]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	2202      	movs	r2, #2
 80037ce:	4013      	ands	r3, r2
 80037d0:	d0ed      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80037d2:	2313      	movs	r3, #19
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	4a67      	ldr	r2, [pc, #412]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037ec:	430a      	orrs	r2, r1
 80037ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80037f0:	e00c      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f2:	2312      	movs	r3, #18
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2213      	movs	r2, #19
 80037f8:	18ba      	adds	r2, r7, r2
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e005      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	2312      	movs	r3, #18
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2213      	movs	r2, #19
 8003806:	18ba      	adds	r2, r7, r2
 8003808:	7812      	ldrb	r2, [r2, #0]
 800380a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800380c:	2311      	movs	r3, #17
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d105      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800381a:	4b57      	ldr	r3, [pc, #348]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800381c:	495b      	ldr	r1, [pc, #364]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800381e:	400a      	ands	r2, r1
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	4013      	ands	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800382c:	4b52      	ldr	r3, [pc, #328]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	2203      	movs	r2, #3
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800383c:	430a      	orrs	r2, r1
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	4013      	ands	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384a:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	4a50      	ldr	r2, [pc, #320]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003850:	4013      	ands	r3, r2
 8003852:	0019      	movs	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800385a:	430a      	orrs	r2, r1
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4013      	ands	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800386a:	4b43      	ldr	r3, [pc, #268]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	4a49      	ldr	r2, [pc, #292]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003870:	4013      	ands	r3, r2
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800387a:	430a      	orrs	r2, r1
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4013      	ands	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	4a42      	ldr	r2, [pc, #264]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003890:	4013      	ands	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	4b37      	ldr	r3, [pc, #220]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800389a:	430a      	orrs	r2, r1
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2220      	movs	r2, #32
 80038a4:	4013      	ands	r3, r2
 80038a6:	d009      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	4a3b      	ldr	r2, [pc, #236]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038b8:	430a      	orrs	r2, r1
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	01db      	lsls	r3, r3, #7
 80038c4:	4013      	ands	r3, r2
 80038c6:	d015      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	0899      	lsrs	r1, r3, #2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	05db      	lsls	r3, r3, #23
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d106      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038ec:	2180      	movs	r1, #128	; 0x80
 80038ee:	0249      	lsls	r1, r1, #9
 80038f0:	430a      	orrs	r2, r1
 80038f2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	039b      	lsls	r3, r3, #14
 80038fc:	4013      	ands	r3, r2
 80038fe:	d016      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003906:	4013      	ands	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1a      	ldr	r2, [r3, #32]
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003910:	430a      	orrs	r2, r1
 8003912:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	03db      	lsls	r3, r3, #15
 800391c:	429a      	cmp	r2, r3
 800391e:	d106      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003920:	4b15      	ldr	r3, [pc, #84]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	0449      	lsls	r1, r1, #17
 800392a:	430a      	orrs	r2, r1
 800392c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	4013      	ands	r3, r2
 8003938:	d016      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003940:	4013      	ands	r3, r2
 8003942:	0019      	movs	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800394a:	430a      	orrs	r2, r1
 800394c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	01db      	lsls	r3, r3, #7
 8003956:	429a      	cmp	r2, r3
 8003958:	d106      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	0249      	lsls	r1, r1, #9
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003968:	2312      	movs	r3, #18
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	781b      	ldrb	r3, [r3, #0]
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b006      	add	sp, #24
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
 8003980:	fffffcff 	.word	0xfffffcff
 8003984:	fffeffff 	.word	0xfffeffff
 8003988:	00001388 	.word	0x00001388
 800398c:	efffffff 	.word	0xefffffff
 8003990:	fffff3ff 	.word	0xfffff3ff
 8003994:	fff3ffff 	.word	0xfff3ffff
 8003998:	ffcfffff 	.word	0xffcfffff
 800399c:	ffffcfff 	.word	0xffffcfff
 80039a0:	ffbfffff 	.word	0xffbfffff
 80039a4:	ffff3fff 	.word	0xffff3fff

080039a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e04a      	b.n	8003a50 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	223d      	movs	r2, #61	; 0x3d
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	223c      	movs	r2, #60	; 0x3c
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7fd fa79 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	223d      	movs	r2, #61	; 0x3d
 80039da:	2102      	movs	r1, #2
 80039dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	0019      	movs	r1, r3
 80039e8:	0010      	movs	r0, r2
 80039ea:	f000 fb49 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2248      	movs	r2, #72	; 0x48
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	223e      	movs	r2, #62	; 0x3e
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	223f      	movs	r2, #63	; 0x3f
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2240      	movs	r2, #64	; 0x40
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	5499      	strb	r1, [r3, r2]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2241      	movs	r2, #65	; 0x41
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2242      	movs	r2, #66	; 0x42
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2243      	movs	r2, #67	; 0x43
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2244      	movs	r2, #68	; 0x44
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2245      	movs	r2, #69	; 0x45
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2246      	movs	r2, #70	; 0x46
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2247      	movs	r2, #71	; 0x47
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	223d      	movs	r2, #61	; 0x3d
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e04a      	b.n	8003b00 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	223d      	movs	r2, #61	; 0x3d
 8003a6e:	5c9b      	ldrb	r3, [r3, r2]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	223c      	movs	r2, #60	; 0x3c
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 f841 	bl	8003b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	223d      	movs	r2, #61	; 0x3d
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	0019      	movs	r1, r3
 8003a98:	0010      	movs	r0, r2
 8003a9a:	f000 faf1 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2248      	movs	r2, #72	; 0x48
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	223e      	movs	r2, #62	; 0x3e
 8003aaa:	2101      	movs	r1, #1
 8003aac:	5499      	strb	r1, [r3, r2]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	223f      	movs	r2, #63	; 0x3f
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	5499      	strb	r1, [r3, r2]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2240      	movs	r2, #64	; 0x40
 8003aba:	2101      	movs	r1, #1
 8003abc:	5499      	strb	r1, [r3, r2]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2241      	movs	r2, #65	; 0x41
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	5499      	strb	r1, [r3, r2]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2242      	movs	r2, #66	; 0x42
 8003aca:	2101      	movs	r1, #1
 8003acc:	5499      	strb	r1, [r3, r2]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2243      	movs	r2, #67	; 0x43
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2244      	movs	r2, #68	; 0x44
 8003ada:	2101      	movs	r1, #1
 8003adc:	5499      	strb	r1, [r3, r2]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2245      	movs	r2, #69	; 0x45
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	5499      	strb	r1, [r3, r2]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2246      	movs	r2, #70	; 0x46
 8003aea:	2101      	movs	r1, #1
 8003aec:	5499      	strb	r1, [r3, r2]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2247      	movs	r2, #71	; 0x47
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	223d      	movs	r2, #61	; 0x3d
 8003afa:	2101      	movs	r1, #1
 8003afc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	0018      	movs	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x22>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	223e      	movs	r2, #62	; 0x3e
 8003b2c:	5c9b      	ldrb	r3, [r3, r2]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	1e5a      	subs	r2, r3, #1
 8003b34:	4193      	sbcs	r3, r2
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e037      	b.n	8003baa <HAL_TIM_PWM_Start+0x92>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d108      	bne.n	8003b52 <HAL_TIM_PWM_Start+0x3a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	223f      	movs	r2, #63	; 0x3f
 8003b44:	5c9b      	ldrb	r3, [r3, r2]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	1e5a      	subs	r2, r3, #1
 8003b4c:	4193      	sbcs	r3, r2
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	e02b      	b.n	8003baa <HAL_TIM_PWM_Start+0x92>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d108      	bne.n	8003b6a <HAL_TIM_PWM_Start+0x52>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2240      	movs	r2, #64	; 0x40
 8003b5c:	5c9b      	ldrb	r3, [r3, r2]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	1e5a      	subs	r2, r3, #1
 8003b64:	4193      	sbcs	r3, r2
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	e01f      	b.n	8003baa <HAL_TIM_PWM_Start+0x92>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b0c      	cmp	r3, #12
 8003b6e:	d108      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x6a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2241      	movs	r2, #65	; 0x41
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	4193      	sbcs	r3, r2
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e013      	b.n	8003baa <HAL_TIM_PWM_Start+0x92>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d108      	bne.n	8003b9a <HAL_TIM_PWM_Start+0x82>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2242      	movs	r2, #66	; 0x42
 8003b8c:	5c9b      	ldrb	r3, [r3, r2]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	1e5a      	subs	r2, r3, #1
 8003b94:	4193      	sbcs	r3, r2
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e007      	b.n	8003baa <HAL_TIM_PWM_Start+0x92>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2243      	movs	r2, #67	; 0x43
 8003b9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	4193      	sbcs	r3, r2
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e081      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0xaa>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	223e      	movs	r2, #62	; 0x3e
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	5499      	strb	r1, [r3, r2]
 8003bc0:	e023      	b.n	8003c0a <HAL_TIM_PWM_Start+0xf2>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0xba>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	223f      	movs	r2, #63	; 0x3f
 8003bcc:	2102      	movs	r1, #2
 8003bce:	5499      	strb	r1, [r3, r2]
 8003bd0:	e01b      	b.n	8003c0a <HAL_TIM_PWM_Start+0xf2>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start+0xca>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2240      	movs	r2, #64	; 0x40
 8003bdc:	2102      	movs	r1, #2
 8003bde:	5499      	strb	r1, [r3, r2]
 8003be0:	e013      	b.n	8003c0a <HAL_TIM_PWM_Start+0xf2>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0xda>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2241      	movs	r2, #65	; 0x41
 8003bec:	2102      	movs	r1, #2
 8003bee:	5499      	strb	r1, [r3, r2]
 8003bf0:	e00b      	b.n	8003c0a <HAL_TIM_PWM_Start+0xf2>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Start+0xea>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2242      	movs	r2, #66	; 0x42
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	5499      	strb	r1, [r3, r2]
 8003c00:	e003      	b.n	8003c0a <HAL_TIM_PWM_Start+0xf2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2243      	movs	r2, #67	; 0x43
 8003c06:	2102      	movs	r1, #2
 8003c08:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6839      	ldr	r1, [r7, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	0018      	movs	r0, r3
 8003c14:	f000 fde2 	bl	80047dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_TIM_PWM_Start+0x1a8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_TIM_PWM_Start+0x11e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <HAL_TIM_PWM_Start+0x1ac>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_TIM_PWM_Start+0x11e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_TIM_PWM_Start+0x1b0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x122>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_TIM_PWM_Start+0x124>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	0209      	lsls	r1, r1, #8
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_TIM_PWM_Start+0x1a8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00a      	beq.n	8003c72 <HAL_TIM_PWM_Start+0x15a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	05db      	lsls	r3, r3, #23
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d004      	beq.n	8003c72 <HAL_TIM_PWM_Start+0x15a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_TIM_PWM_Start+0x1b4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d116      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_TIM_PWM_Start+0x1b8>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d016      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x19a>
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	025b      	lsls	r3, r3, #9
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d011      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	e008      	b.n	8003cb2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b004      	add	sp, #16
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	00010007 	.word	0x00010007

08003cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2317      	movs	r3, #23
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	223c      	movs	r2, #60	; 0x3c
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e0e5      	b.n	8003ec2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	223c      	movs	r2, #60	; 0x3c
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b14      	cmp	r3, #20
 8003d02:	d900      	bls.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d04:	e0d1      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	4b70      	ldr	r3, [pc, #448]	; (8003ecc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003d0c:	18d3      	adds	r3, r2, r3
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 fa26 	bl	800416c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2108      	movs	r1, #8
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	619a      	str	r2, [r3, #24]
      break;
 8003d52:	e0af      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	0011      	movs	r1, r2
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f000 fa85 	bl	800426c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	0109      	lsls	r1, r1, #4
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4954      	ldr	r1, [pc, #336]	; (8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6999      	ldr	r1, [r3, #24]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	619a      	str	r2, [r3, #24]
      break;
 8003d98:	e08c      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	0011      	movs	r1, r2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 fae0 	bl	8004368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2108      	movs	r1, #8
 8003db4:	430a      	orrs	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69d9      	ldr	r1, [r3, #28]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	61da      	str	r2, [r3, #28]
      break;
 8003dda:	e06b      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 fb41 	bl	800446c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	0109      	lsls	r1, r1, #4
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4932      	ldr	r1, [pc, #200]	; (8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e08:	400a      	ands	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69d9      	ldr	r1, [r3, #28]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	61da      	str	r2, [r3, #28]
      break;
 8003e20:	e048      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	0011      	movs	r1, r2
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 fb82 	bl	8004534 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	438a      	bics	r2, r1
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e62:	e027      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	0011      	movs	r1, r2
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 fbbb 	bl	80045e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	0109      	lsls	r1, r1, #4
 8003e80:	430a      	orrs	r2, r1
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4910      	ldr	r1, [pc, #64]	; (8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	021a      	lsls	r2, r3, #8
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ea8:	e004      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003eaa:	2317      	movs	r3, #23
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
      break;
 8003eb2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	223c      	movs	r2, #60	; 0x3c
 8003eb8:	2100      	movs	r1, #0
 8003eba:	5499      	strb	r1, [r3, r2]

  return status;
 8003ebc:	2317      	movs	r3, #23
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	781b      	ldrb	r3, [r3, #0]
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b006      	add	sp, #24
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	08005f60 	.word	0x08005f60
 8003ed0:	fffffbff 	.word	0xfffffbff

08003ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	230f      	movs	r3, #15
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	223c      	movs	r2, #60	; 0x3c
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIM_ConfigClockSource+0x20>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e0bc      	b.n	800406e <HAL_TIM_ConfigClockSource+0x19a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223c      	movs	r2, #60	; 0x3c
 8003ef8:	2101      	movs	r1, #1
 8003efa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	223d      	movs	r2, #61	; 0x3d
 8003f00:	2102      	movs	r1, #2
 8003f02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a5a      	ldr	r2, [pc, #360]	; (8004078 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a59      	ldr	r2, [pc, #356]	; (800407c <HAL_TIM_ConfigClockSource+0x1a8>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	0192      	lsls	r2, r2, #6
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d040      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0xde>
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	0192      	lsls	r2, r2, #6
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d900      	bls.n	8003f3a <HAL_TIM_ConfigClockSource+0x66>
 8003f38:	e088      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	0152      	lsls	r2, r2, #5
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d100      	bne.n	8003f44 <HAL_TIM_ConfigClockSource+0x70>
 8003f42:	e088      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x182>
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	0152      	lsls	r2, r2, #5
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d900      	bls.n	8003f4e <HAL_TIM_ConfigClockSource+0x7a>
 8003f4c:	e07e      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f4e:	2b70      	cmp	r3, #112	; 0x70
 8003f50:	d018      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0xb0>
 8003f52:	d900      	bls.n	8003f56 <HAL_TIM_ConfigClockSource+0x82>
 8003f54:	e07a      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f56:	2b60      	cmp	r3, #96	; 0x60
 8003f58:	d04f      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x126>
 8003f5a:	d900      	bls.n	8003f5e <HAL_TIM_ConfigClockSource+0x8a>
 8003f5c:	e076      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f5e:	2b50      	cmp	r3, #80	; 0x50
 8003f60:	d03b      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x106>
 8003f62:	d900      	bls.n	8003f66 <HAL_TIM_ConfigClockSource+0x92>
 8003f64:	e072      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d057      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x146>
 8003f6a:	d900      	bls.n	8003f6e <HAL_TIM_ConfigClockSource+0x9a>
 8003f6c:	e06e      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f6e:	2b30      	cmp	r3, #48	; 0x30
 8003f70:	d063      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x166>
 8003f72:	d86b      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d060      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x166>
 8003f78:	d868      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d05d      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x166>
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d05b      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x166>
 8003f82:	e063      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f94:	f000 fc02 	bl	800479c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2277      	movs	r2, #119	; 0x77
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
      break;
 8003fb0:	e052      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc2:	f000 fbeb 	bl	800479c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	01c9      	lsls	r1, r1, #7
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
      break;
 8003fd8:	e03e      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	f000 fb5c 	bl	80046a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2150      	movs	r1, #80	; 0x50
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 fbb6 	bl	8004764 <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e02e      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004006:	001a      	movs	r2, r3
 8004008:	f000 fb7a 	bl	8004700 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2160      	movs	r1, #96	; 0x60
 8004012:	0018      	movs	r0, r3
 8004014:	f000 fba6 	bl	8004764 <TIM_ITRx_SetConfig>
      break;
 8004018:	e01e      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	001a      	movs	r2, r3
 8004028:	f000 fb3c 	bl	80046a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2140      	movs	r1, #64	; 0x40
 8004032:	0018      	movs	r0, r3
 8004034:	f000 fb96 	bl	8004764 <TIM_ITRx_SetConfig>
      break;
 8004038:	e00e      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	0019      	movs	r1, r3
 8004044:	0010      	movs	r0, r2
 8004046:	f000 fb8d 	bl	8004764 <TIM_ITRx_SetConfig>
      break;
 800404a:	e005      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800404c:	230f      	movs	r3, #15
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
      break;
 8004054:	e000      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004056:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	223d      	movs	r2, #61	; 0x3d
 800405c:	2101      	movs	r1, #1
 800405e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	223c      	movs	r2, #60	; 0x3c
 8004064:	2100      	movs	r1, #0
 8004066:	5499      	strb	r1, [r3, r2]

  return status;
 8004068:	230f      	movs	r3, #15
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	781b      	ldrb	r3, [r3, #0]
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	ffceff88 	.word	0xffceff88
 800407c:	ffff00ff 	.word	0xffff00ff

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a30      	ldr	r2, [pc, #192]	; (8004154 <TIM_Base_SetConfig+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d008      	beq.n	80040aa <TIM_Base_SetConfig+0x2a>
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	05db      	lsls	r3, r3, #23
 800409e:	429a      	cmp	r2, r3
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0x2a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2c      	ldr	r2, [pc, #176]	; (8004158 <TIM_Base_SetConfig+0xd8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2270      	movs	r2, #112	; 0x70
 80040ae:	4393      	bics	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a25      	ldr	r2, [pc, #148]	; (8004154 <TIM_Base_SetConfig+0xd4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d014      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	05db      	lsls	r3, r3, #23
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d00f      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a21      	ldr	r2, [pc, #132]	; (8004158 <TIM_Base_SetConfig+0xd8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <TIM_Base_SetConfig+0xdc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <TIM_Base_SetConfig+0xe0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <TIM_Base_SetConfig+0xe4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <TIM_Base_SetConfig+0xe8>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	4393      	bics	r3, r2
 8004106:	001a      	movs	r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <TIM_Base_SetConfig+0xd4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <TIM_Base_SetConfig+0xbe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <TIM_Base_SetConfig+0xe0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_Base_SetConfig+0xbe>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <TIM_Base_SetConfig+0xe4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d103      	bne.n	8004146 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	615a      	str	r2, [r3, #20]
}
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	b004      	add	sp, #16
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40000400 	.word	0x40000400
 800415c:	40002000 	.word	0x40002000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800
 8004168:	fffffcff 	.word	0xfffffcff

0800416c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	2201      	movs	r2, #1
 800417c:	4393      	bics	r3, r2
 800417e:	001a      	movs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a2e      	ldr	r2, [pc, #184]	; (8004254 <TIM_OC1_SetConfig+0xe8>)
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4393      	bics	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2202      	movs	r2, #2
 80041b4:	4393      	bics	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <TIM_OC1_SetConfig+0xec>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <TIM_OC1_SetConfig+0x6e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a23      	ldr	r2, [pc, #140]	; (800425c <TIM_OC1_SetConfig+0xf0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_OC1_SetConfig+0x6e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a22      	ldr	r2, [pc, #136]	; (8004260 <TIM_OC1_SetConfig+0xf4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10c      	bne.n	80041f4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2208      	movs	r2, #8
 80041de:	4393      	bics	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2204      	movs	r2, #4
 80041f0:	4393      	bics	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <TIM_OC1_SetConfig+0xec>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <TIM_OC1_SetConfig+0xa0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <TIM_OC1_SetConfig+0xf0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_OC1_SetConfig+0xa0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a16      	ldr	r2, [pc, #88]	; (8004260 <TIM_OC1_SetConfig+0xf4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d111      	bne.n	8004230 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4a15      	ldr	r2, [pc, #84]	; (8004264 <TIM_OC1_SetConfig+0xf8>)
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4a14      	ldr	r2, [pc, #80]	; (8004268 <TIM_OC1_SetConfig+0xfc>)
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b006      	add	sp, #24
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	fffeff8f 	.word	0xfffeff8f
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800
 8004264:	fffffeff 	.word	0xfffffeff
 8004268:	fffffdff 	.word	0xfffffdff

0800426c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	2210      	movs	r2, #16
 800427c:	4393      	bics	r3, r2
 800427e:	001a      	movs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a2c      	ldr	r2, [pc, #176]	; (800434c <TIM_OC2_SetConfig+0xe0>)
 800429a:	4013      	ands	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <TIM_OC2_SetConfig+0xe4>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2220      	movs	r2, #32
 80042b6:	4393      	bics	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a22      	ldr	r2, [pc, #136]	; (8004354 <TIM_OC2_SetConfig+0xe8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d10d      	bne.n	80042ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	4393      	bics	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2240      	movs	r2, #64	; 0x40
 80042e6:	4393      	bics	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a19      	ldr	r2, [pc, #100]	; (8004354 <TIM_OC2_SetConfig+0xe8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_OC2_SetConfig+0x96>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <TIM_OC2_SetConfig+0xec>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_OC2_SetConfig+0x96>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a17      	ldr	r2, [pc, #92]	; (800435c <TIM_OC2_SetConfig+0xf0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d113      	bne.n	800432a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4a16      	ldr	r2, [pc, #88]	; (8004360 <TIM_OC2_SetConfig+0xf4>)
 8004306:	4013      	ands	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <TIM_OC2_SetConfig+0xf8>)
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b006      	add	sp, #24
 800434a:	bd80      	pop	{r7, pc}
 800434c:	feff8fff 	.word	0xfeff8fff
 8004350:	fffffcff 	.word	0xfffffcff
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40014400 	.word	0x40014400
 800435c:	40014800 	.word	0x40014800
 8004360:	fffffbff 	.word	0xfffffbff
 8004364:	fffff7ff 	.word	0xfffff7ff

08004368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4a33      	ldr	r2, [pc, #204]	; (8004444 <TIM_OC3_SetConfig+0xdc>)
 8004378:	401a      	ands	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <TIM_OC3_SetConfig+0xe0>)
 8004394:	4013      	ands	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2203      	movs	r2, #3
 800439c:	4393      	bics	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4a27      	ldr	r2, [pc, #156]	; (800444c <TIM_OC3_SetConfig+0xe4>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a23      	ldr	r2, [pc, #140]	; (8004450 <TIM_OC3_SetConfig+0xe8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10d      	bne.n	80043e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	4a22      	ldr	r2, [pc, #136]	; (8004454 <TIM_OC3_SetConfig+0xec>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <TIM_OC3_SetConfig+0xf0>)
 80043de:	4013      	ands	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a1a      	ldr	r2, [pc, #104]	; (8004450 <TIM_OC3_SetConfig+0xe8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <TIM_OC3_SetConfig+0x92>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <TIM_OC3_SetConfig+0xf4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_OC3_SetConfig+0x92>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <TIM_OC3_SetConfig+0xf8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d113      	bne.n	8004422 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4a19      	ldr	r2, [pc, #100]	; (8004464 <TIM_OC3_SetConfig+0xfc>)
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <TIM_OC3_SetConfig+0x100>)
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b006      	add	sp, #24
 8004442:	bd80      	pop	{r7, pc}
 8004444:	fffffeff 	.word	0xfffffeff
 8004448:	fffeff8f 	.word	0xfffeff8f
 800444c:	fffffdff 	.word	0xfffffdff
 8004450:	40012c00 	.word	0x40012c00
 8004454:	fffff7ff 	.word	0xfffff7ff
 8004458:	fffffbff 	.word	0xfffffbff
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800
 8004464:	ffffefff 	.word	0xffffefff
 8004468:	ffffdfff 	.word	0xffffdfff

0800446c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	4a26      	ldr	r2, [pc, #152]	; (8004514 <TIM_OC4_SetConfig+0xa8>)
 800447c:	401a      	ands	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a20      	ldr	r2, [pc, #128]	; (8004518 <TIM_OC4_SetConfig+0xac>)
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a1f      	ldr	r2, [pc, #124]	; (800451c <TIM_OC4_SetConfig+0xb0>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <TIM_OC4_SetConfig+0xb4>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	031b      	lsls	r3, r3, #12
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a17      	ldr	r2, [pc, #92]	; (8004524 <TIM_OC4_SetConfig+0xb8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <TIM_OC4_SetConfig+0x70>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a16      	ldr	r2, [pc, #88]	; (8004528 <TIM_OC4_SetConfig+0xbc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_OC4_SetConfig+0x70>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <TIM_OC4_SetConfig+0xc0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d109      	bne.n	80044f0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4a14      	ldr	r2, [pc, #80]	; (8004530 <TIM_OC4_SetConfig+0xc4>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	46bd      	mov	sp, r7
 800450e:	b006      	add	sp, #24
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	ffffefff 	.word	0xffffefff
 8004518:	feff8fff 	.word	0xfeff8fff
 800451c:	fffffcff 	.word	0xfffffcff
 8004520:	ffffdfff 	.word	0xffffdfff
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800
 8004530:	ffffbfff 	.word	0xffffbfff

08004534 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <TIM_OC5_SetConfig+0x9c>)
 8004544:	401a      	ands	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <TIM_OC5_SetConfig+0xa0>)
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4a19      	ldr	r2, [pc, #100]	; (80045d8 <TIM_OC5_SetConfig+0xa4>)
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <TIM_OC5_SetConfig+0xa8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <TIM_OC5_SetConfig+0x66>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <TIM_OC5_SetConfig+0xac>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <TIM_OC5_SetConfig+0x66>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <TIM_OC5_SetConfig+0xb0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d109      	bne.n	80045ae <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <TIM_OC5_SetConfig+0x9c>)
 800459e:	4013      	ands	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b006      	add	sp, #24
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	fffeffff 	.word	0xfffeffff
 80045d4:	fffeff8f 	.word	0xfffeff8f
 80045d8:	fffdffff 	.word	0xfffdffff
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800

080045e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4a24      	ldr	r2, [pc, #144]	; (8004688 <TIM_OC6_SetConfig+0xa0>)
 80045f8:	401a      	ands	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <TIM_OC6_SetConfig+0xa4>)
 8004614:	4013      	ands	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4a1a      	ldr	r2, [pc, #104]	; (8004690 <TIM_OC6_SetConfig+0xa8>)
 8004628:	4013      	ands	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	051b      	lsls	r3, r3, #20
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <TIM_OC6_SetConfig+0xac>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_OC6_SetConfig+0x68>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <TIM_OC6_SetConfig+0xb0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC6_SetConfig+0x68>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a14      	ldr	r2, [pc, #80]	; (800469c <TIM_OC6_SetConfig+0xb4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <TIM_OC6_SetConfig+0xb8>)
 8004654:	4013      	ands	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	ffefffff 	.word	0xffefffff
 800468c:	feff8fff 	.word	0xfeff8fff
 8004690:	ffdfffff 	.word	0xffdfffff
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800
 80046a0:	fffbffff 	.word	0xfffbffff

080046a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	2201      	movs	r2, #1
 80046bc:	4393      	bics	r3, r2
 80046be:	001a      	movs	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	22f0      	movs	r2, #240	; 0xf0
 80046ce:	4393      	bics	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	220a      	movs	r2, #10
 80046e0:	4393      	bics	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	621a      	str	r2, [r3, #32]
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b006      	add	sp, #24
 80046fe:	bd80      	pop	{r7, pc}

08004700 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	2210      	movs	r2, #16
 8004712:	4393      	bics	r3, r2
 8004714:	001a      	movs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <TIM_TI2_ConfigInputStage+0x60>)
 800472a:	4013      	ands	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	031b      	lsls	r3, r3, #12
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	22a0      	movs	r2, #160	; 0xa0
 800473c:	4393      	bics	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b006      	add	sp, #24
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	ffff0fff 	.word	0xffff0fff

08004764 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <TIM_ITRx_SetConfig+0x34>)
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	2207      	movs	r2, #7
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	609a      	str	r2, [r3, #8]
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	46bd      	mov	sp, r7
 8004792:	b004      	add	sp, #16
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	ffcfff8f 	.word	0xffcfff8f

0800479c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <TIM_ETR_SetConfig+0x3c>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	021a      	lsls	r2, r3, #8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	431a      	orrs	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	609a      	str	r2, [r3, #8]
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b006      	add	sp, #24
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	ffff00ff 	.word	0xffff00ff

080047dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	221f      	movs	r2, #31
 80047ec:	4013      	ands	r3, r2
 80047ee:	2201      	movs	r2, #1
 80047f0:	409a      	lsls	r2, r3
 80047f2:	0013      	movs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	43d2      	mvns	r2, r2
 80047fe:	401a      	ands	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	211f      	movs	r1, #31
 800480c:	400b      	ands	r3, r1
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4099      	lsls	r1, r3
 8004812:	000b      	movs	r3, r1
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	b006      	add	sp, #24
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	223c      	movs	r2, #60	; 0x3c
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e050      	b.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	223c      	movs	r2, #60	; 0x3c
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223d      	movs	r2, #61	; 0x3d
 8004848:	2102      	movs	r1, #2
 800484a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a20      	ldr	r2, [pc, #128]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800486a:	4013      	ands	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2270      	movs	r2, #112	; 0x70
 800487c:	4393      	bics	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00a      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	05db      	lsls	r3, r3, #23
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d004      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10c      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	4393      	bics	r3, r2
 80048b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	223d      	movs	r2, #61	; 0x3d
 80048d0:	2101      	movs	r1, #1
 80048d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	223c      	movs	r2, #60	; 0x3c
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b004      	add	sp, #16
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	ff0fffff 	.word	0xff0fffff
 80048f0:	40000400 	.word	0x40000400

080048f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	223c      	movs	r2, #60	; 0x3c
 8004906:	5c9b      	ldrb	r3, [r3, r2]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800490c:	2302      	movs	r3, #2
 800490e:	e079      	b.n	8004a04 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	223c      	movs	r2, #60	; 0x3c
 8004914:	2101      	movs	r1, #1
 8004916:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	22ff      	movs	r2, #255	; 0xff
 800491c:	4393      	bics	r3, r2
 800491e:	001a      	movs	r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a38      	ldr	r2, [pc, #224]	; (8004a0c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800492c:	401a      	ands	r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a35      	ldr	r2, [pc, #212]	; (8004a10 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800493a:	401a      	ands	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a33      	ldr	r2, [pc, #204]	; (8004a14 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004948:	401a      	ands	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a30      	ldr	r2, [pc, #192]	; (8004a18 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004956:	401a      	ands	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4a2e      	ldr	r2, [pc, #184]	; (8004a1c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004964:	401a      	ands	r2, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4a2b      	ldr	r2, [pc, #172]	; (8004a20 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004972:	401a      	ands	r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a29      	ldr	r2, [pc, #164]	; (8004a24 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004980:	401a      	ands	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d106      	bne.n	80049a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a24      	ldr	r2, [pc, #144]	; (8004a2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800499a:	401a      	ands	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d121      	bne.n	80049f2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80049b2:	401a      	ands	r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	051b      	lsls	r3, r3, #20
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80049c2:	401a      	ands	r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80049d0:	401a      	ands	r2, r3
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a12      	ldr	r2, [pc, #72]	; (8004a28 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d106      	bne.n	80049f2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80049e8:	401a      	ands	r2, r3
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	223c      	movs	r2, #60	; 0x3c
 80049fe:	2100      	movs	r1, #0
 8004a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b004      	add	sp, #16
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	fffffcff 	.word	0xfffffcff
 8004a10:	fffffbff 	.word	0xfffffbff
 8004a14:	fffff7ff 	.word	0xfffff7ff
 8004a18:	ffffefff 	.word	0xffffefff
 8004a1c:	ffffdfff 	.word	0xffffdfff
 8004a20:	ffffbfff 	.word	0xffffbfff
 8004a24:	fff0ffff 	.word	0xfff0ffff
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	efffffff 	.word	0xefffffff
 8004a30:	ff0fffff 	.word	0xff0fffff
 8004a34:	feffffff 	.word	0xfeffffff
 8004a38:	fdffffff 	.word	0xfdffffff
 8004a3c:	dfffffff 	.word	0xdfffffff

08004a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e046      	b.n	8004ae0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2288      	movs	r2, #136	; 0x88
 8004a56:	589b      	ldr	r3, [r3, r2]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2284      	movs	r2, #132	; 0x84
 8004a60:	2100      	movs	r1, #0
 8004a62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	0018      	movs	r0, r3
 8004a68:	f7fc fbc2 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2288      	movs	r2, #136	; 0x88
 8004a70:	2124      	movs	r1, #36	; 0x24
 8004a72:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2101      	movs	r1, #1
 8004a80:	438a      	bics	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 fb72 	bl	8005170 <UART_SetConfig>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e024      	b.n	8004ae0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f000 fddd 	bl	8005660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	490d      	ldr	r1, [pc, #52]	; (8004ae8 <HAL_UART_Init+0xa8>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	212a      	movs	r1, #42	; 0x2a
 8004ac2:	438a      	bics	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 fe75 	bl	80057c8 <UART_CheckIdleState>
 8004ade:	0003      	movs	r3, r0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	ffffb7ff 	.word	0xffffb7ff

08004aec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aec:	b5b0      	push	{r4, r5, r7, lr}
 8004aee:	b0aa      	sub	sp, #168	; 0xa8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	22a4      	movs	r2, #164	; 0xa4
 8004afc:	18b9      	adds	r1, r7, r2
 8004afe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	20a0      	movs	r0, #160	; 0xa0
 8004b08:	1839      	adds	r1, r7, r0
 8004b0a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	249c      	movs	r4, #156	; 0x9c
 8004b14:	1939      	adds	r1, r7, r4
 8004b16:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b18:	0011      	movs	r1, r2
 8004b1a:	18bb      	adds	r3, r7, r2
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4aa2      	ldr	r2, [pc, #648]	; (8004da8 <HAL_UART_IRQHandler+0x2bc>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	2298      	movs	r2, #152	; 0x98
 8004b24:	18bd      	adds	r5, r7, r2
 8004b26:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004b28:	18bb      	adds	r3, r7, r2
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d11a      	bne.n	8004b66 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b30:	187b      	adds	r3, r7, r1
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2220      	movs	r2, #32
 8004b36:	4013      	ands	r3, r2
 8004b38:	d015      	beq.n	8004b66 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b3a:	183b      	adds	r3, r7, r0
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	4013      	ands	r3, r2
 8004b42:	d105      	bne.n	8004b50 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b44:	193b      	adds	r3, r7, r4
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	055b      	lsls	r3, r3, #21
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d00a      	beq.n	8004b66 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d100      	bne.n	8004b5a <HAL_UART_IRQHandler+0x6e>
 8004b58:	e2dc      	b.n	8005114 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	0010      	movs	r0, r2
 8004b62:	4798      	blx	r3
      }
      return;
 8004b64:	e2d6      	b.n	8005114 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b66:	2398      	movs	r3, #152	; 0x98
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d100      	bne.n	8004b72 <HAL_UART_IRQHandler+0x86>
 8004b70:	e122      	b.n	8004db8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b72:	239c      	movs	r3, #156	; 0x9c
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a8c      	ldr	r2, [pc, #560]	; (8004dac <HAL_UART_IRQHandler+0x2c0>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d106      	bne.n	8004b8c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b7e:	23a0      	movs	r3, #160	; 0xa0
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a8a      	ldr	r2, [pc, #552]	; (8004db0 <HAL_UART_IRQHandler+0x2c4>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	d100      	bne.n	8004b8c <HAL_UART_IRQHandler+0xa0>
 8004b8a:	e115      	b.n	8004db8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b8c:	23a4      	movs	r3, #164	; 0xa4
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2201      	movs	r2, #1
 8004b94:	4013      	ands	r3, r2
 8004b96:	d012      	beq.n	8004bbe <HAL_UART_IRQHandler+0xd2>
 8004b98:	23a0      	movs	r3, #160	; 0xa0
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2201      	movs	r2, #1
 8004bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2290      	movs	r2, #144	; 0x90
 8004bb2:	589b      	ldr	r3, [r3, r2]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2190      	movs	r1, #144	; 0x90
 8004bbc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bbe:	23a4      	movs	r3, #164	; 0xa4
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d011      	beq.n	8004bee <HAL_UART_IRQHandler+0x102>
 8004bca:	239c      	movs	r3, #156	; 0x9c
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2290      	movs	r2, #144	; 0x90
 8004be2:	589b      	ldr	r3, [r3, r2]
 8004be4:	2204      	movs	r2, #4
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2190      	movs	r1, #144	; 0x90
 8004bec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bee:	23a4      	movs	r3, #164	; 0xa4
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d011      	beq.n	8004c1e <HAL_UART_IRQHandler+0x132>
 8004bfa:	239c      	movs	r3, #156	; 0x9c
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	4013      	ands	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2290      	movs	r2, #144	; 0x90
 8004c12:	589b      	ldr	r3, [r3, r2]
 8004c14:	2202      	movs	r2, #2
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2190      	movs	r1, #144	; 0x90
 8004c1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c1e:	23a4      	movs	r3, #164	; 0xa4
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2208      	movs	r2, #8
 8004c26:	4013      	ands	r3, r2
 8004c28:	d017      	beq.n	8004c5a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c2a:	23a0      	movs	r3, #160	; 0xa0
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2220      	movs	r2, #32
 8004c32:	4013      	ands	r3, r2
 8004c34:	d105      	bne.n	8004c42 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c36:	239c      	movs	r3, #156	; 0x9c
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5b      	ldr	r2, [pc, #364]	; (8004dac <HAL_UART_IRQHandler+0x2c0>)
 8004c3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c40:	d00b      	beq.n	8004c5a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2208      	movs	r2, #8
 8004c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2290      	movs	r2, #144	; 0x90
 8004c4e:	589b      	ldr	r3, [r3, r2]
 8004c50:	2208      	movs	r2, #8
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2190      	movs	r1, #144	; 0x90
 8004c58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c5a:	23a4      	movs	r3, #164	; 0xa4
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	4013      	ands	r3, r2
 8004c66:	d013      	beq.n	8004c90 <HAL_UART_IRQHandler+0x1a4>
 8004c68:	23a0      	movs	r3, #160	; 0xa0
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	04db      	lsls	r3, r3, #19
 8004c72:	4013      	ands	r3, r2
 8004c74:	d00c      	beq.n	8004c90 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2280      	movs	r2, #128	; 0x80
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2290      	movs	r2, #144	; 0x90
 8004c84:	589b      	ldr	r3, [r3, r2]
 8004c86:	2220      	movs	r2, #32
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2190      	movs	r1, #144	; 0x90
 8004c8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2290      	movs	r2, #144	; 0x90
 8004c94:	589b      	ldr	r3, [r3, r2]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d100      	bne.n	8004c9c <HAL_UART_IRQHandler+0x1b0>
 8004c9a:	e23d      	b.n	8005118 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c9c:	23a4      	movs	r3, #164	; 0xa4
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d015      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ca8:	23a0      	movs	r3, #160	; 0xa0
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d106      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cb4:	239c      	movs	r3, #156	; 0x9c
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	055b      	lsls	r3, r3, #21
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d008      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	0010      	movs	r0, r2
 8004cd2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2290      	movs	r2, #144	; 0x90
 8004cd8:	589b      	ldr	r3, [r3, r2]
 8004cda:	2194      	movs	r1, #148	; 0x94
 8004cdc:	187a      	adds	r2, r7, r1
 8004cde:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d004      	beq.n	8004cf8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2228      	movs	r2, #40	; 0x28
 8004cf4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cf6:	d04c      	beq.n	8004d92 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 fe7a 	bl	80059f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2240      	movs	r2, #64	; 0x40
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d13c      	bne.n	8004d88 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d12:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d16:	2090      	movs	r0, #144	; 0x90
 8004d18:	183a      	adds	r2, r7, r0
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d22:	f383 8810 	msr	PRIMASK, r3
}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2140      	movs	r1, #64	; 0x40
 8004d34:	438a      	bics	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	183b      	adds	r3, r7, r0
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d40:	f383 8810 	msr	PRIMASK, r3
}
 8004d44:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2280      	movs	r2, #128	; 0x80
 8004d4a:	589b      	ldr	r3, [r3, r2]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d016      	beq.n	8004d7e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	589b      	ldr	r3, [r3, r2]
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_UART_IRQHandler+0x2c8>)
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2280      	movs	r2, #128	; 0x80
 8004d5e:	589b      	ldr	r3, [r3, r2]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fd fc69 	bl	8002638 <HAL_DMA_Abort_IT>
 8004d66:	1e03      	subs	r3, r0, #0
 8004d68:	d01c      	beq.n	8004da4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	589b      	ldr	r3, [r3, r2]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	2180      	movs	r1, #128	; 0x80
 8004d76:	5852      	ldr	r2, [r2, r1]
 8004d78:	0010      	movs	r0, r2
 8004d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	e012      	b.n	8004da4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 f9e1 	bl	8005148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d86:	e00d      	b.n	8004da4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 f9dc 	bl	8005148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	e008      	b.n	8004da4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f000 f9d7 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2290      	movs	r2, #144	; 0x90
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004da2:	e1b9      	b.n	8005118 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da4:	46c0      	nop			; (mov r8, r8)
    return;
 8004da6:	e1b7      	b.n	8005118 <HAL_UART_IRQHandler+0x62c>
 8004da8:	0000080f 	.word	0x0000080f
 8004dac:	10000001 	.word	0x10000001
 8004db0:	04000120 	.word	0x04000120
 8004db4:	08005ac1 	.word	0x08005ac1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d000      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x2d6>
 8004dc0:	e13e      	b.n	8005040 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dc2:	23a4      	movs	r3, #164	; 0xa4
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2210      	movs	r2, #16
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d100      	bne.n	8004dd0 <HAL_UART_IRQHandler+0x2e4>
 8004dce:	e137      	b.n	8005040 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dd0:	23a0      	movs	r3, #160	; 0xa0
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d100      	bne.n	8004dde <HAL_UART_IRQHandler+0x2f2>
 8004ddc:	e130      	b.n	8005040 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2210      	movs	r2, #16
 8004de4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2240      	movs	r2, #64	; 0x40
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d000      	beq.n	8004df6 <HAL_UART_IRQHandler+0x30a>
 8004df4:	e0a4      	b.n	8004f40 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	589b      	ldr	r3, [r3, r2]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	217e      	movs	r1, #126	; 0x7e
 8004e02:	187b      	adds	r3, r7, r1
 8004e04:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004e06:	187b      	adds	r3, r7, r1
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d100      	bne.n	8004e10 <HAL_UART_IRQHandler+0x324>
 8004e0e:	e185      	b.n	800511c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	225c      	movs	r2, #92	; 0x5c
 8004e14:	5a9b      	ldrh	r3, [r3, r2]
 8004e16:	187a      	adds	r2, r7, r1
 8004e18:	8812      	ldrh	r2, [r2, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d300      	bcc.n	8004e20 <HAL_UART_IRQHandler+0x334>
 8004e1e:	e17d      	b.n	800511c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	187a      	adds	r2, r7, r1
 8004e24:	215e      	movs	r1, #94	; 0x5e
 8004e26:	8812      	ldrh	r2, [r2, #0]
 8004e28:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	589b      	ldr	r3, [r3, r2]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2220      	movs	r2, #32
 8004e36:	4013      	ands	r3, r2
 8004e38:	d170      	bne.n	8004f1c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e42:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e44:	2301      	movs	r3, #1
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	f383 8810 	msr	PRIMASK, r3
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	49b4      	ldr	r1, [pc, #720]	; (800512c <HAL_UART_IRQHandler+0x640>)
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	f383 8810 	msr	PRIMASK, r3
}
 8004e6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	677b      	str	r3, [r7, #116]	; 0x74
 8004e76:	2301      	movs	r3, #1
 8004e78:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7c:	f383 8810 	msr	PRIMASK, r3
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	438a      	bics	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e94:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2140      	movs	r1, #64	; 0x40
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]
 8004ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	228c      	movs	r2, #140	; 0x8c
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ede:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ee8:	2301      	movs	r3, #1
 8004eea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eee:	f383 8810 	msr	PRIMASK, r3
}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2110      	movs	r1, #16
 8004f00:	438a      	bics	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f06:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0a:	f383 8810 	msr	PRIMASK, r3
}
 8004f0e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	589b      	ldr	r3, [r3, r2]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7fd fb2c 	bl	8002574 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	225c      	movs	r2, #92	; 0x5c
 8004f26:	5a9a      	ldrh	r2, [r3, r2]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	215e      	movs	r1, #94	; 0x5e
 8004f2c:	5a5b      	ldrh	r3, [r3, r1]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f000 f90d 	bl	8005158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f3e:	e0ed      	b.n	800511c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	225c      	movs	r2, #92	; 0x5c
 8004f44:	5a99      	ldrh	r1, [r3, r2]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	225e      	movs	r2, #94	; 0x5e
 8004f4a:	5a9b      	ldrh	r3, [r3, r2]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	208e      	movs	r0, #142	; 0x8e
 8004f50:	183b      	adds	r3, r7, r0
 8004f52:	1a8a      	subs	r2, r1, r2
 8004f54:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	225e      	movs	r2, #94	; 0x5e
 8004f5a:	5a9b      	ldrh	r3, [r3, r2]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d100      	bne.n	8004f64 <HAL_UART_IRQHandler+0x478>
 8004f62:	e0dd      	b.n	8005120 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004f64:	183b      	adds	r3, r7, r0
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d100      	bne.n	8004f6e <HAL_UART_IRQHandler+0x482>
 8004f6c:	e0d8      	b.n	8005120 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f72:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f74:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f76:	2488      	movs	r4, #136	; 0x88
 8004f78:	193a      	adds	r2, r7, r4
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4967      	ldr	r1, [pc, #412]	; (8005130 <HAL_UART_IRQHandler+0x644>)
 8004f94:	400a      	ands	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	193b      	adds	r3, r7, r4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f383 8810 	msr	PRIMASK, r3
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8004faa:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fac:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fae:	2484      	movs	r4, #132	; 0x84
 8004fb0:	193a      	adds	r2, r7, r4
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f383 8810 	msr	PRIMASK, r3
}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	495a      	ldr	r1, [pc, #360]	; (8005134 <HAL_UART_IRQHandler+0x648>)
 8004fcc:	400a      	ands	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	193b      	adds	r3, r7, r4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	228c      	movs	r2, #140	; 0x8c
 8004fe2:	2120      	movs	r1, #32
 8004fe4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffa:	2480      	movs	r4, #128	; 0x80
 8004ffc:	193a      	adds	r2, r7, r4
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	2301      	movs	r3, #1
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2110      	movs	r1, #16
 8005018:	438a      	bics	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	193b      	adds	r3, r7, r4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	f383 8810 	msr	PRIMASK, r3
}
 8005028:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005030:	183b      	adds	r3, r7, r0
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	0011      	movs	r1, r2
 8005038:	0018      	movs	r0, r3
 800503a:	f000 f88d 	bl	8005158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800503e:	e06f      	b.n	8005120 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005040:	23a4      	movs	r3, #164	; 0xa4
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	035b      	lsls	r3, r3, #13
 800504a:	4013      	ands	r3, r2
 800504c:	d010      	beq.n	8005070 <HAL_UART_IRQHandler+0x584>
 800504e:	239c      	movs	r3, #156	; 0x9c
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	03db      	lsls	r3, r3, #15
 8005058:	4013      	ands	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2280      	movs	r2, #128	; 0x80
 8005062:	0352      	lsls	r2, r2, #13
 8005064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	0018      	movs	r0, r3
 800506a:	f000 fddf 	bl	8005c2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800506e:	e05a      	b.n	8005126 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005070:	23a4      	movs	r3, #164	; 0xa4
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2280      	movs	r2, #128	; 0x80
 8005078:	4013      	ands	r3, r2
 800507a:	d016      	beq.n	80050aa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800507c:	23a0      	movs	r3, #160	; 0xa0
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2280      	movs	r2, #128	; 0x80
 8005084:	4013      	ands	r3, r2
 8005086:	d106      	bne.n	8005096 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005088:	239c      	movs	r3, #156	; 0x9c
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	4013      	ands	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509a:	2b00      	cmp	r3, #0
 800509c:	d042      	beq.n	8005124 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	0010      	movs	r0, r2
 80050a6:	4798      	blx	r3
    }
    return;
 80050a8:	e03c      	b.n	8005124 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050aa:	23a4      	movs	r3, #164	; 0xa4
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2240      	movs	r2, #64	; 0x40
 80050b2:	4013      	ands	r3, r2
 80050b4:	d00a      	beq.n	80050cc <HAL_UART_IRQHandler+0x5e0>
 80050b6:	23a0      	movs	r3, #160	; 0xa0
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2240      	movs	r2, #64	; 0x40
 80050be:	4013      	ands	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 fd12 	bl	8005aee <UART_EndTransmit_IT>
    return;
 80050ca:	e02c      	b.n	8005126 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050cc:	23a4      	movs	r3, #164	; 0xa4
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	4013      	ands	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <HAL_UART_IRQHandler+0x606>
 80050da:	23a0      	movs	r3, #160	; 0xa0
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	05db      	lsls	r3, r3, #23
 80050e4:	4013      	ands	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 fdae 	bl	8005c4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050f0:	e019      	b.n	8005126 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050f2:	23a4      	movs	r3, #164	; 0xa4
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	045b      	lsls	r3, r3, #17
 80050fc:	4013      	ands	r3, r2
 80050fe:	d012      	beq.n	8005126 <HAL_UART_IRQHandler+0x63a>
 8005100:	23a0      	movs	r3, #160	; 0xa0
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	da0d      	bge.n	8005126 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0018      	movs	r0, r3
 800510e:	f000 fd95 	bl	8005c3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005112:	e008      	b.n	8005126 <HAL_UART_IRQHandler+0x63a>
      return;
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	e006      	b.n	8005126 <HAL_UART_IRQHandler+0x63a>
    return;
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	e004      	b.n	8005126 <HAL_UART_IRQHandler+0x63a>
      return;
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	e002      	b.n	8005126 <HAL_UART_IRQHandler+0x63a>
      return;
 8005120:	46c0      	nop			; (mov r8, r8)
 8005122:	e000      	b.n	8005126 <HAL_UART_IRQHandler+0x63a>
    return;
 8005124:	46c0      	nop			; (mov r8, r8)
  }
}
 8005126:	46bd      	mov	sp, r7
 8005128:	b02a      	add	sp, #168	; 0xa8
 800512a:	bdb0      	pop	{r4, r5, r7, pc}
 800512c:	fffffeff 	.word	0xfffffeff
 8005130:	fffffedf 	.word	0xfffffedf
 8005134:	effffffe 	.word	0xeffffffe

08005138 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	b002      	add	sp, #8
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	000a      	movs	r2, r1
 8005162:	1cbb      	adds	r3, r7, #2
 8005164:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b002      	add	sp, #8
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005170:	b5b0      	push	{r4, r5, r7, lr}
 8005172:	b090      	sub	sp, #64	; 0x40
 8005174:	af00      	add	r7, sp, #0
 8005176:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005178:	231a      	movs	r3, #26
 800517a:	2220      	movs	r2, #32
 800517c:	189b      	adds	r3, r3, r2
 800517e:	19db      	adds	r3, r3, r7
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	431a      	orrs	r2, r3
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4ac4      	ldr	r2, [pc, #784]	; (80054b4 <UART_SetConfig+0x344>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ae:	430b      	orrs	r3, r1
 80051b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4abf      	ldr	r2, [pc, #764]	; (80054b8 <UART_SetConfig+0x348>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	0018      	movs	r0, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	68d9      	ldr	r1, [r3, #12]
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	0003      	movs	r3, r0
 80051c8:	430b      	orrs	r3, r1
 80051ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4ab9      	ldr	r2, [pc, #740]	; (80054bc <UART_SetConfig+0x34c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051e2:	4313      	orrs	r3, r2
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4ab4      	ldr	r2, [pc, #720]	; (80054c0 <UART_SetConfig+0x350>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	0019      	movs	r1, r3
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	220f      	movs	r2, #15
 8005204:	4393      	bics	r3, r2
 8005206:	0018      	movs	r0, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	0003      	movs	r3, r0
 8005212:	430b      	orrs	r3, r1
 8005214:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4aaa      	ldr	r2, [pc, #680]	; (80054c4 <UART_SetConfig+0x354>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d131      	bne.n	8005284 <UART_SetConfig+0x114>
 8005220:	4ba9      	ldr	r3, [pc, #676]	; (80054c8 <UART_SetConfig+0x358>)
 8005222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005224:	2203      	movs	r2, #3
 8005226:	4013      	ands	r3, r2
 8005228:	2b03      	cmp	r3, #3
 800522a:	d01d      	beq.n	8005268 <UART_SetConfig+0xf8>
 800522c:	d823      	bhi.n	8005276 <UART_SetConfig+0x106>
 800522e:	2b02      	cmp	r3, #2
 8005230:	d00c      	beq.n	800524c <UART_SetConfig+0xdc>
 8005232:	d820      	bhi.n	8005276 <UART_SetConfig+0x106>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <UART_SetConfig+0xce>
 8005238:	2b01      	cmp	r3, #1
 800523a:	d00e      	beq.n	800525a <UART_SetConfig+0xea>
 800523c:	e01b      	b.n	8005276 <UART_SetConfig+0x106>
 800523e:	231b      	movs	r3, #27
 8005240:	2220      	movs	r2, #32
 8005242:	189b      	adds	r3, r3, r2
 8005244:	19db      	adds	r3, r3, r7
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e071      	b.n	8005330 <UART_SetConfig+0x1c0>
 800524c:	231b      	movs	r3, #27
 800524e:	2220      	movs	r2, #32
 8005250:	189b      	adds	r3, r3, r2
 8005252:	19db      	adds	r3, r3, r7
 8005254:	2202      	movs	r2, #2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e06a      	b.n	8005330 <UART_SetConfig+0x1c0>
 800525a:	231b      	movs	r3, #27
 800525c:	2220      	movs	r2, #32
 800525e:	189b      	adds	r3, r3, r2
 8005260:	19db      	adds	r3, r3, r7
 8005262:	2204      	movs	r2, #4
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e063      	b.n	8005330 <UART_SetConfig+0x1c0>
 8005268:	231b      	movs	r3, #27
 800526a:	2220      	movs	r2, #32
 800526c:	189b      	adds	r3, r3, r2
 800526e:	19db      	adds	r3, r3, r7
 8005270:	2208      	movs	r2, #8
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e05c      	b.n	8005330 <UART_SetConfig+0x1c0>
 8005276:	231b      	movs	r3, #27
 8005278:	2220      	movs	r2, #32
 800527a:	189b      	adds	r3, r3, r2
 800527c:	19db      	adds	r3, r3, r7
 800527e:	2210      	movs	r2, #16
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e055      	b.n	8005330 <UART_SetConfig+0x1c0>
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a90      	ldr	r2, [pc, #576]	; (80054cc <UART_SetConfig+0x35c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d106      	bne.n	800529c <UART_SetConfig+0x12c>
 800528e:	231b      	movs	r3, #27
 8005290:	2220      	movs	r2, #32
 8005292:	189b      	adds	r3, r3, r2
 8005294:	19db      	adds	r3, r3, r7
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e049      	b.n	8005330 <UART_SetConfig+0x1c0>
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a86      	ldr	r2, [pc, #536]	; (80054bc <UART_SetConfig+0x34c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d13e      	bne.n	8005324 <UART_SetConfig+0x1b4>
 80052a6:	4b88      	ldr	r3, [pc, #544]	; (80054c8 <UART_SetConfig+0x358>)
 80052a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052aa:	23c0      	movs	r3, #192	; 0xc0
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	4013      	ands	r3, r2
 80052b0:	22c0      	movs	r2, #192	; 0xc0
 80052b2:	0112      	lsls	r2, r2, #4
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d027      	beq.n	8005308 <UART_SetConfig+0x198>
 80052b8:	22c0      	movs	r2, #192	; 0xc0
 80052ba:	0112      	lsls	r2, r2, #4
 80052bc:	4293      	cmp	r3, r2
 80052be:	d82a      	bhi.n	8005316 <UART_SetConfig+0x1a6>
 80052c0:	2280      	movs	r2, #128	; 0x80
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d011      	beq.n	80052ec <UART_SetConfig+0x17c>
 80052c8:	2280      	movs	r2, #128	; 0x80
 80052ca:	0112      	lsls	r2, r2, #4
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d822      	bhi.n	8005316 <UART_SetConfig+0x1a6>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <UART_SetConfig+0x16e>
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	00d2      	lsls	r2, r2, #3
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <UART_SetConfig+0x18a>
 80052dc:	e01b      	b.n	8005316 <UART_SetConfig+0x1a6>
 80052de:	231b      	movs	r3, #27
 80052e0:	2220      	movs	r2, #32
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	19db      	adds	r3, r3, r7
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	e021      	b.n	8005330 <UART_SetConfig+0x1c0>
 80052ec:	231b      	movs	r3, #27
 80052ee:	2220      	movs	r2, #32
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	19db      	adds	r3, r3, r7
 80052f4:	2202      	movs	r2, #2
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e01a      	b.n	8005330 <UART_SetConfig+0x1c0>
 80052fa:	231b      	movs	r3, #27
 80052fc:	2220      	movs	r2, #32
 80052fe:	189b      	adds	r3, r3, r2
 8005300:	19db      	adds	r3, r3, r7
 8005302:	2204      	movs	r2, #4
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e013      	b.n	8005330 <UART_SetConfig+0x1c0>
 8005308:	231b      	movs	r3, #27
 800530a:	2220      	movs	r2, #32
 800530c:	189b      	adds	r3, r3, r2
 800530e:	19db      	adds	r3, r3, r7
 8005310:	2208      	movs	r2, #8
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e00c      	b.n	8005330 <UART_SetConfig+0x1c0>
 8005316:	231b      	movs	r3, #27
 8005318:	2220      	movs	r2, #32
 800531a:	189b      	adds	r3, r3, r2
 800531c:	19db      	adds	r3, r3, r7
 800531e:	2210      	movs	r2, #16
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e005      	b.n	8005330 <UART_SetConfig+0x1c0>
 8005324:	231b      	movs	r3, #27
 8005326:	2220      	movs	r2, #32
 8005328:	189b      	adds	r3, r3, r2
 800532a:	19db      	adds	r3, r3, r7
 800532c:	2210      	movs	r2, #16
 800532e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a61      	ldr	r2, [pc, #388]	; (80054bc <UART_SetConfig+0x34c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d000      	beq.n	800533c <UART_SetConfig+0x1cc>
 800533a:	e092      	b.n	8005462 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800533c:	231b      	movs	r3, #27
 800533e:	2220      	movs	r2, #32
 8005340:	189b      	adds	r3, r3, r2
 8005342:	19db      	adds	r3, r3, r7
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b08      	cmp	r3, #8
 8005348:	d015      	beq.n	8005376 <UART_SetConfig+0x206>
 800534a:	dc18      	bgt.n	800537e <UART_SetConfig+0x20e>
 800534c:	2b04      	cmp	r3, #4
 800534e:	d00d      	beq.n	800536c <UART_SetConfig+0x1fc>
 8005350:	dc15      	bgt.n	800537e <UART_SetConfig+0x20e>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <UART_SetConfig+0x1ec>
 8005356:	2b02      	cmp	r3, #2
 8005358:	d005      	beq.n	8005366 <UART_SetConfig+0x1f6>
 800535a:	e010      	b.n	800537e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7fe f994 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8005360:	0003      	movs	r3, r0
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005364:	e014      	b.n	8005390 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005366:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <UART_SetConfig+0x360>)
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800536a:	e011      	b.n	8005390 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536c:	f7fe f900 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8005370:	0003      	movs	r3, r0
 8005372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005374:	e00c      	b.n	8005390 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800537c:	e008      	b.n	8005390 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005382:	231a      	movs	r3, #26
 8005384:	2220      	movs	r2, #32
 8005386:	189b      	adds	r3, r3, r2
 8005388:	19db      	adds	r3, r3, r7
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
        break;
 800538e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	2b00      	cmp	r3, #0
 8005394:	d100      	bne.n	8005398 <UART_SetConfig+0x228>
 8005396:	e147      	b.n	8005628 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800539c:	4b4d      	ldr	r3, [pc, #308]	; (80054d4 <UART_SetConfig+0x364>)
 800539e:	0052      	lsls	r2, r2, #1
 80053a0:	5ad3      	ldrh	r3, [r2, r3]
 80053a2:	0019      	movs	r1, r3
 80053a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053a6:	f7fa fead 	bl	8000104 <__udivsi3>
 80053aa:	0003      	movs	r3, r0
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	0013      	movs	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	189b      	adds	r3, r3, r2
 80053b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d305      	bcc.n	80053ca <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d906      	bls.n	80053d8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80053ca:	231a      	movs	r3, #26
 80053cc:	2220      	movs	r2, #32
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	19db      	adds	r3, r3, r7
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	e127      	b.n	8005628 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e4:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <UART_SetConfig+0x364>)
 80053e6:	0052      	lsls	r2, r2, #1
 80053e8:	5ad3      	ldrh	r3, [r2, r3]
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	69b8      	ldr	r0, [r7, #24]
 80053f6:	69f9      	ldr	r1, [r7, #28]
 80053f8:	f7fa fffa 	bl	80003f0 <__aeabi_uldivmod>
 80053fc:	0002      	movs	r2, r0
 80053fe:	000b      	movs	r3, r1
 8005400:	0e11      	lsrs	r1, r2, #24
 8005402:	021d      	lsls	r5, r3, #8
 8005404:	430d      	orrs	r5, r1
 8005406:	0214      	lsls	r4, r2, #8
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68b8      	ldr	r0, [r7, #8]
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	1900      	adds	r0, r0, r4
 800541a:	4169      	adcs	r1, r5
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f7fa ffe1 	bl	80003f0 <__aeabi_uldivmod>
 800542e:	0002      	movs	r2, r0
 8005430:	000b      	movs	r3, r1
 8005432:	0013      	movs	r3, r2
 8005434:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005438:	23c0      	movs	r3, #192	; 0xc0
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	429a      	cmp	r2, r3
 800543e:	d309      	bcc.n	8005454 <UART_SetConfig+0x2e4>
 8005440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	035b      	lsls	r3, r3, #13
 8005446:	429a      	cmp	r2, r3
 8005448:	d204      	bcs.n	8005454 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	e0e9      	b.n	8005628 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005454:	231a      	movs	r3, #26
 8005456:	2220      	movs	r2, #32
 8005458:	189b      	adds	r3, r3, r2
 800545a:	19db      	adds	r3, r3, r7
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e0e2      	b.n	8005628 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	429a      	cmp	r2, r3
 800546c:	d000      	beq.n	8005470 <UART_SetConfig+0x300>
 800546e:	e083      	b.n	8005578 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005470:	231b      	movs	r3, #27
 8005472:	2220      	movs	r2, #32
 8005474:	189b      	adds	r3, r3, r2
 8005476:	19db      	adds	r3, r3, r7
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b08      	cmp	r3, #8
 800547c:	d015      	beq.n	80054aa <UART_SetConfig+0x33a>
 800547e:	dc2b      	bgt.n	80054d8 <UART_SetConfig+0x368>
 8005480:	2b04      	cmp	r3, #4
 8005482:	d00d      	beq.n	80054a0 <UART_SetConfig+0x330>
 8005484:	dc28      	bgt.n	80054d8 <UART_SetConfig+0x368>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <UART_SetConfig+0x320>
 800548a:	2b02      	cmp	r3, #2
 800548c:	d005      	beq.n	800549a <UART_SetConfig+0x32a>
 800548e:	e023      	b.n	80054d8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005490:	f7fe f8fa 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8005494:	0003      	movs	r3, r0
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005498:	e027      	b.n	80054ea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <UART_SetConfig+0x360>)
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800549e:	e024      	b.n	80054ea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a0:	f7fe f866 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 80054a4:	0003      	movs	r3, r0
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054a8:	e01f      	b.n	80054ea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054b0:	e01b      	b.n	80054ea <UART_SetConfig+0x37a>
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	cfff69f3 	.word	0xcfff69f3
 80054b8:	ffffcfff 	.word	0xffffcfff
 80054bc:	40008000 	.word	0x40008000
 80054c0:	11fff4ff 	.word	0x11fff4ff
 80054c4:	40013800 	.word	0x40013800
 80054c8:	40021000 	.word	0x40021000
 80054cc:	40004400 	.word	0x40004400
 80054d0:	00f42400 	.word	0x00f42400
 80054d4:	08005fb4 	.word	0x08005fb4
      default:
        pclk = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054dc:	231a      	movs	r3, #26
 80054de:	2220      	movs	r2, #32
 80054e0:	189b      	adds	r3, r3, r2
 80054e2:	19db      	adds	r3, r3, r7
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
        break;
 80054e8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d100      	bne.n	80054f2 <UART_SetConfig+0x382>
 80054f0:	e09a      	b.n	8005628 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f6:	4b58      	ldr	r3, [pc, #352]	; (8005658 <UART_SetConfig+0x4e8>)
 80054f8:	0052      	lsls	r2, r2, #1
 80054fa:	5ad3      	ldrh	r3, [r2, r3]
 80054fc:	0019      	movs	r1, r3
 80054fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005500:	f7fa fe00 	bl	8000104 <__udivsi3>
 8005504:	0003      	movs	r3, r0
 8005506:	005a      	lsls	r2, r3, #1
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	18d2      	adds	r2, r2, r3
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	0019      	movs	r1, r3
 8005516:	0010      	movs	r0, r2
 8005518:	f7fa fdf4 	bl	8000104 <__udivsi3>
 800551c:	0003      	movs	r3, r0
 800551e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	2b0f      	cmp	r3, #15
 8005524:	d921      	bls.n	800556a <UART_SetConfig+0x3fa>
 8005526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	025b      	lsls	r3, r3, #9
 800552c:	429a      	cmp	r2, r3
 800552e:	d21c      	bcs.n	800556a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	b29a      	uxth	r2, r3
 8005534:	200e      	movs	r0, #14
 8005536:	2420      	movs	r4, #32
 8005538:	1903      	adds	r3, r0, r4
 800553a:	19db      	adds	r3, r3, r7
 800553c:	210f      	movs	r1, #15
 800553e:	438a      	bics	r2, r1
 8005540:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	2207      	movs	r2, #7
 800554a:	4013      	ands	r3, r2
 800554c:	b299      	uxth	r1, r3
 800554e:	1903      	adds	r3, r0, r4
 8005550:	19db      	adds	r3, r3, r7
 8005552:	1902      	adds	r2, r0, r4
 8005554:	19d2      	adds	r2, r2, r7
 8005556:	8812      	ldrh	r2, [r2, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	1902      	adds	r2, r0, r4
 8005562:	19d2      	adds	r2, r2, r7
 8005564:	8812      	ldrh	r2, [r2, #0]
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	e05e      	b.n	8005628 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800556a:	231a      	movs	r3, #26
 800556c:	2220      	movs	r2, #32
 800556e:	189b      	adds	r3, r3, r2
 8005570:	19db      	adds	r3, r3, r7
 8005572:	2201      	movs	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e057      	b.n	8005628 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005578:	231b      	movs	r3, #27
 800557a:	2220      	movs	r2, #32
 800557c:	189b      	adds	r3, r3, r2
 800557e:	19db      	adds	r3, r3, r7
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b08      	cmp	r3, #8
 8005584:	d015      	beq.n	80055b2 <UART_SetConfig+0x442>
 8005586:	dc18      	bgt.n	80055ba <UART_SetConfig+0x44a>
 8005588:	2b04      	cmp	r3, #4
 800558a:	d00d      	beq.n	80055a8 <UART_SetConfig+0x438>
 800558c:	dc15      	bgt.n	80055ba <UART_SetConfig+0x44a>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <UART_SetConfig+0x428>
 8005592:	2b02      	cmp	r3, #2
 8005594:	d005      	beq.n	80055a2 <UART_SetConfig+0x432>
 8005596:	e010      	b.n	80055ba <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005598:	f7fe f876 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 800559c:	0003      	movs	r3, r0
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055a0:	e014      	b.n	80055cc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a2:	4b2e      	ldr	r3, [pc, #184]	; (800565c <UART_SetConfig+0x4ec>)
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055a6:	e011      	b.n	80055cc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a8:	f7fd ffe2 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 80055ac:	0003      	movs	r3, r0
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055b0:	e00c      	b.n	80055cc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	021b      	lsls	r3, r3, #8
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055b8:	e008      	b.n	80055cc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80055be:	231a      	movs	r3, #26
 80055c0:	2220      	movs	r2, #32
 80055c2:	189b      	adds	r3, r3, r2
 80055c4:	19db      	adds	r3, r3, r7
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
        break;
 80055ca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d02a      	beq.n	8005628 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <UART_SetConfig+0x4e8>)
 80055d8:	0052      	lsls	r2, r2, #1
 80055da:	5ad3      	ldrh	r3, [r2, r3]
 80055dc:	0019      	movs	r1, r3
 80055de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055e0:	f7fa fd90 	bl	8000104 <__udivsi3>
 80055e4:	0003      	movs	r3, r0
 80055e6:	001a      	movs	r2, r3
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	085b      	lsrs	r3, r3, #1
 80055ee:	18d2      	adds	r2, r2, r3
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	0019      	movs	r1, r3
 80055f6:	0010      	movs	r0, r2
 80055f8:	f7fa fd84 	bl	8000104 <__udivsi3>
 80055fc:	0003      	movs	r3, r0
 80055fe:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	2b0f      	cmp	r3, #15
 8005604:	d90a      	bls.n	800561c <UART_SetConfig+0x4ac>
 8005606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	025b      	lsls	r3, r3, #9
 800560c:	429a      	cmp	r2, r3
 800560e:	d205      	bcs.n	800561c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	b29a      	uxth	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	e005      	b.n	8005628 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800561c:	231a      	movs	r3, #26
 800561e:	2220      	movs	r2, #32
 8005620:	189b      	adds	r3, r3, r2
 8005622:	19db      	adds	r3, r3, r7
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	226a      	movs	r2, #106	; 0x6a
 800562c:	2101      	movs	r1, #1
 800562e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	2268      	movs	r2, #104	; 0x68
 8005634:	2101      	movs	r1, #1
 8005636:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	2200      	movs	r2, #0
 800563c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	2200      	movs	r2, #0
 8005642:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005644:	231a      	movs	r3, #26
 8005646:	2220      	movs	r2, #32
 8005648:	189b      	adds	r3, r3, r2
 800564a:	19db      	adds	r3, r3, r7
 800564c:	781b      	ldrb	r3, [r3, #0]
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b010      	add	sp, #64	; 0x40
 8005654:	bdb0      	pop	{r4, r5, r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	08005fb4 	.word	0x08005fb4
 800565c:	00f42400 	.word	0x00f42400

08005660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	2201      	movs	r2, #1
 800566e:	4013      	ands	r3, r2
 8005670:	d00b      	beq.n	800568a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a4a      	ldr	r2, [pc, #296]	; (80057a4 <UART_AdvFeatureConfig+0x144>)
 800567a:	4013      	ands	r3, r2
 800567c:	0019      	movs	r1, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	2202      	movs	r2, #2
 8005690:	4013      	ands	r3, r2
 8005692:	d00b      	beq.n	80056ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4a43      	ldr	r2, [pc, #268]	; (80057a8 <UART_AdvFeatureConfig+0x148>)
 800569c:	4013      	ands	r3, r2
 800569e:	0019      	movs	r1, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	2204      	movs	r2, #4
 80056b2:	4013      	ands	r3, r2
 80056b4:	d00b      	beq.n	80056ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4a3b      	ldr	r2, [pc, #236]	; (80057ac <UART_AdvFeatureConfig+0x14c>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	2208      	movs	r2, #8
 80056d4:	4013      	ands	r3, r2
 80056d6:	d00b      	beq.n	80056f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4a34      	ldr	r2, [pc, #208]	; (80057b0 <UART_AdvFeatureConfig+0x150>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	0019      	movs	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	2210      	movs	r2, #16
 80056f6:	4013      	ands	r3, r2
 80056f8:	d00b      	beq.n	8005712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4a2c      	ldr	r2, [pc, #176]	; (80057b4 <UART_AdvFeatureConfig+0x154>)
 8005702:	4013      	ands	r3, r2
 8005704:	0019      	movs	r1, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	2220      	movs	r2, #32
 8005718:	4013      	ands	r3, r2
 800571a:	d00b      	beq.n	8005734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <UART_AdvFeatureConfig+0x158>)
 8005724:	4013      	ands	r3, r2
 8005726:	0019      	movs	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	4013      	ands	r3, r2
 800573c:	d01d      	beq.n	800577a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <UART_AdvFeatureConfig+0x15c>)
 8005746:	4013      	ands	r3, r2
 8005748:	0019      	movs	r1, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	035b      	lsls	r3, r3, #13
 800575e:	429a      	cmp	r2, r3
 8005760:	d10b      	bne.n	800577a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <UART_AdvFeatureConfig+0x160>)
 800576a:	4013      	ands	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	4013      	ands	r3, r2
 8005782:	d00b      	beq.n	800579c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <UART_AdvFeatureConfig+0x164>)
 800578c:	4013      	ands	r3, r2
 800578e:	0019      	movs	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	b002      	add	sp, #8
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	fffdffff 	.word	0xfffdffff
 80057a8:	fffeffff 	.word	0xfffeffff
 80057ac:	fffbffff 	.word	0xfffbffff
 80057b0:	ffff7fff 	.word	0xffff7fff
 80057b4:	ffffefff 	.word	0xffffefff
 80057b8:	ffffdfff 	.word	0xffffdfff
 80057bc:	ffefffff 	.word	0xffefffff
 80057c0:	ff9fffff 	.word	0xff9fffff
 80057c4:	fff7ffff 	.word	0xfff7ffff

080057c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2290      	movs	r2, #144	; 0x90
 80057d4:	2100      	movs	r1, #0
 80057d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057d8:	f7fb fe52 	bl	8001480 <HAL_GetTick>
 80057dc:	0003      	movs	r3, r0
 80057de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2208      	movs	r2, #8
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d10c      	bne.n	8005808 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	0391      	lsls	r1, r2, #14
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4a1a      	ldr	r2, [pc, #104]	; (8005860 <UART_CheckIdleState+0x98>)
 80057f8:	9200      	str	r2, [sp, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f000 f832 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 8005800:	1e03      	subs	r3, r0, #0
 8005802:	d001      	beq.n	8005808 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e026      	b.n	8005856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2204      	movs	r2, #4
 8005810:	4013      	ands	r3, r2
 8005812:	2b04      	cmp	r3, #4
 8005814:	d10c      	bne.n	8005830 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	03d1      	lsls	r1, r2, #15
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4a10      	ldr	r2, [pc, #64]	; (8005860 <UART_CheckIdleState+0x98>)
 8005820:	9200      	str	r2, [sp, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	f000 f81e 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 8005828:	1e03      	subs	r3, r0, #0
 800582a:	d001      	beq.n	8005830 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e012      	b.n	8005856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2288      	movs	r2, #136	; 0x88
 8005834:	2120      	movs	r1, #32
 8005836:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	228c      	movs	r2, #140	; 0x8c
 800583c:	2120      	movs	r1, #32
 800583e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2284      	movs	r2, #132	; 0x84
 8005850:	2100      	movs	r1, #0
 8005852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	0018      	movs	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	b004      	add	sp, #16
 800585c:	bd80      	pop	{r7, pc}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	01ffffff 	.word	0x01ffffff

08005864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b094      	sub	sp, #80	; 0x50
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	1dfb      	adds	r3, r7, #7
 8005872:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005874:	e0a7      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005878:	3301      	adds	r3, #1
 800587a:	d100      	bne.n	800587e <UART_WaitOnFlagUntilTimeout+0x1a>
 800587c:	e0a3      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7fb fdff 	bl	8001480 <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <UART_WaitOnFlagUntilTimeout+0x30>
 800588e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005890:	2b00      	cmp	r3, #0
 8005892:	d13f      	bne.n	8005914 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005894:	f3ef 8310 	mrs	r3, PRIMASK
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800589c:	647b      	str	r3, [r7, #68]	; 0x44
 800589e:	2301      	movs	r3, #1
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	f383 8810 	msr	PRIMASK, r3
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	494e      	ldr	r1, [pc, #312]	; (80059f0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80058b6:	400a      	ands	r2, r1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058bc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	f383 8810 	msr	PRIMASK, r3
}
 80058c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c6:	f3ef 8310 	mrs	r3, PRIMASK
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	643b      	str	r3, [r7, #64]	; 0x40
 80058d0:	2301      	movs	r3, #1
 80058d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f383 8810 	msr	PRIMASK, r3
}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2101      	movs	r1, #1
 80058e8:	438a      	bics	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	f383 8810 	msr	PRIMASK, r3
}
 80058f6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2288      	movs	r2, #136	; 0x88
 80058fc:	2120      	movs	r1, #32
 80058fe:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	228c      	movs	r2, #140	; 0x8c
 8005904:	2120      	movs	r1, #32
 8005906:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2284      	movs	r2, #132	; 0x84
 800590c:	2100      	movs	r1, #0
 800590e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e069      	b.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2204      	movs	r2, #4
 800591c:	4013      	ands	r3, r2
 800591e:	d052      	beq.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	2380      	movs	r3, #128	; 0x80
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	401a      	ands	r2, r3
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	429a      	cmp	r2, r3
 8005932:	d148      	bne.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2280      	movs	r2, #128	; 0x80
 800593a:	0112      	lsls	r2, r2, #4
 800593c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593e:	f3ef 8310 	mrs	r3, PRIMASK
 8005942:	613b      	str	r3, [r7, #16]
  return(result);
 8005944:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005948:	2301      	movs	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4924      	ldr	r1, [pc, #144]	; (80059f0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005960:	400a      	ands	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005966:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005970:	f3ef 8310 	mrs	r3, PRIMASK
 8005974:	61fb      	str	r3, [r7, #28]
  return(result);
 8005976:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	64bb      	str	r3, [r7, #72]	; 0x48
 800597a:	2301      	movs	r3, #1
 800597c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f383 8810 	msr	PRIMASK, r3
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2101      	movs	r1, #1
 8005992:	438a      	bics	r2, r1
 8005994:	609a      	str	r2, [r3, #8]
 8005996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	f383 8810 	msr	PRIMASK, r3
}
 80059a0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2288      	movs	r2, #136	; 0x88
 80059a6:	2120      	movs	r1, #32
 80059a8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	228c      	movs	r2, #140	; 0x8c
 80059ae:	2120      	movs	r1, #32
 80059b0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2290      	movs	r2, #144	; 0x90
 80059b6:	2120      	movs	r1, #32
 80059b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2284      	movs	r2, #132	; 0x84
 80059be:	2100      	movs	r1, #0
 80059c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e010      	b.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	425a      	negs	r2, r3
 80059d6:	4153      	adcs	r3, r2
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	001a      	movs	r2, r3
 80059dc:	1dfb      	adds	r3, r7, #7
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d100      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x182>
 80059e4:	e747      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b014      	add	sp, #80	; 0x50
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	fffffe5f 	.word	0xfffffe5f

080059f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08e      	sub	sp, #56	; 0x38
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005a00:	617b      	str	r3, [r7, #20]
  return(result);
 8005a02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34
 8005a06:	2301      	movs	r3, #1
 8005a08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	f383 8810 	msr	PRIMASK, r3
}
 8005a10:	46c0      	nop			; (mov r8, r8)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4926      	ldr	r1, [pc, #152]	; (8005ab8 <UART_EndRxTransfer+0xc4>)
 8005a1e:	400a      	ands	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f383 8810 	msr	PRIMASK, r3
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a32:	623b      	str	r3, [r7, #32]
  return(result);
 8005a34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30
 8005a38:	2301      	movs	r3, #1
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	f383 8810 	msr	PRIMASK, r3
}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	491b      	ldr	r1, [pc, #108]	; (8005abc <UART_EndRxTransfer+0xc8>)
 8005a50:	400a      	ands	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	f383 8810 	msr	PRIMASK, r3
}
 8005a5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d118      	bne.n	8005a9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a68:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a72:	2301      	movs	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f383 8810 	msr	PRIMASK, r3
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2110      	movs	r1, #16
 8005a8a:	438a      	bics	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	228c      	movs	r2, #140	; 0x8c
 8005a9e:	2120      	movs	r1, #32
 8005aa0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b00e      	add	sp, #56	; 0x38
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	fffffedf 	.word	0xfffffedf
 8005abc:	effffffe 	.word	0xeffffffe

08005ac0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	225e      	movs	r2, #94	; 0x5e
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2256      	movs	r2, #86	; 0x56
 8005ada:	2100      	movs	r1, #0
 8005adc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff fb31 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	b004      	add	sp, #16
 8005aec:	bd80      	pop	{r7, pc}

08005aee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af6:	f3ef 8310 	mrs	r3, PRIMASK
 8005afa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005afc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	2301      	movs	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f383 8810 	msr	PRIMASK, r3
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2140      	movs	r1, #64	; 0x40
 8005b18:	438a      	bics	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2288      	movs	r2, #136	; 0x88
 8005b2c:	2120      	movs	r1, #32
 8005b2e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7ff fafd 	bl	8005138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b006      	add	sp, #24
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e05d      	b.n	8005c1c <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2288      	movs	r2, #136	; 0x88
 8005b64:	589b      	ldr	r3, [r3, r2]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2284      	movs	r2, #132	; 0x84
 8005b6e:	2100      	movs	r1, #0
 8005b70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7fb fb3b 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2288      	movs	r2, #136	; 0x88
 8005b7e:	2124      	movs	r1, #36	; 0x24
 8005b80:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	438a      	bics	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7ff faeb 	bl	8005170 <UART_SetConfig>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e03b      	b.n	8005c1c <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f7ff fd56 	bl	8005660 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2180      	movs	r1, #128	; 0x80
 8005bc0:	01c9      	lsls	r1, r1, #7
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <HAL_RS485Ex_Init+0xdc>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	055b      	lsls	r3, r3, #21
 8005be0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	041b      	lsls	r3, r3, #16
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a0d      	ldr	r2, [pc, #52]	; (8005c28 <HAL_RS485Ex_Init+0xe0>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	0019      	movs	r1, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7ff fdd7 	bl	80057c8 <UART_CheckIdleState>
 8005c1a:	0003      	movs	r3, r0
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b006      	add	sp, #24
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	ffff7fff 	.word	0xffff7fff
 8005c28:	fc00ffff 	.word	0xfc00ffff

08005c2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2284      	movs	r2, #132	; 0x84
 8005c68:	5c9b      	ldrb	r3, [r3, r2]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e027      	b.n	8005cc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2284      	movs	r2, #132	; 0x84
 8005c76:	2101      	movs	r1, #1
 8005c78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2288      	movs	r2, #136	; 0x88
 8005c7e:	2124      	movs	r1, #36	; 0x24
 8005c80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2101      	movs	r1, #1
 8005c96:	438a      	bics	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a0b      	ldr	r2, [pc, #44]	; (8005ccc <HAL_UARTEx_DisableFifoMode+0x70>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2288      	movs	r2, #136	; 0x88
 8005cb4:	2120      	movs	r1, #32
 8005cb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2284      	movs	r2, #132	; 0x84
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b004      	add	sp, #16
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	dfffffff 	.word	0xdfffffff

08005cd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2284      	movs	r2, #132	; 0x84
 8005cde:	5c9b      	ldrb	r3, [r3, r2]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e02e      	b.n	8005d46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2284      	movs	r2, #132	; 0x84
 8005cec:	2101      	movs	r1, #1
 8005cee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2288      	movs	r2, #136	; 0x88
 8005cf4:	2124      	movs	r1, #36	; 0x24
 8005cf6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	438a      	bics	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	08d9      	lsrs	r1, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 f854 	bl	8005dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2288      	movs	r2, #136	; 0x88
 8005d38:	2120      	movs	r1, #32
 8005d3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2284      	movs	r2, #132	; 0x84
 8005d40:	2100      	movs	r1, #0
 8005d42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	0018      	movs	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b004      	add	sp, #16
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2284      	movs	r2, #132	; 0x84
 8005d5e:	5c9b      	ldrb	r3, [r3, r2]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e02f      	b.n	8005dc8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2284      	movs	r2, #132	; 0x84
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2288      	movs	r2, #136	; 0x88
 8005d74:	2124      	movs	r1, #36	; 0x24
 8005d76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	438a      	bics	r2, r1
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4a0e      	ldr	r2, [pc, #56]	; (8005dd0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	0018      	movs	r0, r3
 8005daa:	f000 f813 	bl	8005dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2288      	movs	r2, #136	; 0x88
 8005dba:	2120      	movs	r1, #32
 8005dbc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2284      	movs	r2, #132	; 0x84
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b004      	add	sp, #16
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	f1ffffff 	.word	0xf1ffffff

08005dd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d108      	bne.n	8005df6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	226a      	movs	r2, #106	; 0x6a
 8005de8:	2101      	movs	r1, #1
 8005dea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2268      	movs	r2, #104	; 0x68
 8005df0:	2101      	movs	r1, #1
 8005df2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005df4:	e043      	b.n	8005e7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005df6:	260f      	movs	r6, #15
 8005df8:	19bb      	adds	r3, r7, r6
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dfe:	200e      	movs	r0, #14
 8005e00:	183b      	adds	r3, r7, r0
 8005e02:	2208      	movs	r2, #8
 8005e04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	0e5b      	lsrs	r3, r3, #25
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	240d      	movs	r4, #13
 8005e12:	193b      	adds	r3, r7, r4
 8005e14:	2107      	movs	r1, #7
 8005e16:	400a      	ands	r2, r1
 8005e18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	0f5b      	lsrs	r3, r3, #29
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	250c      	movs	r5, #12
 8005e26:	197b      	adds	r3, r7, r5
 8005e28:	2107      	movs	r1, #7
 8005e2a:	400a      	ands	r2, r1
 8005e2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e2e:	183b      	adds	r3, r7, r0
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	197a      	adds	r2, r7, r5
 8005e34:	7812      	ldrb	r2, [r2, #0]
 8005e36:	4914      	ldr	r1, [pc, #80]	; (8005e88 <UARTEx_SetNbDataToProcess+0xb4>)
 8005e38:	5c8a      	ldrb	r2, [r1, r2]
 8005e3a:	435a      	muls	r2, r3
 8005e3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e3e:	197b      	adds	r3, r7, r5
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	4a12      	ldr	r2, [pc, #72]	; (8005e8c <UARTEx_SetNbDataToProcess+0xb8>)
 8005e44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e46:	0019      	movs	r1, r3
 8005e48:	f7fa f9e6 	bl	8000218 <__divsi3>
 8005e4c:	0003      	movs	r3, r0
 8005e4e:	b299      	uxth	r1, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	226a      	movs	r2, #106	; 0x6a
 8005e54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e56:	19bb      	adds	r3, r7, r6
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	193a      	adds	r2, r7, r4
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	490a      	ldr	r1, [pc, #40]	; (8005e88 <UARTEx_SetNbDataToProcess+0xb4>)
 8005e60:	5c8a      	ldrb	r2, [r1, r2]
 8005e62:	435a      	muls	r2, r3
 8005e64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e66:	193b      	adds	r3, r7, r4
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	4a08      	ldr	r2, [pc, #32]	; (8005e8c <UARTEx_SetNbDataToProcess+0xb8>)
 8005e6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e6e:	0019      	movs	r1, r3
 8005e70:	f7fa f9d2 	bl	8000218 <__divsi3>
 8005e74:	0003      	movs	r3, r0
 8005e76:	b299      	uxth	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2268      	movs	r2, #104	; 0x68
 8005e7c:	5299      	strh	r1, [r3, r2]
}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b005      	add	sp, #20
 8005e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	08005fcc 	.word	0x08005fcc
 8005e8c:	08005fd4 	.word	0x08005fd4

08005e90 <memset>:
 8005e90:	0003      	movs	r3, r0
 8005e92:	1882      	adds	r2, r0, r2
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	7019      	strb	r1, [r3, #0]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <__libc_init_array>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	4c0c      	ldr	r4, [pc, #48]	; (8005ed8 <__libc_init_array+0x38>)
 8005ea6:	4d0d      	ldr	r5, [pc, #52]	; (8005edc <__libc_init_array+0x3c>)
 8005ea8:	1b64      	subs	r4, r4, r5
 8005eaa:	10a4      	asrs	r4, r4, #2
 8005eac:	42a6      	cmp	r6, r4
 8005eae:	d109      	bne.n	8005ec4 <__libc_init_array+0x24>
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	f000 f819 	bl	8005ee8 <_init>
 8005eb6:	4c0a      	ldr	r4, [pc, #40]	; (8005ee0 <__libc_init_array+0x40>)
 8005eb8:	4d0a      	ldr	r5, [pc, #40]	; (8005ee4 <__libc_init_array+0x44>)
 8005eba:	1b64      	subs	r4, r4, r5
 8005ebc:	10a4      	asrs	r4, r4, #2
 8005ebe:	42a6      	cmp	r6, r4
 8005ec0:	d105      	bne.n	8005ece <__libc_init_array+0x2e>
 8005ec2:	bd70      	pop	{r4, r5, r6, pc}
 8005ec4:	00b3      	lsls	r3, r6, #2
 8005ec6:	58eb      	ldr	r3, [r5, r3]
 8005ec8:	4798      	blx	r3
 8005eca:	3601      	adds	r6, #1
 8005ecc:	e7ee      	b.n	8005eac <__libc_init_array+0xc>
 8005ece:	00b3      	lsls	r3, r6, #2
 8005ed0:	58eb      	ldr	r3, [r5, r3]
 8005ed2:	4798      	blx	r3
 8005ed4:	3601      	adds	r6, #1
 8005ed6:	e7f2      	b.n	8005ebe <__libc_init_array+0x1e>
 8005ed8:	08005fe4 	.word	0x08005fe4
 8005edc:	08005fe4 	.word	0x08005fe4
 8005ee0:	08005fe8 	.word	0x08005fe8
 8005ee4:	08005fe4 	.word	0x08005fe4

08005ee8 <_init>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr

08005ef4 <_fini>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efa:	bc08      	pop	{r3}
 8005efc:	469e      	mov	lr, r3
 8005efe:	4770      	bx	lr
